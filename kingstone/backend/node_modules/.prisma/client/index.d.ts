
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model PasswordReset
 * 
 */
export type PasswordReset = $Result.DefaultSelection<Prisma.$PasswordResetPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model InventoryItem
 * 
 */
export type InventoryItem = $Result.DefaultSelection<Prisma.$InventoryItemPayload>
/**
 * Model Pedido
 * 
 */
export type Pedido = $Result.DefaultSelection<Prisma.$PedidoPayload>
/**
 * Model Cotizacion
 * 
 */
export type Cotizacion = $Result.DefaultSelection<Prisma.$CotizacionPayload>
/**
 * Model CotizacionItem
 * 
 */
export type CotizacionItem = $Result.DefaultSelection<Prisma.$CotizacionItemPayload>
/**
 * Model Asignacion
 * 
 */
export type Asignacion = $Result.DefaultSelection<Prisma.$AsignacionPayload>
/**
 * Model CotizacionNotificacion
 * 
 */
export type CotizacionNotificacion = $Result.DefaultSelection<Prisma.$CotizacionNotificacionPayload>
/**
 * Model Oferta
 * 
 */
export type Oferta = $Result.DefaultSelection<Prisma.$OfertaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.passwordReset`: Exposes CRUD operations for the **PasswordReset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResets
    * const passwordResets = await prisma.passwordReset.findMany()
    * ```
    */
  get passwordReset(): Prisma.PasswordResetDelegate<ExtArgs>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs>;

  /**
   * `prisma.inventoryItem`: Exposes CRUD operations for the **InventoryItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryItems
    * const inventoryItems = await prisma.inventoryItem.findMany()
    * ```
    */
  get inventoryItem(): Prisma.InventoryItemDelegate<ExtArgs>;

  /**
   * `prisma.pedido`: Exposes CRUD operations for the **Pedido** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pedidos
    * const pedidos = await prisma.pedido.findMany()
    * ```
    */
  get pedido(): Prisma.PedidoDelegate<ExtArgs>;

  /**
   * `prisma.cotizacion`: Exposes CRUD operations for the **Cotizacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cotizacions
    * const cotizacions = await prisma.cotizacion.findMany()
    * ```
    */
  get cotizacion(): Prisma.CotizacionDelegate<ExtArgs>;

  /**
   * `prisma.cotizacionItem`: Exposes CRUD operations for the **CotizacionItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CotizacionItems
    * const cotizacionItems = await prisma.cotizacionItem.findMany()
    * ```
    */
  get cotizacionItem(): Prisma.CotizacionItemDelegate<ExtArgs>;

  /**
   * `prisma.asignacion`: Exposes CRUD operations for the **Asignacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Asignacions
    * const asignacions = await prisma.asignacion.findMany()
    * ```
    */
  get asignacion(): Prisma.AsignacionDelegate<ExtArgs>;

  /**
   * `prisma.cotizacionNotificacion`: Exposes CRUD operations for the **CotizacionNotificacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CotizacionNotificacions
    * const cotizacionNotificacions = await prisma.cotizacionNotificacion.findMany()
    * ```
    */
  get cotizacionNotificacion(): Prisma.CotizacionNotificacionDelegate<ExtArgs>;

  /**
   * `prisma.oferta`: Exposes CRUD operations for the **Oferta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ofertas
    * const ofertas = await prisma.oferta.findMany()
    * ```
    */
  get oferta(): Prisma.OfertaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    PasswordReset: 'PasswordReset',
    Cliente: 'Cliente',
    InventoryItem: 'InventoryItem',
    Pedido: 'Pedido',
    Cotizacion: 'Cotizacion',
    CotizacionItem: 'CotizacionItem',
    Asignacion: 'Asignacion',
    CotizacionNotificacion: 'CotizacionNotificacion',
    Oferta: 'Oferta'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "passwordReset" | "cliente" | "inventoryItem" | "pedido" | "cotizacion" | "cotizacionItem" | "asignacion" | "cotizacionNotificacion" | "oferta"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      PasswordReset: {
        payload: Prisma.$PasswordResetPayload<ExtArgs>
        fields: Prisma.PasswordResetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findMany: {
            args: Prisma.PasswordResetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          create: {
            args: Prisma.PasswordResetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          createMany: {
            args: Prisma.PasswordResetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PasswordResetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          update: {
            args: Prisma.PasswordResetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PasswordResetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordReset>
          }
          groupBy: {
            args: Prisma.PasswordResetGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      InventoryItem: {
        payload: Prisma.$InventoryItemPayload<ExtArgs>
        fields: Prisma.InventoryItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          findFirst: {
            args: Prisma.InventoryItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          findMany: {
            args: Prisma.InventoryItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>[]
          }
          create: {
            args: Prisma.InventoryItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          createMany: {
            args: Prisma.InventoryItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InventoryItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          update: {
            args: Prisma.InventoryItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          deleteMany: {
            args: Prisma.InventoryItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          aggregate: {
            args: Prisma.InventoryItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryItem>
          }
          groupBy: {
            args: Prisma.InventoryItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryItemCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemCountAggregateOutputType> | number
          }
        }
      }
      Pedido: {
        payload: Prisma.$PedidoPayload<ExtArgs>
        fields: Prisma.PedidoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PedidoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PedidoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          findFirst: {
            args: Prisma.PedidoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PedidoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          findMany: {
            args: Prisma.PedidoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>[]
          }
          create: {
            args: Prisma.PedidoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          createMany: {
            args: Prisma.PedidoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PedidoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          update: {
            args: Prisma.PedidoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          deleteMany: {
            args: Prisma.PedidoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PedidoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PedidoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          aggregate: {
            args: Prisma.PedidoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePedido>
          }
          groupBy: {
            args: Prisma.PedidoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PedidoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PedidoCountArgs<ExtArgs>
            result: $Utils.Optional<PedidoCountAggregateOutputType> | number
          }
        }
      }
      Cotizacion: {
        payload: Prisma.$CotizacionPayload<ExtArgs>
        fields: Prisma.CotizacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CotizacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CotizacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionPayload>
          }
          findFirst: {
            args: Prisma.CotizacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CotizacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionPayload>
          }
          findMany: {
            args: Prisma.CotizacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionPayload>[]
          }
          create: {
            args: Prisma.CotizacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionPayload>
          }
          createMany: {
            args: Prisma.CotizacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CotizacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionPayload>
          }
          update: {
            args: Prisma.CotizacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionPayload>
          }
          deleteMany: {
            args: Prisma.CotizacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CotizacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CotizacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionPayload>
          }
          aggregate: {
            args: Prisma.CotizacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCotizacion>
          }
          groupBy: {
            args: Prisma.CotizacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CotizacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CotizacionCountArgs<ExtArgs>
            result: $Utils.Optional<CotizacionCountAggregateOutputType> | number
          }
        }
      }
      CotizacionItem: {
        payload: Prisma.$CotizacionItemPayload<ExtArgs>
        fields: Prisma.CotizacionItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CotizacionItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CotizacionItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionItemPayload>
          }
          findFirst: {
            args: Prisma.CotizacionItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CotizacionItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionItemPayload>
          }
          findMany: {
            args: Prisma.CotizacionItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionItemPayload>[]
          }
          create: {
            args: Prisma.CotizacionItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionItemPayload>
          }
          createMany: {
            args: Prisma.CotizacionItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CotizacionItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionItemPayload>
          }
          update: {
            args: Prisma.CotizacionItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionItemPayload>
          }
          deleteMany: {
            args: Prisma.CotizacionItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CotizacionItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CotizacionItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionItemPayload>
          }
          aggregate: {
            args: Prisma.CotizacionItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCotizacionItem>
          }
          groupBy: {
            args: Prisma.CotizacionItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CotizacionItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CotizacionItemCountArgs<ExtArgs>
            result: $Utils.Optional<CotizacionItemCountAggregateOutputType> | number
          }
        }
      }
      Asignacion: {
        payload: Prisma.$AsignacionPayload<ExtArgs>
        fields: Prisma.AsignacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AsignacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AsignacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          findFirst: {
            args: Prisma.AsignacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AsignacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          findMany: {
            args: Prisma.AsignacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>[]
          }
          create: {
            args: Prisma.AsignacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          createMany: {
            args: Prisma.AsignacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AsignacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          update: {
            args: Prisma.AsignacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          deleteMany: {
            args: Prisma.AsignacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AsignacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AsignacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          aggregate: {
            args: Prisma.AsignacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAsignacion>
          }
          groupBy: {
            args: Prisma.AsignacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AsignacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AsignacionCountArgs<ExtArgs>
            result: $Utils.Optional<AsignacionCountAggregateOutputType> | number
          }
        }
      }
      CotizacionNotificacion: {
        payload: Prisma.$CotizacionNotificacionPayload<ExtArgs>
        fields: Prisma.CotizacionNotificacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CotizacionNotificacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionNotificacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CotizacionNotificacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionNotificacionPayload>
          }
          findFirst: {
            args: Prisma.CotizacionNotificacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionNotificacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CotizacionNotificacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionNotificacionPayload>
          }
          findMany: {
            args: Prisma.CotizacionNotificacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionNotificacionPayload>[]
          }
          create: {
            args: Prisma.CotizacionNotificacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionNotificacionPayload>
          }
          createMany: {
            args: Prisma.CotizacionNotificacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CotizacionNotificacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionNotificacionPayload>
          }
          update: {
            args: Prisma.CotizacionNotificacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionNotificacionPayload>
          }
          deleteMany: {
            args: Prisma.CotizacionNotificacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CotizacionNotificacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CotizacionNotificacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotizacionNotificacionPayload>
          }
          aggregate: {
            args: Prisma.CotizacionNotificacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCotizacionNotificacion>
          }
          groupBy: {
            args: Prisma.CotizacionNotificacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CotizacionNotificacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CotizacionNotificacionCountArgs<ExtArgs>
            result: $Utils.Optional<CotizacionNotificacionCountAggregateOutputType> | number
          }
        }
      }
      Oferta: {
        payload: Prisma.$OfertaPayload<ExtArgs>
        fields: Prisma.OfertaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OfertaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfertaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OfertaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfertaPayload>
          }
          findFirst: {
            args: Prisma.OfertaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfertaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OfertaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfertaPayload>
          }
          findMany: {
            args: Prisma.OfertaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfertaPayload>[]
          }
          create: {
            args: Prisma.OfertaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfertaPayload>
          }
          createMany: {
            args: Prisma.OfertaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OfertaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfertaPayload>
          }
          update: {
            args: Prisma.OfertaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfertaPayload>
          }
          deleteMany: {
            args: Prisma.OfertaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OfertaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OfertaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfertaPayload>
          }
          aggregate: {
            args: Prisma.OfertaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOferta>
          }
          groupBy: {
            args: Prisma.OfertaGroupByArgs<ExtArgs>
            result: $Utils.Optional<OfertaGroupByOutputType>[]
          }
          count: {
            args: Prisma.OfertaCountArgs<ExtArgs>
            result: $Utils.Optional<OfertaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    resets: number
    pedidos: number
    cotizacionesCliente: number
    asignacionesOperador: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resets?: boolean | UserCountOutputTypeCountResetsArgs
    pedidos?: boolean | UserCountOutputTypeCountPedidosArgs
    cotizacionesCliente?: boolean | UserCountOutputTypeCountCotizacionesClienteArgs
    asignacionesOperador?: boolean | UserCountOutputTypeCountAsignacionesOperadorArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPedidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PedidoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCotizacionesClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CotizacionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAsignacionesOperadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsignacionWhereInput
  }


  /**
   * Count Type InventoryItemCountOutputType
   */

  export type InventoryItemCountOutputType = {
    ofertas: number
  }

  export type InventoryItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ofertas?: boolean | InventoryItemCountOutputTypeCountOfertasArgs
  }

  // Custom InputTypes
  /**
   * InventoryItemCountOutputType without action
   */
  export type InventoryItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemCountOutputType
     */
    select?: InventoryItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryItemCountOutputType without action
   */
  export type InventoryItemCountOutputTypeCountOfertasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfertaWhereInput
  }


  /**
   * Count Type CotizacionCountOutputType
   */

  export type CotizacionCountOutputType = {
    items: number
    asignaciones: number
    notificaciones: number
  }

  export type CotizacionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | CotizacionCountOutputTypeCountItemsArgs
    asignaciones?: boolean | CotizacionCountOutputTypeCountAsignacionesArgs
    notificaciones?: boolean | CotizacionCountOutputTypeCountNotificacionesArgs
  }

  // Custom InputTypes
  /**
   * CotizacionCountOutputType without action
   */
  export type CotizacionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionCountOutputType
     */
    select?: CotizacionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CotizacionCountOutputType without action
   */
  export type CotizacionCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CotizacionItemWhereInput
  }

  /**
   * CotizacionCountOutputType without action
   */
  export type CotizacionCountOutputTypeCountAsignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsignacionWhereInput
  }

  /**
   * CotizacionCountOutputType without action
   */
  export type CotizacionCountOutputTypeCountNotificacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CotizacionNotificacionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    fullName: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    fullName: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    fullName: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    fullName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    fullName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    fullName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    passwordHash: string
    fullName: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    fullName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resets?: boolean | User$resetsArgs<ExtArgs>
    cliente?: boolean | User$clienteArgs<ExtArgs>
    pedidos?: boolean | User$pedidosArgs<ExtArgs>
    cotizacionesCliente?: boolean | User$cotizacionesClienteArgs<ExtArgs>
    asignacionesOperador?: boolean | User$asignacionesOperadorArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    fullName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resets?: boolean | User$resetsArgs<ExtArgs>
    cliente?: boolean | User$clienteArgs<ExtArgs>
    pedidos?: boolean | User$pedidosArgs<ExtArgs>
    cotizacionesCliente?: boolean | User$cotizacionesClienteArgs<ExtArgs>
    asignacionesOperador?: boolean | User$asignacionesOperadorArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      resets: Prisma.$PasswordResetPayload<ExtArgs>[]
      cliente: Prisma.$ClientePayload<ExtArgs> | null
      pedidos: Prisma.$PedidoPayload<ExtArgs>[]
      cotizacionesCliente: Prisma.$CotizacionPayload<ExtArgs>[]
      asignacionesOperador: Prisma.$AsignacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      passwordHash: string
      fullName: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resets<T extends User$resetsArgs<ExtArgs> = {}>(args?: Subset<T, User$resetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findMany"> | Null>
    cliente<T extends User$clienteArgs<ExtArgs> = {}>(args?: Subset<T, User$clienteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    pedidos<T extends User$pedidosArgs<ExtArgs> = {}>(args?: Subset<T, User$pedidosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, "findMany"> | Null>
    cotizacionesCliente<T extends User$cotizacionesClienteArgs<ExtArgs> = {}>(args?: Subset<T, User$cotizacionesClienteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "findMany"> | Null>
    asignacionesOperador<T extends User$asignacionesOperadorArgs<ExtArgs> = {}>(args?: Subset<T, User$asignacionesOperadorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.resets
   */
  export type User$resetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    where?: PasswordResetWhereInput
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    cursor?: PasswordResetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * User.cliente
   */
  export type User$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
  }

  /**
   * User.pedidos
   */
  export type User$pedidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidoInclude<ExtArgs> | null
    where?: PedidoWhereInput
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    cursor?: PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }

  /**
   * User.cotizacionesCliente
   */
  export type User$cotizacionesClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotizacion
     */
    select?: CotizacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionInclude<ExtArgs> | null
    where?: CotizacionWhereInput
    orderBy?: CotizacionOrderByWithRelationInput | CotizacionOrderByWithRelationInput[]
    cursor?: CotizacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CotizacionScalarFieldEnum | CotizacionScalarFieldEnum[]
  }

  /**
   * User.asignacionesOperador
   */
  export type User$asignacionesOperadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    where?: AsignacionWhereInput
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    cursor?: AsignacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model PasswordReset
   */

  export type AggregatePasswordReset = {
    _count: PasswordResetCountAggregateOutputType | null
    _avg: PasswordResetAvgAggregateOutputType | null
    _sum: PasswordResetSumAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  export type PasswordResetAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PasswordResetSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PasswordResetMinAggregateOutputType = {
    id: number | null
    userId: number | null
    tokenHash: string | null
    expiresAt: Date | null
    usedAt: Date | null
    createdAt: Date | null
  }

  export type PasswordResetMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    tokenHash: string | null
    expiresAt: Date | null
    usedAt: Date | null
    createdAt: Date | null
  }

  export type PasswordResetCountAggregateOutputType = {
    id: number
    userId: number
    tokenHash: number
    expiresAt: number
    usedAt: number
    createdAt: number
    _all: number
  }


  export type PasswordResetAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PasswordResetSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PasswordResetMinAggregateInputType = {
    id?: true
    userId?: true
    tokenHash?: true
    expiresAt?: true
    usedAt?: true
    createdAt?: true
  }

  export type PasswordResetMaxAggregateInputType = {
    id?: true
    userId?: true
    tokenHash?: true
    expiresAt?: true
    usedAt?: true
    createdAt?: true
  }

  export type PasswordResetCountAggregateInputType = {
    id?: true
    userId?: true
    tokenHash?: true
    expiresAt?: true
    usedAt?: true
    createdAt?: true
    _all?: true
  }

  export type PasswordResetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordReset to aggregate.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResets
    **/
    _count?: true | PasswordResetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PasswordResetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PasswordResetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetMaxAggregateInputType
  }

  export type GetPasswordResetAggregateType<T extends PasswordResetAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordReset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordReset[P]>
      : GetScalarType<T[P], AggregatePasswordReset[P]>
  }




  export type PasswordResetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetWhereInput
    orderBy?: PasswordResetOrderByWithAggregationInput | PasswordResetOrderByWithAggregationInput[]
    by: PasswordResetScalarFieldEnum[] | PasswordResetScalarFieldEnum
    having?: PasswordResetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetCountAggregateInputType | true
    _avg?: PasswordResetAvgAggregateInputType
    _sum?: PasswordResetSumAggregateInputType
    _min?: PasswordResetMinAggregateInputType
    _max?: PasswordResetMaxAggregateInputType
  }

  export type PasswordResetGroupByOutputType = {
    id: number
    userId: number
    tokenHash: string
    expiresAt: Date
    usedAt: Date | null
    createdAt: Date
    _count: PasswordResetCountAggregateOutputType | null
    _avg: PasswordResetAvgAggregateOutputType | null
    _sum: PasswordResetSumAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  type GetPasswordResetGroupByPayload<T extends PasswordResetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenHash?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordReset"]>


  export type PasswordResetSelectScalar = {
    id?: boolean
    userId?: boolean
    tokenHash?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    createdAt?: boolean
  }

  export type PasswordResetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PasswordResetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordReset"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      tokenHash: string
      expiresAt: Date
      usedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["passwordReset"]>
    composites: {}
  }

  type PasswordResetGetPayload<S extends boolean | null | undefined | PasswordResetDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetPayload, S>

  type PasswordResetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PasswordResetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PasswordResetCountAggregateInputType | true
    }

  export interface PasswordResetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordReset'], meta: { name: 'PasswordReset' } }
    /**
     * Find zero or one PasswordReset that matches the filter.
     * @param {PasswordResetFindUniqueArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetFindUniqueArgs>(args: SelectSubset<T, PasswordResetFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PasswordReset that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PasswordResetFindUniqueOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PasswordReset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetFindFirstArgs>(args?: SelectSubset<T, PasswordResetFindFirstArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PasswordReset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PasswordResets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany()
     * 
     * // Get first 10 PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetFindManyArgs>(args?: SelectSubset<T, PasswordResetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PasswordReset.
     * @param {PasswordResetCreateArgs} args - Arguments to create a PasswordReset.
     * @example
     * // Create one PasswordReset
     * const PasswordReset = await prisma.passwordReset.create({
     *   data: {
     *     // ... data to create a PasswordReset
     *   }
     * })
     * 
     */
    create<T extends PasswordResetCreateArgs>(args: SelectSubset<T, PasswordResetCreateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PasswordResets.
     * @param {PasswordResetCreateManyArgs} args - Arguments to create many PasswordResets.
     * @example
     * // Create many PasswordResets
     * const passwordReset = await prisma.passwordReset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetCreateManyArgs>(args?: SelectSubset<T, PasswordResetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PasswordReset.
     * @param {PasswordResetDeleteArgs} args - Arguments to delete one PasswordReset.
     * @example
     * // Delete one PasswordReset
     * const PasswordReset = await prisma.passwordReset.delete({
     *   where: {
     *     // ... filter to delete one PasswordReset
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetDeleteArgs>(args: SelectSubset<T, PasswordResetDeleteArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PasswordReset.
     * @param {PasswordResetUpdateArgs} args - Arguments to update one PasswordReset.
     * @example
     * // Update one PasswordReset
     * const passwordReset = await prisma.passwordReset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetUpdateArgs>(args: SelectSubset<T, PasswordResetUpdateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PasswordResets.
     * @param {PasswordResetDeleteManyArgs} args - Arguments to filter PasswordResets to delete.
     * @example
     * // Delete a few PasswordResets
     * const { count } = await prisma.passwordReset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetDeleteManyArgs>(args?: SelectSubset<T, PasswordResetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResets
     * const passwordReset = await prisma.passwordReset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetUpdateManyArgs>(args: SelectSubset<T, PasswordResetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PasswordReset.
     * @param {PasswordResetUpsertArgs} args - Arguments to update or create a PasswordReset.
     * @example
     * // Update or create a PasswordReset
     * const passwordReset = await prisma.passwordReset.upsert({
     *   create: {
     *     // ... data to create a PasswordReset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordReset we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetUpsertArgs>(args: SelectSubset<T, PasswordResetUpsertArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetCountArgs} args - Arguments to filter PasswordResets to count.
     * @example
     * // Count the number of PasswordResets
     * const count = await prisma.passwordReset.count({
     *   where: {
     *     // ... the filter for the PasswordResets we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetCountArgs>(
      args?: Subset<T, PasswordResetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetAggregateArgs>(args: Subset<T, PasswordResetAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetAggregateType<T>>

    /**
     * Group by PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordReset model
   */
  readonly fields: PasswordResetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordReset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordReset model
   */ 
  interface PasswordResetFieldRefs {
    readonly id: FieldRef<"PasswordReset", 'Int'>
    readonly userId: FieldRef<"PasswordReset", 'Int'>
    readonly tokenHash: FieldRef<"PasswordReset", 'String'>
    readonly expiresAt: FieldRef<"PasswordReset", 'DateTime'>
    readonly usedAt: FieldRef<"PasswordReset", 'DateTime'>
    readonly createdAt: FieldRef<"PasswordReset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordReset findUnique
   */
  export type PasswordResetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findUniqueOrThrow
   */
  export type PasswordResetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findFirst
   */
  export type PasswordResetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findFirstOrThrow
   */
  export type PasswordResetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findMany
   */
  export type PasswordResetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResets to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset create
   */
  export type PasswordResetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordReset.
     */
    data: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
  }

  /**
   * PasswordReset createMany
   */
  export type PasswordResetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResets.
     */
    data: PasswordResetCreateManyInput | PasswordResetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordReset update
   */
  export type PasswordResetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordReset.
     */
    data: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
    /**
     * Choose, which PasswordReset to update.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset updateMany
   */
  export type PasswordResetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResets.
     */
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResets to update
     */
    where?: PasswordResetWhereInput
  }

  /**
   * PasswordReset upsert
   */
  export type PasswordResetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordReset to update in case it exists.
     */
    where: PasswordResetWhereUniqueInput
    /**
     * In case the PasswordReset found by the `where` argument doesn't exist, create a new PasswordReset with this data.
     */
    create: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
    /**
     * In case the PasswordReset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
  }

  /**
   * PasswordReset delete
   */
  export type PasswordResetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter which PasswordReset to delete.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset deleteMany
   */
  export type PasswordResetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResets to delete
     */
    where?: PasswordResetWhereInput
  }

  /**
   * PasswordReset without action
   */
  export type PasswordResetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
  }


  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id_cliente: number | null
    id_usuario: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id_cliente: number | null
    id_usuario: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id_cliente: number | null
    rut: string | null
    nombre_contacto: string | null
    email: string | null
    telefono: string | null
    direccion: string | null
    comuna: string | null
    ciudad: string | null
    id_usuario: number | null
    creado_en: Date | null
  }

  export type ClienteMaxAggregateOutputType = {
    id_cliente: number | null
    rut: string | null
    nombre_contacto: string | null
    email: string | null
    telefono: string | null
    direccion: string | null
    comuna: string | null
    ciudad: string | null
    id_usuario: number | null
    creado_en: Date | null
  }

  export type ClienteCountAggregateOutputType = {
    id_cliente: number
    rut: number
    nombre_contacto: number
    email: number
    telefono: number
    direccion: number
    comuna: number
    ciudad: number
    id_usuario: number
    creado_en: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id_cliente?: true
    id_usuario?: true
  }

  export type ClienteSumAggregateInputType = {
    id_cliente?: true
    id_usuario?: true
  }

  export type ClienteMinAggregateInputType = {
    id_cliente?: true
    rut?: true
    nombre_contacto?: true
    email?: true
    telefono?: true
    direccion?: true
    comuna?: true
    ciudad?: true
    id_usuario?: true
    creado_en?: true
  }

  export type ClienteMaxAggregateInputType = {
    id_cliente?: true
    rut?: true
    nombre_contacto?: true
    email?: true
    telefono?: true
    direccion?: true
    comuna?: true
    ciudad?: true
    id_usuario?: true
    creado_en?: true
  }

  export type ClienteCountAggregateInputType = {
    id_cliente?: true
    rut?: true
    nombre_contacto?: true
    email?: true
    telefono?: true
    direccion?: true
    comuna?: true
    ciudad?: true
    id_usuario?: true
    creado_en?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id_cliente: number
    rut: string | null
    nombre_contacto: string | null
    email: string | null
    telefono: string | null
    direccion: string | null
    comuna: string | null
    ciudad: string | null
    id_usuario: number
    creado_en: Date
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_cliente?: boolean
    rut?: boolean
    nombre_contacto?: boolean
    email?: boolean
    telefono?: boolean
    direccion?: boolean
    comuna?: boolean
    ciudad?: boolean
    id_usuario?: boolean
    creado_en?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>


  export type ClienteSelectScalar = {
    id_cliente?: boolean
    rut?: boolean
    nombre_contacto?: boolean
    email?: boolean
    telefono?: boolean
    direccion?: boolean
    comuna?: boolean
    ciudad?: boolean
    id_usuario?: boolean
    creado_en?: boolean
  }

  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_cliente: number
      rut: string | null
      nombre_contacto: string | null
      email: string | null
      telefono: string | null
      direccion: string | null
      comuna: string | null
      ciudad: string | null
      id_usuario: number
      creado_en: Date
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteFindUniqueArgs>(args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteFindFirstArgs>(args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id_cliente`
     * const clienteWithId_clienteOnly = await prisma.cliente.findMany({ select: { id_cliente: true } })
     * 
     */
    findMany<T extends ClienteFindManyArgs>(args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends ClienteCreateArgs>(args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteCreateManyArgs>(args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends ClienteDeleteArgs>(args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteUpdateArgs>(args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteDeleteManyArgs>(args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteUpdateManyArgs>(args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends ClienteUpsertArgs>(args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cliente model
   */ 
  interface ClienteFieldRefs {
    readonly id_cliente: FieldRef<"Cliente", 'Int'>
    readonly rut: FieldRef<"Cliente", 'String'>
    readonly nombre_contacto: FieldRef<"Cliente", 'String'>
    readonly email: FieldRef<"Cliente", 'String'>
    readonly telefono: FieldRef<"Cliente", 'String'>
    readonly direccion: FieldRef<"Cliente", 'String'>
    readonly comuna: FieldRef<"Cliente", 'String'>
    readonly ciudad: FieldRef<"Cliente", 'String'>
    readonly id_usuario: FieldRef<"Cliente", 'Int'>
    readonly creado_en: FieldRef<"Cliente", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model InventoryItem
   */

  export type AggregateInventoryItem = {
    _count: InventoryItemCountAggregateOutputType | null
    _avg: InventoryItemAvgAggregateOutputType | null
    _sum: InventoryItemSumAggregateOutputType | null
    _min: InventoryItemMinAggregateOutputType | null
    _max: InventoryItemMaxAggregateOutputType | null
  }

  export type InventoryItemAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
    priceWeb: number | null
    priceStore: number | null
    priceWsp: number | null
    umbralBajoStock: number | null
  }

  export type InventoryItemSumAggregateOutputType = {
    id: number | null
    quantity: number | null
    priceWeb: number | null
    priceStore: number | null
    priceWsp: number | null
    umbralBajoStock: number | null
  }

  export type InventoryItemMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    itemType: string | null
    color: string | null
    provider: string | null
    quantity: number | null
    priceWeb: number | null
    priceStore: number | null
    priceWsp: number | null
    umbralBajoStock: number | null
    qrRaw: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryItemMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    itemType: string | null
    color: string | null
    provider: string | null
    quantity: number | null
    priceWeb: number | null
    priceStore: number | null
    priceWsp: number | null
    umbralBajoStock: number | null
    qrRaw: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryItemCountAggregateOutputType = {
    id: number
    code: number
    name: number
    itemType: number
    color: number
    provider: number
    quantity: number
    priceWeb: number
    priceStore: number
    priceWsp: number
    umbralBajoStock: number
    qrRaw: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InventoryItemAvgAggregateInputType = {
    id?: true
    quantity?: true
    priceWeb?: true
    priceStore?: true
    priceWsp?: true
    umbralBajoStock?: true
  }

  export type InventoryItemSumAggregateInputType = {
    id?: true
    quantity?: true
    priceWeb?: true
    priceStore?: true
    priceWsp?: true
    umbralBajoStock?: true
  }

  export type InventoryItemMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    itemType?: true
    color?: true
    provider?: true
    quantity?: true
    priceWeb?: true
    priceStore?: true
    priceWsp?: true
    umbralBajoStock?: true
    qrRaw?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryItemMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    itemType?: true
    color?: true
    provider?: true
    quantity?: true
    priceWeb?: true
    priceStore?: true
    priceWsp?: true
    umbralBajoStock?: true
    qrRaw?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryItemCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    itemType?: true
    color?: true
    provider?: true
    quantity?: true
    priceWeb?: true
    priceStore?: true
    priceWsp?: true
    umbralBajoStock?: true
    qrRaw?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InventoryItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItem to aggregate.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryItems
    **/
    _count?: true | InventoryItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryItemMaxAggregateInputType
  }

  export type GetInventoryItemAggregateType<T extends InventoryItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryItem[P]>
      : GetScalarType<T[P], AggregateInventoryItem[P]>
  }




  export type InventoryItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemWhereInput
    orderBy?: InventoryItemOrderByWithAggregationInput | InventoryItemOrderByWithAggregationInput[]
    by: InventoryItemScalarFieldEnum[] | InventoryItemScalarFieldEnum
    having?: InventoryItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryItemCountAggregateInputType | true
    _avg?: InventoryItemAvgAggregateInputType
    _sum?: InventoryItemSumAggregateInputType
    _min?: InventoryItemMinAggregateInputType
    _max?: InventoryItemMaxAggregateInputType
  }

  export type InventoryItemGroupByOutputType = {
    id: number
    code: string
    name: string
    itemType: string
    color: string
    provider: string
    quantity: number
    priceWeb: number
    priceStore: number
    priceWsp: number
    umbralBajoStock: number
    qrRaw: string | null
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: InventoryItemCountAggregateOutputType | null
    _avg: InventoryItemAvgAggregateOutputType | null
    _sum: InventoryItemSumAggregateOutputType | null
    _min: InventoryItemMinAggregateOutputType | null
    _max: InventoryItemMaxAggregateOutputType | null
  }

  type GetInventoryItemGroupByPayload<T extends InventoryItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
        }
      >
    >


  export type InventoryItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    itemType?: boolean
    color?: boolean
    provider?: boolean
    quantity?: boolean
    priceWeb?: boolean
    priceStore?: boolean
    priceWsp?: boolean
    umbralBajoStock?: boolean
    qrRaw?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ofertas?: boolean | InventoryItem$ofertasArgs<ExtArgs>
    _count?: boolean | InventoryItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryItem"]>


  export type InventoryItemSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    itemType?: boolean
    color?: boolean
    provider?: boolean
    quantity?: boolean
    priceWeb?: boolean
    priceStore?: boolean
    priceWsp?: boolean
    umbralBajoStock?: boolean
    qrRaw?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InventoryItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ofertas?: boolean | InventoryItem$ofertasArgs<ExtArgs>
    _count?: boolean | InventoryItemCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $InventoryItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryItem"
    objects: {
      ofertas: Prisma.$OfertaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
      itemType: string
      color: string
      provider: string
      quantity: number
      priceWeb: number
      priceStore: number
      priceWsp: number
      /**
       * Umbral para aviso de bajo stock
       */
      umbralBajoStock: number
      qrRaw: string | null
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inventoryItem"]>
    composites: {}
  }

  type InventoryItemGetPayload<S extends boolean | null | undefined | InventoryItemDefaultArgs> = $Result.GetResult<Prisma.$InventoryItemPayload, S>

  type InventoryItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryItemCountAggregateInputType | true
    }

  export interface InventoryItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryItem'], meta: { name: 'InventoryItem' } }
    /**
     * Find zero or one InventoryItem that matches the filter.
     * @param {InventoryItemFindUniqueArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryItemFindUniqueArgs>(args: SelectSubset<T, InventoryItemFindUniqueArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryItemFindUniqueOrThrowArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryItemFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindFirstArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryItemFindFirstArgs>(args?: SelectSubset<T, InventoryItemFindFirstArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindFirstOrThrowArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryItemFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryItems
     * const inventoryItems = await prisma.inventoryItem.findMany()
     * 
     * // Get first 10 InventoryItems
     * const inventoryItems = await prisma.inventoryItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryItemWithIdOnly = await prisma.inventoryItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryItemFindManyArgs>(args?: SelectSubset<T, InventoryItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryItem.
     * @param {InventoryItemCreateArgs} args - Arguments to create a InventoryItem.
     * @example
     * // Create one InventoryItem
     * const InventoryItem = await prisma.inventoryItem.create({
     *   data: {
     *     // ... data to create a InventoryItem
     *   }
     * })
     * 
     */
    create<T extends InventoryItemCreateArgs>(args: SelectSubset<T, InventoryItemCreateArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryItems.
     * @param {InventoryItemCreateManyArgs} args - Arguments to create many InventoryItems.
     * @example
     * // Create many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryItemCreateManyArgs>(args?: SelectSubset<T, InventoryItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InventoryItem.
     * @param {InventoryItemDeleteArgs} args - Arguments to delete one InventoryItem.
     * @example
     * // Delete one InventoryItem
     * const InventoryItem = await prisma.inventoryItem.delete({
     *   where: {
     *     // ... filter to delete one InventoryItem
     *   }
     * })
     * 
     */
    delete<T extends InventoryItemDeleteArgs>(args: SelectSubset<T, InventoryItemDeleteArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryItem.
     * @param {InventoryItemUpdateArgs} args - Arguments to update one InventoryItem.
     * @example
     * // Update one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryItemUpdateArgs>(args: SelectSubset<T, InventoryItemUpdateArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryItems.
     * @param {InventoryItemDeleteManyArgs} args - Arguments to filter InventoryItems to delete.
     * @example
     * // Delete a few InventoryItems
     * const { count } = await prisma.inventoryItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryItemDeleteManyArgs>(args?: SelectSubset<T, InventoryItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryItemUpdateManyArgs>(args: SelectSubset<T, InventoryItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryItem.
     * @param {InventoryItemUpsertArgs} args - Arguments to update or create a InventoryItem.
     * @example
     * // Update or create a InventoryItem
     * const inventoryItem = await prisma.inventoryItem.upsert({
     *   create: {
     *     // ... data to create a InventoryItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryItem we want to update
     *   }
     * })
     */
    upsert<T extends InventoryItemUpsertArgs>(args: SelectSubset<T, InventoryItemUpsertArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemCountArgs} args - Arguments to filter InventoryItems to count.
     * @example
     * // Count the number of InventoryItems
     * const count = await prisma.inventoryItem.count({
     *   where: {
     *     // ... the filter for the InventoryItems we want to count
     *   }
     * })
    **/
    count<T extends InventoryItemCountArgs>(
      args?: Subset<T, InventoryItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryItemAggregateArgs>(args: Subset<T, InventoryItemAggregateArgs>): Prisma.PrismaPromise<GetInventoryItemAggregateType<T>>

    /**
     * Group by InventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryItemGroupByArgs['orderBy'] }
        : { orderBy?: InventoryItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryItem model
   */
  readonly fields: InventoryItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ofertas<T extends InventoryItem$ofertasArgs<ExtArgs> = {}>(args?: Subset<T, InventoryItem$ofertasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfertaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryItem model
   */ 
  interface InventoryItemFieldRefs {
    readonly id: FieldRef<"InventoryItem", 'Int'>
    readonly code: FieldRef<"InventoryItem", 'String'>
    readonly name: FieldRef<"InventoryItem", 'String'>
    readonly itemType: FieldRef<"InventoryItem", 'String'>
    readonly color: FieldRef<"InventoryItem", 'String'>
    readonly provider: FieldRef<"InventoryItem", 'String'>
    readonly quantity: FieldRef<"InventoryItem", 'Int'>
    readonly priceWeb: FieldRef<"InventoryItem", 'Int'>
    readonly priceStore: FieldRef<"InventoryItem", 'Int'>
    readonly priceWsp: FieldRef<"InventoryItem", 'Int'>
    readonly umbralBajoStock: FieldRef<"InventoryItem", 'Int'>
    readonly qrRaw: FieldRef<"InventoryItem", 'String'>
    readonly imageUrl: FieldRef<"InventoryItem", 'String'>
    readonly createdAt: FieldRef<"InventoryItem", 'DateTime'>
    readonly updatedAt: FieldRef<"InventoryItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InventoryItem findUnique
   */
  export type InventoryItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem findUniqueOrThrow
   */
  export type InventoryItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem findFirst
   */
  export type InventoryItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItems.
     */
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem findFirstOrThrow
   */
  export type InventoryItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItems.
     */
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem findMany
   */
  export type InventoryItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItems to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem create
   */
  export type InventoryItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryItem.
     */
    data: XOR<InventoryItemCreateInput, InventoryItemUncheckedCreateInput>
  }

  /**
   * InventoryItem createMany
   */
  export type InventoryItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryItems.
     */
    data: InventoryItemCreateManyInput | InventoryItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryItem update
   */
  export type InventoryItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryItem.
     */
    data: XOR<InventoryItemUpdateInput, InventoryItemUncheckedUpdateInput>
    /**
     * Choose, which InventoryItem to update.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem updateMany
   */
  export type InventoryItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryItems.
     */
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyInput>
    /**
     * Filter which InventoryItems to update
     */
    where?: InventoryItemWhereInput
  }

  /**
   * InventoryItem upsert
   */
  export type InventoryItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryItem to update in case it exists.
     */
    where: InventoryItemWhereUniqueInput
    /**
     * In case the InventoryItem found by the `where` argument doesn't exist, create a new InventoryItem with this data.
     */
    create: XOR<InventoryItemCreateInput, InventoryItemUncheckedCreateInput>
    /**
     * In case the InventoryItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryItemUpdateInput, InventoryItemUncheckedUpdateInput>
  }

  /**
   * InventoryItem delete
   */
  export type InventoryItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter which InventoryItem to delete.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem deleteMany
   */
  export type InventoryItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItems to delete
     */
    where?: InventoryItemWhereInput
  }

  /**
   * InventoryItem.ofertas
   */
  export type InventoryItem$ofertasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oferta
     */
    select?: OfertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfertaInclude<ExtArgs> | null
    where?: OfertaWhereInput
    orderBy?: OfertaOrderByWithRelationInput | OfertaOrderByWithRelationInput[]
    cursor?: OfertaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OfertaScalarFieldEnum | OfertaScalarFieldEnum[]
  }

  /**
   * InventoryItem without action
   */
  export type InventoryItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
  }


  /**
   * Model Pedido
   */

  export type AggregatePedido = {
    _count: PedidoCountAggregateOutputType | null
    _avg: PedidoAvgAggregateOutputType | null
    _sum: PedidoSumAggregateOutputType | null
    _min: PedidoMinAggregateOutputType | null
    _max: PedidoMaxAggregateOutputType | null
  }

  export type PedidoAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    total: number | null
    itemsCount: number | null
  }

  export type PedidoSumAggregateOutputType = {
    id: number | null
    userId: number | null
    total: number | null
    itemsCount: number | null
  }

  export type PedidoMinAggregateOutputType = {
    id: number | null
    userId: number | null
    clienteEmail: string | null
    clienteNombre: string | null
    estado: string | null
    notificado: boolean | null
    total: number | null
    itemsCount: number | null
    materialId: string | null
    materialLabel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PedidoMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    clienteEmail: string | null
    clienteNombre: string | null
    estado: string | null
    notificado: boolean | null
    total: number | null
    itemsCount: number | null
    materialId: string | null
    materialLabel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PedidoCountAggregateOutputType = {
    id: number
    userId: number
    clienteEmail: number
    clienteNombre: number
    estado: number
    notificado: number
    total: number
    itemsCount: number
    materialId: number
    materialLabel: number
    payload: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PedidoAvgAggregateInputType = {
    id?: true
    userId?: true
    total?: true
    itemsCount?: true
  }

  export type PedidoSumAggregateInputType = {
    id?: true
    userId?: true
    total?: true
    itemsCount?: true
  }

  export type PedidoMinAggregateInputType = {
    id?: true
    userId?: true
    clienteEmail?: true
    clienteNombre?: true
    estado?: true
    notificado?: true
    total?: true
    itemsCount?: true
    materialId?: true
    materialLabel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PedidoMaxAggregateInputType = {
    id?: true
    userId?: true
    clienteEmail?: true
    clienteNombre?: true
    estado?: true
    notificado?: true
    total?: true
    itemsCount?: true
    materialId?: true
    materialLabel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PedidoCountAggregateInputType = {
    id?: true
    userId?: true
    clienteEmail?: true
    clienteNombre?: true
    estado?: true
    notificado?: true
    total?: true
    itemsCount?: true
    materialId?: true
    materialLabel?: true
    payload?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PedidoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pedido to aggregate.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pedidos
    **/
    _count?: true | PedidoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PedidoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PedidoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PedidoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PedidoMaxAggregateInputType
  }

  export type GetPedidoAggregateType<T extends PedidoAggregateArgs> = {
        [P in keyof T & keyof AggregatePedido]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePedido[P]>
      : GetScalarType<T[P], AggregatePedido[P]>
  }




  export type PedidoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PedidoWhereInput
    orderBy?: PedidoOrderByWithAggregationInput | PedidoOrderByWithAggregationInput[]
    by: PedidoScalarFieldEnum[] | PedidoScalarFieldEnum
    having?: PedidoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PedidoCountAggregateInputType | true
    _avg?: PedidoAvgAggregateInputType
    _sum?: PedidoSumAggregateInputType
    _min?: PedidoMinAggregateInputType
    _max?: PedidoMaxAggregateInputType
  }

  export type PedidoGroupByOutputType = {
    id: number
    userId: number | null
    clienteEmail: string | null
    clienteNombre: string | null
    estado: string
    notificado: boolean
    total: number | null
    itemsCount: number | null
    materialId: string | null
    materialLabel: string | null
    payload: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: PedidoCountAggregateOutputType | null
    _avg: PedidoAvgAggregateOutputType | null
    _sum: PedidoSumAggregateOutputType | null
    _min: PedidoMinAggregateOutputType | null
    _max: PedidoMaxAggregateOutputType | null
  }

  type GetPedidoGroupByPayload<T extends PedidoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PedidoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PedidoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PedidoGroupByOutputType[P]>
            : GetScalarType<T[P], PedidoGroupByOutputType[P]>
        }
      >
    >


  export type PedidoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clienteEmail?: boolean
    clienteNombre?: boolean
    estado?: boolean
    notificado?: boolean
    total?: boolean
    itemsCount?: boolean
    materialId?: boolean
    materialLabel?: boolean
    payload?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Pedido$userArgs<ExtArgs>
  }, ExtArgs["result"]["pedido"]>


  export type PedidoSelectScalar = {
    id?: boolean
    userId?: boolean
    clienteEmail?: boolean
    clienteNombre?: boolean
    estado?: boolean
    notificado?: boolean
    total?: boolean
    itemsCount?: boolean
    materialId?: boolean
    materialLabel?: boolean
    payload?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PedidoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Pedido$userArgs<ExtArgs>
  }

  export type $PedidoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pedido"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      clienteEmail: string | null
      clienteNombre: string | null
      estado: string
      notificado: boolean
      total: number | null
      itemsCount: number | null
      materialId: string | null
      materialLabel: string | null
      payload: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pedido"]>
    composites: {}
  }

  type PedidoGetPayload<S extends boolean | null | undefined | PedidoDefaultArgs> = $Result.GetResult<Prisma.$PedidoPayload, S>

  type PedidoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PedidoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PedidoCountAggregateInputType | true
    }

  export interface PedidoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pedido'], meta: { name: 'Pedido' } }
    /**
     * Find zero or one Pedido that matches the filter.
     * @param {PedidoFindUniqueArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PedidoFindUniqueArgs>(args: SelectSubset<T, PedidoFindUniqueArgs<ExtArgs>>): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pedido that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PedidoFindUniqueOrThrowArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PedidoFindUniqueOrThrowArgs>(args: SelectSubset<T, PedidoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pedido that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindFirstArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PedidoFindFirstArgs>(args?: SelectSubset<T, PedidoFindFirstArgs<ExtArgs>>): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pedido that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindFirstOrThrowArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PedidoFindFirstOrThrowArgs>(args?: SelectSubset<T, PedidoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pedidos
     * const pedidos = await prisma.pedido.findMany()
     * 
     * // Get first 10 Pedidos
     * const pedidos = await prisma.pedido.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pedidoWithIdOnly = await prisma.pedido.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PedidoFindManyArgs>(args?: SelectSubset<T, PedidoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pedido.
     * @param {PedidoCreateArgs} args - Arguments to create a Pedido.
     * @example
     * // Create one Pedido
     * const Pedido = await prisma.pedido.create({
     *   data: {
     *     // ... data to create a Pedido
     *   }
     * })
     * 
     */
    create<T extends PedidoCreateArgs>(args: SelectSubset<T, PedidoCreateArgs<ExtArgs>>): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Pedidos.
     * @param {PedidoCreateManyArgs} args - Arguments to create many Pedidos.
     * @example
     * // Create many Pedidos
     * const pedido = await prisma.pedido.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PedidoCreateManyArgs>(args?: SelectSubset<T, PedidoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pedido.
     * @param {PedidoDeleteArgs} args - Arguments to delete one Pedido.
     * @example
     * // Delete one Pedido
     * const Pedido = await prisma.pedido.delete({
     *   where: {
     *     // ... filter to delete one Pedido
     *   }
     * })
     * 
     */
    delete<T extends PedidoDeleteArgs>(args: SelectSubset<T, PedidoDeleteArgs<ExtArgs>>): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pedido.
     * @param {PedidoUpdateArgs} args - Arguments to update one Pedido.
     * @example
     * // Update one Pedido
     * const pedido = await prisma.pedido.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PedidoUpdateArgs>(args: SelectSubset<T, PedidoUpdateArgs<ExtArgs>>): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Pedidos.
     * @param {PedidoDeleteManyArgs} args - Arguments to filter Pedidos to delete.
     * @example
     * // Delete a few Pedidos
     * const { count } = await prisma.pedido.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PedidoDeleteManyArgs>(args?: SelectSubset<T, PedidoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pedidos
     * const pedido = await prisma.pedido.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PedidoUpdateManyArgs>(args: SelectSubset<T, PedidoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pedido.
     * @param {PedidoUpsertArgs} args - Arguments to update or create a Pedido.
     * @example
     * // Update or create a Pedido
     * const pedido = await prisma.pedido.upsert({
     *   create: {
     *     // ... data to create a Pedido
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pedido we want to update
     *   }
     * })
     */
    upsert<T extends PedidoUpsertArgs>(args: SelectSubset<T, PedidoUpsertArgs<ExtArgs>>): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoCountArgs} args - Arguments to filter Pedidos to count.
     * @example
     * // Count the number of Pedidos
     * const count = await prisma.pedido.count({
     *   where: {
     *     // ... the filter for the Pedidos we want to count
     *   }
     * })
    **/
    count<T extends PedidoCountArgs>(
      args?: Subset<T, PedidoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PedidoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PedidoAggregateArgs>(args: Subset<T, PedidoAggregateArgs>): Prisma.PrismaPromise<GetPedidoAggregateType<T>>

    /**
     * Group by Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PedidoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PedidoGroupByArgs['orderBy'] }
        : { orderBy?: PedidoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PedidoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPedidoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pedido model
   */
  readonly fields: PedidoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pedido.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PedidoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Pedido$userArgs<ExtArgs> = {}>(args?: Subset<T, Pedido$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pedido model
   */ 
  interface PedidoFieldRefs {
    readonly id: FieldRef<"Pedido", 'Int'>
    readonly userId: FieldRef<"Pedido", 'Int'>
    readonly clienteEmail: FieldRef<"Pedido", 'String'>
    readonly clienteNombre: FieldRef<"Pedido", 'String'>
    readonly estado: FieldRef<"Pedido", 'String'>
    readonly notificado: FieldRef<"Pedido", 'Boolean'>
    readonly total: FieldRef<"Pedido", 'Int'>
    readonly itemsCount: FieldRef<"Pedido", 'Int'>
    readonly materialId: FieldRef<"Pedido", 'String'>
    readonly materialLabel: FieldRef<"Pedido", 'String'>
    readonly payload: FieldRef<"Pedido", 'Json'>
    readonly createdAt: FieldRef<"Pedido", 'DateTime'>
    readonly updatedAt: FieldRef<"Pedido", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Pedido findUnique
   */
  export type PedidoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where: PedidoWhereUniqueInput
  }

  /**
   * Pedido findUniqueOrThrow
   */
  export type PedidoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where: PedidoWhereUniqueInput
  }

  /**
   * Pedido findFirst
   */
  export type PedidoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     */
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }

  /**
   * Pedido findFirstOrThrow
   */
  export type PedidoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     */
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }

  /**
   * Pedido findMany
   */
  export type PedidoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedidos to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }

  /**
   * Pedido create
   */
  export type PedidoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * The data needed to create a Pedido.
     */
    data: XOR<PedidoCreateInput, PedidoUncheckedCreateInput>
  }

  /**
   * Pedido createMany
   */
  export type PedidoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pedidos.
     */
    data: PedidoCreateManyInput | PedidoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pedido update
   */
  export type PedidoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * The data needed to update a Pedido.
     */
    data: XOR<PedidoUpdateInput, PedidoUncheckedUpdateInput>
    /**
     * Choose, which Pedido to update.
     */
    where: PedidoWhereUniqueInput
  }

  /**
   * Pedido updateMany
   */
  export type PedidoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pedidos.
     */
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyInput>
    /**
     * Filter which Pedidos to update
     */
    where?: PedidoWhereInput
  }

  /**
   * Pedido upsert
   */
  export type PedidoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * The filter to search for the Pedido to update in case it exists.
     */
    where: PedidoWhereUniqueInput
    /**
     * In case the Pedido found by the `where` argument doesn't exist, create a new Pedido with this data.
     */
    create: XOR<PedidoCreateInput, PedidoUncheckedCreateInput>
    /**
     * In case the Pedido was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PedidoUpdateInput, PedidoUncheckedUpdateInput>
  }

  /**
   * Pedido delete
   */
  export type PedidoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter which Pedido to delete.
     */
    where: PedidoWhereUniqueInput
  }

  /**
   * Pedido deleteMany
   */
  export type PedidoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pedidos to delete
     */
    where?: PedidoWhereInput
  }

  /**
   * Pedido.user
   */
  export type Pedido$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Pedido without action
   */
  export type PedidoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PedidoInclude<ExtArgs> | null
  }


  /**
   * Model Cotizacion
   */

  export type AggregateCotizacion = {
    _count: CotizacionCountAggregateOutputType | null
    _avg: CotizacionAvgAggregateOutputType | null
    _sum: CotizacionSumAggregateOutputType | null
    _min: CotizacionMinAggregateOutputType | null
    _max: CotizacionMaxAggregateOutputType | null
  }

  export type CotizacionAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    totalEstimado: Decimal | null
  }

  export type CotizacionSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    totalEstimado: Decimal | null
  }

  export type CotizacionMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    canal: string | null
    estado: string | null
    totalEstimado: Decimal | null
    createdAt: Date | null
  }

  export type CotizacionMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    canal: string | null
    estado: string | null
    totalEstimado: Decimal | null
    createdAt: Date | null
  }

  export type CotizacionCountAggregateOutputType = {
    id: number
    clienteId: number
    canal: number
    estado: number
    totalEstimado: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type CotizacionAvgAggregateInputType = {
    id?: true
    clienteId?: true
    totalEstimado?: true
  }

  export type CotizacionSumAggregateInputType = {
    id?: true
    clienteId?: true
    totalEstimado?: true
  }

  export type CotizacionMinAggregateInputType = {
    id?: true
    clienteId?: true
    canal?: true
    estado?: true
    totalEstimado?: true
    createdAt?: true
  }

  export type CotizacionMaxAggregateInputType = {
    id?: true
    clienteId?: true
    canal?: true
    estado?: true
    totalEstimado?: true
    createdAt?: true
  }

  export type CotizacionCountAggregateInputType = {
    id?: true
    clienteId?: true
    canal?: true
    estado?: true
    totalEstimado?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type CotizacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cotizacion to aggregate.
     */
    where?: CotizacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cotizacions to fetch.
     */
    orderBy?: CotizacionOrderByWithRelationInput | CotizacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CotizacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cotizacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cotizacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cotizacions
    **/
    _count?: true | CotizacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CotizacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CotizacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CotizacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CotizacionMaxAggregateInputType
  }

  export type GetCotizacionAggregateType<T extends CotizacionAggregateArgs> = {
        [P in keyof T & keyof AggregateCotizacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCotizacion[P]>
      : GetScalarType<T[P], AggregateCotizacion[P]>
  }




  export type CotizacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CotizacionWhereInput
    orderBy?: CotizacionOrderByWithAggregationInput | CotizacionOrderByWithAggregationInput[]
    by: CotizacionScalarFieldEnum[] | CotizacionScalarFieldEnum
    having?: CotizacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CotizacionCountAggregateInputType | true
    _avg?: CotizacionAvgAggregateInputType
    _sum?: CotizacionSumAggregateInputType
    _min?: CotizacionMinAggregateInputType
    _max?: CotizacionMaxAggregateInputType
  }

  export type CotizacionGroupByOutputType = {
    id: number
    clienteId: number | null
    canal: string
    estado: string
    totalEstimado: Decimal | null
    metadata: JsonValue | null
    createdAt: Date
    _count: CotizacionCountAggregateOutputType | null
    _avg: CotizacionAvgAggregateOutputType | null
    _sum: CotizacionSumAggregateOutputType | null
    _min: CotizacionMinAggregateOutputType | null
    _max: CotizacionMaxAggregateOutputType | null
  }

  type GetCotizacionGroupByPayload<T extends CotizacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CotizacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CotizacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CotizacionGroupByOutputType[P]>
            : GetScalarType<T[P], CotizacionGroupByOutputType[P]>
        }
      >
    >


  export type CotizacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    canal?: boolean
    estado?: boolean
    totalEstimado?: boolean
    metadata?: boolean
    createdAt?: boolean
    cliente?: boolean | Cotizacion$clienteArgs<ExtArgs>
    items?: boolean | Cotizacion$itemsArgs<ExtArgs>
    asignaciones?: boolean | Cotizacion$asignacionesArgs<ExtArgs>
    notificaciones?: boolean | Cotizacion$notificacionesArgs<ExtArgs>
    _count?: boolean | CotizacionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cotizacion"]>


  export type CotizacionSelectScalar = {
    id?: boolean
    clienteId?: boolean
    canal?: boolean
    estado?: boolean
    totalEstimado?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type CotizacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | Cotizacion$clienteArgs<ExtArgs>
    items?: boolean | Cotizacion$itemsArgs<ExtArgs>
    asignaciones?: boolean | Cotizacion$asignacionesArgs<ExtArgs>
    notificaciones?: boolean | Cotizacion$notificacionesArgs<ExtArgs>
    _count?: boolean | CotizacionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CotizacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cotizacion"
    objects: {
      cliente: Prisma.$UserPayload<ExtArgs> | null
      items: Prisma.$CotizacionItemPayload<ExtArgs>[]
      asignaciones: Prisma.$AsignacionPayload<ExtArgs>[]
      notificaciones: Prisma.$CotizacionNotificacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clienteId: number | null
      canal: string
      estado: string
      totalEstimado: Prisma.Decimal | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["cotizacion"]>
    composites: {}
  }

  type CotizacionGetPayload<S extends boolean | null | undefined | CotizacionDefaultArgs> = $Result.GetResult<Prisma.$CotizacionPayload, S>

  type CotizacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CotizacionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CotizacionCountAggregateInputType | true
    }

  export interface CotizacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cotizacion'], meta: { name: 'Cotizacion' } }
    /**
     * Find zero or one Cotizacion that matches the filter.
     * @param {CotizacionFindUniqueArgs} args - Arguments to find a Cotizacion
     * @example
     * // Get one Cotizacion
     * const cotizacion = await prisma.cotizacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CotizacionFindUniqueArgs>(args: SelectSubset<T, CotizacionFindUniqueArgs<ExtArgs>>): Prisma__CotizacionClient<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cotizacion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CotizacionFindUniqueOrThrowArgs} args - Arguments to find a Cotizacion
     * @example
     * // Get one Cotizacion
     * const cotizacion = await prisma.cotizacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CotizacionFindUniqueOrThrowArgs>(args: SelectSubset<T, CotizacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CotizacionClient<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cotizacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionFindFirstArgs} args - Arguments to find a Cotizacion
     * @example
     * // Get one Cotizacion
     * const cotizacion = await prisma.cotizacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CotizacionFindFirstArgs>(args?: SelectSubset<T, CotizacionFindFirstArgs<ExtArgs>>): Prisma__CotizacionClient<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cotizacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionFindFirstOrThrowArgs} args - Arguments to find a Cotizacion
     * @example
     * // Get one Cotizacion
     * const cotizacion = await prisma.cotizacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CotizacionFindFirstOrThrowArgs>(args?: SelectSubset<T, CotizacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CotizacionClient<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cotizacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cotizacions
     * const cotizacions = await prisma.cotizacion.findMany()
     * 
     * // Get first 10 Cotizacions
     * const cotizacions = await prisma.cotizacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cotizacionWithIdOnly = await prisma.cotizacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CotizacionFindManyArgs>(args?: SelectSubset<T, CotizacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cotizacion.
     * @param {CotizacionCreateArgs} args - Arguments to create a Cotizacion.
     * @example
     * // Create one Cotizacion
     * const Cotizacion = await prisma.cotizacion.create({
     *   data: {
     *     // ... data to create a Cotizacion
     *   }
     * })
     * 
     */
    create<T extends CotizacionCreateArgs>(args: SelectSubset<T, CotizacionCreateArgs<ExtArgs>>): Prisma__CotizacionClient<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cotizacions.
     * @param {CotizacionCreateManyArgs} args - Arguments to create many Cotizacions.
     * @example
     * // Create many Cotizacions
     * const cotizacion = await prisma.cotizacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CotizacionCreateManyArgs>(args?: SelectSubset<T, CotizacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cotizacion.
     * @param {CotizacionDeleteArgs} args - Arguments to delete one Cotizacion.
     * @example
     * // Delete one Cotizacion
     * const Cotizacion = await prisma.cotizacion.delete({
     *   where: {
     *     // ... filter to delete one Cotizacion
     *   }
     * })
     * 
     */
    delete<T extends CotizacionDeleteArgs>(args: SelectSubset<T, CotizacionDeleteArgs<ExtArgs>>): Prisma__CotizacionClient<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cotizacion.
     * @param {CotizacionUpdateArgs} args - Arguments to update one Cotizacion.
     * @example
     * // Update one Cotizacion
     * const cotizacion = await prisma.cotizacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CotizacionUpdateArgs>(args: SelectSubset<T, CotizacionUpdateArgs<ExtArgs>>): Prisma__CotizacionClient<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cotizacions.
     * @param {CotizacionDeleteManyArgs} args - Arguments to filter Cotizacions to delete.
     * @example
     * // Delete a few Cotizacions
     * const { count } = await prisma.cotizacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CotizacionDeleteManyArgs>(args?: SelectSubset<T, CotizacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cotizacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cotizacions
     * const cotizacion = await prisma.cotizacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CotizacionUpdateManyArgs>(args: SelectSubset<T, CotizacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cotizacion.
     * @param {CotizacionUpsertArgs} args - Arguments to update or create a Cotizacion.
     * @example
     * // Update or create a Cotizacion
     * const cotizacion = await prisma.cotizacion.upsert({
     *   create: {
     *     // ... data to create a Cotizacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cotizacion we want to update
     *   }
     * })
     */
    upsert<T extends CotizacionUpsertArgs>(args: SelectSubset<T, CotizacionUpsertArgs<ExtArgs>>): Prisma__CotizacionClient<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cotizacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionCountArgs} args - Arguments to filter Cotizacions to count.
     * @example
     * // Count the number of Cotizacions
     * const count = await prisma.cotizacion.count({
     *   where: {
     *     // ... the filter for the Cotizacions we want to count
     *   }
     * })
    **/
    count<T extends CotizacionCountArgs>(
      args?: Subset<T, CotizacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CotizacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cotizacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CotizacionAggregateArgs>(args: Subset<T, CotizacionAggregateArgs>): Prisma.PrismaPromise<GetCotizacionAggregateType<T>>

    /**
     * Group by Cotizacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CotizacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CotizacionGroupByArgs['orderBy'] }
        : { orderBy?: CotizacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CotizacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCotizacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cotizacion model
   */
  readonly fields: CotizacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cotizacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CotizacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends Cotizacion$clienteArgs<ExtArgs> = {}>(args?: Subset<T, Cotizacion$clienteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    items<T extends Cotizacion$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Cotizacion$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CotizacionItemPayload<ExtArgs>, T, "findMany"> | Null>
    asignaciones<T extends Cotizacion$asignacionesArgs<ExtArgs> = {}>(args?: Subset<T, Cotizacion$asignacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findMany"> | Null>
    notificaciones<T extends Cotizacion$notificacionesArgs<ExtArgs> = {}>(args?: Subset<T, Cotizacion$notificacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CotizacionNotificacionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cotizacion model
   */ 
  interface CotizacionFieldRefs {
    readonly id: FieldRef<"Cotizacion", 'Int'>
    readonly clienteId: FieldRef<"Cotizacion", 'Int'>
    readonly canal: FieldRef<"Cotizacion", 'String'>
    readonly estado: FieldRef<"Cotizacion", 'String'>
    readonly totalEstimado: FieldRef<"Cotizacion", 'Decimal'>
    readonly metadata: FieldRef<"Cotizacion", 'Json'>
    readonly createdAt: FieldRef<"Cotizacion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Cotizacion findUnique
   */
  export type CotizacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotizacion
     */
    select?: CotizacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionInclude<ExtArgs> | null
    /**
     * Filter, which Cotizacion to fetch.
     */
    where: CotizacionWhereUniqueInput
  }

  /**
   * Cotizacion findUniqueOrThrow
   */
  export type CotizacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotizacion
     */
    select?: CotizacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionInclude<ExtArgs> | null
    /**
     * Filter, which Cotizacion to fetch.
     */
    where: CotizacionWhereUniqueInput
  }

  /**
   * Cotizacion findFirst
   */
  export type CotizacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotizacion
     */
    select?: CotizacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionInclude<ExtArgs> | null
    /**
     * Filter, which Cotizacion to fetch.
     */
    where?: CotizacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cotizacions to fetch.
     */
    orderBy?: CotizacionOrderByWithRelationInput | CotizacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cotizacions.
     */
    cursor?: CotizacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cotizacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cotizacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cotizacions.
     */
    distinct?: CotizacionScalarFieldEnum | CotizacionScalarFieldEnum[]
  }

  /**
   * Cotizacion findFirstOrThrow
   */
  export type CotizacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotizacion
     */
    select?: CotizacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionInclude<ExtArgs> | null
    /**
     * Filter, which Cotizacion to fetch.
     */
    where?: CotizacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cotizacions to fetch.
     */
    orderBy?: CotizacionOrderByWithRelationInput | CotizacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cotizacions.
     */
    cursor?: CotizacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cotizacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cotizacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cotizacions.
     */
    distinct?: CotizacionScalarFieldEnum | CotizacionScalarFieldEnum[]
  }

  /**
   * Cotizacion findMany
   */
  export type CotizacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotizacion
     */
    select?: CotizacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionInclude<ExtArgs> | null
    /**
     * Filter, which Cotizacions to fetch.
     */
    where?: CotizacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cotizacions to fetch.
     */
    orderBy?: CotizacionOrderByWithRelationInput | CotizacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cotizacions.
     */
    cursor?: CotizacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cotizacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cotizacions.
     */
    skip?: number
    distinct?: CotizacionScalarFieldEnum | CotizacionScalarFieldEnum[]
  }

  /**
   * Cotizacion create
   */
  export type CotizacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotizacion
     */
    select?: CotizacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionInclude<ExtArgs> | null
    /**
     * The data needed to create a Cotizacion.
     */
    data: XOR<CotizacionCreateInput, CotizacionUncheckedCreateInput>
  }

  /**
   * Cotizacion createMany
   */
  export type CotizacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cotizacions.
     */
    data: CotizacionCreateManyInput | CotizacionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cotizacion update
   */
  export type CotizacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotizacion
     */
    select?: CotizacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionInclude<ExtArgs> | null
    /**
     * The data needed to update a Cotizacion.
     */
    data: XOR<CotizacionUpdateInput, CotizacionUncheckedUpdateInput>
    /**
     * Choose, which Cotizacion to update.
     */
    where: CotizacionWhereUniqueInput
  }

  /**
   * Cotizacion updateMany
   */
  export type CotizacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cotizacions.
     */
    data: XOR<CotizacionUpdateManyMutationInput, CotizacionUncheckedUpdateManyInput>
    /**
     * Filter which Cotizacions to update
     */
    where?: CotizacionWhereInput
  }

  /**
   * Cotizacion upsert
   */
  export type CotizacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotizacion
     */
    select?: CotizacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionInclude<ExtArgs> | null
    /**
     * The filter to search for the Cotizacion to update in case it exists.
     */
    where: CotizacionWhereUniqueInput
    /**
     * In case the Cotizacion found by the `where` argument doesn't exist, create a new Cotizacion with this data.
     */
    create: XOR<CotizacionCreateInput, CotizacionUncheckedCreateInput>
    /**
     * In case the Cotizacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CotizacionUpdateInput, CotizacionUncheckedUpdateInput>
  }

  /**
   * Cotizacion delete
   */
  export type CotizacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotizacion
     */
    select?: CotizacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionInclude<ExtArgs> | null
    /**
     * Filter which Cotizacion to delete.
     */
    where: CotizacionWhereUniqueInput
  }

  /**
   * Cotizacion deleteMany
   */
  export type CotizacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cotizacions to delete
     */
    where?: CotizacionWhereInput
  }

  /**
   * Cotizacion.cliente
   */
  export type Cotizacion$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Cotizacion.items
   */
  export type Cotizacion$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionItem
     */
    select?: CotizacionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionItemInclude<ExtArgs> | null
    where?: CotizacionItemWhereInput
    orderBy?: CotizacionItemOrderByWithRelationInput | CotizacionItemOrderByWithRelationInput[]
    cursor?: CotizacionItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CotizacionItemScalarFieldEnum | CotizacionItemScalarFieldEnum[]
  }

  /**
   * Cotizacion.asignaciones
   */
  export type Cotizacion$asignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    where?: AsignacionWhereInput
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    cursor?: AsignacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * Cotizacion.notificaciones
   */
  export type Cotizacion$notificacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionNotificacion
     */
    select?: CotizacionNotificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionNotificacionInclude<ExtArgs> | null
    where?: CotizacionNotificacionWhereInput
    orderBy?: CotizacionNotificacionOrderByWithRelationInput | CotizacionNotificacionOrderByWithRelationInput[]
    cursor?: CotizacionNotificacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CotizacionNotificacionScalarFieldEnum | CotizacionNotificacionScalarFieldEnum[]
  }

  /**
   * Cotizacion without action
   */
  export type CotizacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotizacion
     */
    select?: CotizacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionInclude<ExtArgs> | null
  }


  /**
   * Model CotizacionItem
   */

  export type AggregateCotizacionItem = {
    _count: CotizacionItemCountAggregateOutputType | null
    _avg: CotizacionItemAvgAggregateOutputType | null
    _sum: CotizacionItemSumAggregateOutputType | null
    _min: CotizacionItemMinAggregateOutputType | null
    _max: CotizacionItemMaxAggregateOutputType | null
  }

  export type CotizacionItemAvgAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
    cantidad: number | null
    coberturaInk: Decimal | null
  }

  export type CotizacionItemSumAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
    cantidad: number | null
    coberturaInk: Decimal | null
  }

  export type CotizacionItemMinAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
    producto: string | null
    cantidad: number | null
    notas: string | null
    coberturaInk: Decimal | null
    createdAt: Date | null
  }

  export type CotizacionItemMaxAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
    producto: string | null
    cantidad: number | null
    notas: string | null
    coberturaInk: Decimal | null
    createdAt: Date | null
  }

  export type CotizacionItemCountAggregateOutputType = {
    id: number
    cotizacionId: number
    producto: number
    variantes: number
    cantidad: number
    notas: number
    archivos: number
    coberturaInk: number
    createdAt: number
    _all: number
  }


  export type CotizacionItemAvgAggregateInputType = {
    id?: true
    cotizacionId?: true
    cantidad?: true
    coberturaInk?: true
  }

  export type CotizacionItemSumAggregateInputType = {
    id?: true
    cotizacionId?: true
    cantidad?: true
    coberturaInk?: true
  }

  export type CotizacionItemMinAggregateInputType = {
    id?: true
    cotizacionId?: true
    producto?: true
    cantidad?: true
    notas?: true
    coberturaInk?: true
    createdAt?: true
  }

  export type CotizacionItemMaxAggregateInputType = {
    id?: true
    cotizacionId?: true
    producto?: true
    cantidad?: true
    notas?: true
    coberturaInk?: true
    createdAt?: true
  }

  export type CotizacionItemCountAggregateInputType = {
    id?: true
    cotizacionId?: true
    producto?: true
    variantes?: true
    cantidad?: true
    notas?: true
    archivos?: true
    coberturaInk?: true
    createdAt?: true
    _all?: true
  }

  export type CotizacionItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CotizacionItem to aggregate.
     */
    where?: CotizacionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CotizacionItems to fetch.
     */
    orderBy?: CotizacionItemOrderByWithRelationInput | CotizacionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CotizacionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CotizacionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CotizacionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CotizacionItems
    **/
    _count?: true | CotizacionItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CotizacionItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CotizacionItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CotizacionItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CotizacionItemMaxAggregateInputType
  }

  export type GetCotizacionItemAggregateType<T extends CotizacionItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCotizacionItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCotizacionItem[P]>
      : GetScalarType<T[P], AggregateCotizacionItem[P]>
  }




  export type CotizacionItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CotizacionItemWhereInput
    orderBy?: CotizacionItemOrderByWithAggregationInput | CotizacionItemOrderByWithAggregationInput[]
    by: CotizacionItemScalarFieldEnum[] | CotizacionItemScalarFieldEnum
    having?: CotizacionItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CotizacionItemCountAggregateInputType | true
    _avg?: CotizacionItemAvgAggregateInputType
    _sum?: CotizacionItemSumAggregateInputType
    _min?: CotizacionItemMinAggregateInputType
    _max?: CotizacionItemMaxAggregateInputType
  }

  export type CotizacionItemGroupByOutputType = {
    id: number
    cotizacionId: number
    producto: string
    variantes: JsonValue | null
    cantidad: number
    notas: string | null
    archivos: JsonValue | null
    coberturaInk: Decimal | null
    createdAt: Date
    _count: CotizacionItemCountAggregateOutputType | null
    _avg: CotizacionItemAvgAggregateOutputType | null
    _sum: CotizacionItemSumAggregateOutputType | null
    _min: CotizacionItemMinAggregateOutputType | null
    _max: CotizacionItemMaxAggregateOutputType | null
  }

  type GetCotizacionItemGroupByPayload<T extends CotizacionItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CotizacionItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CotizacionItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CotizacionItemGroupByOutputType[P]>
            : GetScalarType<T[P], CotizacionItemGroupByOutputType[P]>
        }
      >
    >


  export type CotizacionItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cotizacionId?: boolean
    producto?: boolean
    variantes?: boolean
    cantidad?: boolean
    notas?: boolean
    archivos?: boolean
    coberturaInk?: boolean
    createdAt?: boolean
    cotizacion?: boolean | CotizacionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cotizacionItem"]>


  export type CotizacionItemSelectScalar = {
    id?: boolean
    cotizacionId?: boolean
    producto?: boolean
    variantes?: boolean
    cantidad?: boolean
    notas?: boolean
    archivos?: boolean
    coberturaInk?: boolean
    createdAt?: boolean
  }

  export type CotizacionItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cotizacion?: boolean | CotizacionDefaultArgs<ExtArgs>
  }

  export type $CotizacionItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CotizacionItem"
    objects: {
      cotizacion: Prisma.$CotizacionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cotizacionId: number
      producto: string
      variantes: Prisma.JsonValue | null
      cantidad: number
      notas: string | null
      archivos: Prisma.JsonValue | null
      coberturaInk: Prisma.Decimal | null
      createdAt: Date
    }, ExtArgs["result"]["cotizacionItem"]>
    composites: {}
  }

  type CotizacionItemGetPayload<S extends boolean | null | undefined | CotizacionItemDefaultArgs> = $Result.GetResult<Prisma.$CotizacionItemPayload, S>

  type CotizacionItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CotizacionItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CotizacionItemCountAggregateInputType | true
    }

  export interface CotizacionItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CotizacionItem'], meta: { name: 'CotizacionItem' } }
    /**
     * Find zero or one CotizacionItem that matches the filter.
     * @param {CotizacionItemFindUniqueArgs} args - Arguments to find a CotizacionItem
     * @example
     * // Get one CotizacionItem
     * const cotizacionItem = await prisma.cotizacionItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CotizacionItemFindUniqueArgs>(args: SelectSubset<T, CotizacionItemFindUniqueArgs<ExtArgs>>): Prisma__CotizacionItemClient<$Result.GetResult<Prisma.$CotizacionItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CotizacionItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CotizacionItemFindUniqueOrThrowArgs} args - Arguments to find a CotizacionItem
     * @example
     * // Get one CotizacionItem
     * const cotizacionItem = await prisma.cotizacionItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CotizacionItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CotizacionItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CotizacionItemClient<$Result.GetResult<Prisma.$CotizacionItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CotizacionItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionItemFindFirstArgs} args - Arguments to find a CotizacionItem
     * @example
     * // Get one CotizacionItem
     * const cotizacionItem = await prisma.cotizacionItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CotizacionItemFindFirstArgs>(args?: SelectSubset<T, CotizacionItemFindFirstArgs<ExtArgs>>): Prisma__CotizacionItemClient<$Result.GetResult<Prisma.$CotizacionItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CotizacionItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionItemFindFirstOrThrowArgs} args - Arguments to find a CotizacionItem
     * @example
     * // Get one CotizacionItem
     * const cotizacionItem = await prisma.cotizacionItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CotizacionItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CotizacionItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CotizacionItemClient<$Result.GetResult<Prisma.$CotizacionItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CotizacionItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CotizacionItems
     * const cotizacionItems = await prisma.cotizacionItem.findMany()
     * 
     * // Get first 10 CotizacionItems
     * const cotizacionItems = await prisma.cotizacionItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cotizacionItemWithIdOnly = await prisma.cotizacionItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CotizacionItemFindManyArgs>(args?: SelectSubset<T, CotizacionItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CotizacionItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CotizacionItem.
     * @param {CotizacionItemCreateArgs} args - Arguments to create a CotizacionItem.
     * @example
     * // Create one CotizacionItem
     * const CotizacionItem = await prisma.cotizacionItem.create({
     *   data: {
     *     // ... data to create a CotizacionItem
     *   }
     * })
     * 
     */
    create<T extends CotizacionItemCreateArgs>(args: SelectSubset<T, CotizacionItemCreateArgs<ExtArgs>>): Prisma__CotizacionItemClient<$Result.GetResult<Prisma.$CotizacionItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CotizacionItems.
     * @param {CotizacionItemCreateManyArgs} args - Arguments to create many CotizacionItems.
     * @example
     * // Create many CotizacionItems
     * const cotizacionItem = await prisma.cotizacionItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CotizacionItemCreateManyArgs>(args?: SelectSubset<T, CotizacionItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CotizacionItem.
     * @param {CotizacionItemDeleteArgs} args - Arguments to delete one CotizacionItem.
     * @example
     * // Delete one CotizacionItem
     * const CotizacionItem = await prisma.cotizacionItem.delete({
     *   where: {
     *     // ... filter to delete one CotizacionItem
     *   }
     * })
     * 
     */
    delete<T extends CotizacionItemDeleteArgs>(args: SelectSubset<T, CotizacionItemDeleteArgs<ExtArgs>>): Prisma__CotizacionItemClient<$Result.GetResult<Prisma.$CotizacionItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CotizacionItem.
     * @param {CotizacionItemUpdateArgs} args - Arguments to update one CotizacionItem.
     * @example
     * // Update one CotizacionItem
     * const cotizacionItem = await prisma.cotizacionItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CotizacionItemUpdateArgs>(args: SelectSubset<T, CotizacionItemUpdateArgs<ExtArgs>>): Prisma__CotizacionItemClient<$Result.GetResult<Prisma.$CotizacionItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CotizacionItems.
     * @param {CotizacionItemDeleteManyArgs} args - Arguments to filter CotizacionItems to delete.
     * @example
     * // Delete a few CotizacionItems
     * const { count } = await prisma.cotizacionItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CotizacionItemDeleteManyArgs>(args?: SelectSubset<T, CotizacionItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CotizacionItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CotizacionItems
     * const cotizacionItem = await prisma.cotizacionItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CotizacionItemUpdateManyArgs>(args: SelectSubset<T, CotizacionItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CotizacionItem.
     * @param {CotizacionItemUpsertArgs} args - Arguments to update or create a CotizacionItem.
     * @example
     * // Update or create a CotizacionItem
     * const cotizacionItem = await prisma.cotizacionItem.upsert({
     *   create: {
     *     // ... data to create a CotizacionItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CotizacionItem we want to update
     *   }
     * })
     */
    upsert<T extends CotizacionItemUpsertArgs>(args: SelectSubset<T, CotizacionItemUpsertArgs<ExtArgs>>): Prisma__CotizacionItemClient<$Result.GetResult<Prisma.$CotizacionItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CotizacionItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionItemCountArgs} args - Arguments to filter CotizacionItems to count.
     * @example
     * // Count the number of CotizacionItems
     * const count = await prisma.cotizacionItem.count({
     *   where: {
     *     // ... the filter for the CotizacionItems we want to count
     *   }
     * })
    **/
    count<T extends CotizacionItemCountArgs>(
      args?: Subset<T, CotizacionItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CotizacionItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CotizacionItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CotizacionItemAggregateArgs>(args: Subset<T, CotizacionItemAggregateArgs>): Prisma.PrismaPromise<GetCotizacionItemAggregateType<T>>

    /**
     * Group by CotizacionItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CotizacionItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CotizacionItemGroupByArgs['orderBy'] }
        : { orderBy?: CotizacionItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CotizacionItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCotizacionItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CotizacionItem model
   */
  readonly fields: CotizacionItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CotizacionItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CotizacionItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cotizacion<T extends CotizacionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CotizacionDefaultArgs<ExtArgs>>): Prisma__CotizacionClient<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CotizacionItem model
   */ 
  interface CotizacionItemFieldRefs {
    readonly id: FieldRef<"CotizacionItem", 'Int'>
    readonly cotizacionId: FieldRef<"CotizacionItem", 'Int'>
    readonly producto: FieldRef<"CotizacionItem", 'String'>
    readonly variantes: FieldRef<"CotizacionItem", 'Json'>
    readonly cantidad: FieldRef<"CotizacionItem", 'Int'>
    readonly notas: FieldRef<"CotizacionItem", 'String'>
    readonly archivos: FieldRef<"CotizacionItem", 'Json'>
    readonly coberturaInk: FieldRef<"CotizacionItem", 'Decimal'>
    readonly createdAt: FieldRef<"CotizacionItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CotizacionItem findUnique
   */
  export type CotizacionItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionItem
     */
    select?: CotizacionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionItemInclude<ExtArgs> | null
    /**
     * Filter, which CotizacionItem to fetch.
     */
    where: CotizacionItemWhereUniqueInput
  }

  /**
   * CotizacionItem findUniqueOrThrow
   */
  export type CotizacionItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionItem
     */
    select?: CotizacionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionItemInclude<ExtArgs> | null
    /**
     * Filter, which CotizacionItem to fetch.
     */
    where: CotizacionItemWhereUniqueInput
  }

  /**
   * CotizacionItem findFirst
   */
  export type CotizacionItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionItem
     */
    select?: CotizacionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionItemInclude<ExtArgs> | null
    /**
     * Filter, which CotizacionItem to fetch.
     */
    where?: CotizacionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CotizacionItems to fetch.
     */
    orderBy?: CotizacionItemOrderByWithRelationInput | CotizacionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CotizacionItems.
     */
    cursor?: CotizacionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CotizacionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CotizacionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CotizacionItems.
     */
    distinct?: CotizacionItemScalarFieldEnum | CotizacionItemScalarFieldEnum[]
  }

  /**
   * CotizacionItem findFirstOrThrow
   */
  export type CotizacionItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionItem
     */
    select?: CotizacionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionItemInclude<ExtArgs> | null
    /**
     * Filter, which CotizacionItem to fetch.
     */
    where?: CotizacionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CotizacionItems to fetch.
     */
    orderBy?: CotizacionItemOrderByWithRelationInput | CotizacionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CotizacionItems.
     */
    cursor?: CotizacionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CotizacionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CotizacionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CotizacionItems.
     */
    distinct?: CotizacionItemScalarFieldEnum | CotizacionItemScalarFieldEnum[]
  }

  /**
   * CotizacionItem findMany
   */
  export type CotizacionItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionItem
     */
    select?: CotizacionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionItemInclude<ExtArgs> | null
    /**
     * Filter, which CotizacionItems to fetch.
     */
    where?: CotizacionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CotizacionItems to fetch.
     */
    orderBy?: CotizacionItemOrderByWithRelationInput | CotizacionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CotizacionItems.
     */
    cursor?: CotizacionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CotizacionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CotizacionItems.
     */
    skip?: number
    distinct?: CotizacionItemScalarFieldEnum | CotizacionItemScalarFieldEnum[]
  }

  /**
   * CotizacionItem create
   */
  export type CotizacionItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionItem
     */
    select?: CotizacionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CotizacionItem.
     */
    data: XOR<CotizacionItemCreateInput, CotizacionItemUncheckedCreateInput>
  }

  /**
   * CotizacionItem createMany
   */
  export type CotizacionItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CotizacionItems.
     */
    data: CotizacionItemCreateManyInput | CotizacionItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CotizacionItem update
   */
  export type CotizacionItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionItem
     */
    select?: CotizacionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CotizacionItem.
     */
    data: XOR<CotizacionItemUpdateInput, CotizacionItemUncheckedUpdateInput>
    /**
     * Choose, which CotizacionItem to update.
     */
    where: CotizacionItemWhereUniqueInput
  }

  /**
   * CotizacionItem updateMany
   */
  export type CotizacionItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CotizacionItems.
     */
    data: XOR<CotizacionItemUpdateManyMutationInput, CotizacionItemUncheckedUpdateManyInput>
    /**
     * Filter which CotizacionItems to update
     */
    where?: CotizacionItemWhereInput
  }

  /**
   * CotizacionItem upsert
   */
  export type CotizacionItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionItem
     */
    select?: CotizacionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CotizacionItem to update in case it exists.
     */
    where: CotizacionItemWhereUniqueInput
    /**
     * In case the CotizacionItem found by the `where` argument doesn't exist, create a new CotizacionItem with this data.
     */
    create: XOR<CotizacionItemCreateInput, CotizacionItemUncheckedCreateInput>
    /**
     * In case the CotizacionItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CotizacionItemUpdateInput, CotizacionItemUncheckedUpdateInput>
  }

  /**
   * CotizacionItem delete
   */
  export type CotizacionItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionItem
     */
    select?: CotizacionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionItemInclude<ExtArgs> | null
    /**
     * Filter which CotizacionItem to delete.
     */
    where: CotizacionItemWhereUniqueInput
  }

  /**
   * CotizacionItem deleteMany
   */
  export type CotizacionItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CotizacionItems to delete
     */
    where?: CotizacionItemWhereInput
  }

  /**
   * CotizacionItem without action
   */
  export type CotizacionItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionItem
     */
    select?: CotizacionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionItemInclude<ExtArgs> | null
  }


  /**
   * Model Asignacion
   */

  export type AggregateAsignacion = {
    _count: AsignacionCountAggregateOutputType | null
    _avg: AsignacionAvgAggregateOutputType | null
    _sum: AsignacionSumAggregateOutputType | null
    _min: AsignacionMinAggregateOutputType | null
    _max: AsignacionMaxAggregateOutputType | null
  }

  export type AsignacionAvgAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
    operadorId: number | null
    slaMinutos: number | null
  }

  export type AsignacionSumAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
    operadorId: number | null
    slaMinutos: number | null
  }

  export type AsignacionMinAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
    operadorId: number | null
    estado: string | null
    slaMinutos: number | null
    vencimiento: Date | null
    createdAt: Date | null
    aceptadoEn: Date | null
    resueltoEn: Date | null
  }

  export type AsignacionMaxAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
    operadorId: number | null
    estado: string | null
    slaMinutos: number | null
    vencimiento: Date | null
    createdAt: Date | null
    aceptadoEn: Date | null
    resueltoEn: Date | null
  }

  export type AsignacionCountAggregateOutputType = {
    id: number
    cotizacionId: number
    operadorId: number
    estado: number
    slaMinutos: number
    vencimiento: number
    createdAt: number
    aceptadoEn: number
    resueltoEn: number
    _all: number
  }


  export type AsignacionAvgAggregateInputType = {
    id?: true
    cotizacionId?: true
    operadorId?: true
    slaMinutos?: true
  }

  export type AsignacionSumAggregateInputType = {
    id?: true
    cotizacionId?: true
    operadorId?: true
    slaMinutos?: true
  }

  export type AsignacionMinAggregateInputType = {
    id?: true
    cotizacionId?: true
    operadorId?: true
    estado?: true
    slaMinutos?: true
    vencimiento?: true
    createdAt?: true
    aceptadoEn?: true
    resueltoEn?: true
  }

  export type AsignacionMaxAggregateInputType = {
    id?: true
    cotizacionId?: true
    operadorId?: true
    estado?: true
    slaMinutos?: true
    vencimiento?: true
    createdAt?: true
    aceptadoEn?: true
    resueltoEn?: true
  }

  export type AsignacionCountAggregateInputType = {
    id?: true
    cotizacionId?: true
    operadorId?: true
    estado?: true
    slaMinutos?: true
    vencimiento?: true
    createdAt?: true
    aceptadoEn?: true
    resueltoEn?: true
    _all?: true
  }

  export type AsignacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asignacion to aggregate.
     */
    where?: AsignacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asignacions to fetch.
     */
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AsignacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asignacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asignacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Asignacions
    **/
    _count?: true | AsignacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AsignacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AsignacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AsignacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AsignacionMaxAggregateInputType
  }

  export type GetAsignacionAggregateType<T extends AsignacionAggregateArgs> = {
        [P in keyof T & keyof AggregateAsignacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsignacion[P]>
      : GetScalarType<T[P], AggregateAsignacion[P]>
  }




  export type AsignacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsignacionWhereInput
    orderBy?: AsignacionOrderByWithAggregationInput | AsignacionOrderByWithAggregationInput[]
    by: AsignacionScalarFieldEnum[] | AsignacionScalarFieldEnum
    having?: AsignacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AsignacionCountAggregateInputType | true
    _avg?: AsignacionAvgAggregateInputType
    _sum?: AsignacionSumAggregateInputType
    _min?: AsignacionMinAggregateInputType
    _max?: AsignacionMaxAggregateInputType
  }

  export type AsignacionGroupByOutputType = {
    id: number
    cotizacionId: number
    operadorId: number | null
    estado: string
    slaMinutos: number
    vencimiento: Date
    createdAt: Date
    aceptadoEn: Date | null
    resueltoEn: Date | null
    _count: AsignacionCountAggregateOutputType | null
    _avg: AsignacionAvgAggregateOutputType | null
    _sum: AsignacionSumAggregateOutputType | null
    _min: AsignacionMinAggregateOutputType | null
    _max: AsignacionMaxAggregateOutputType | null
  }

  type GetAsignacionGroupByPayload<T extends AsignacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AsignacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AsignacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AsignacionGroupByOutputType[P]>
            : GetScalarType<T[P], AsignacionGroupByOutputType[P]>
        }
      >
    >


  export type AsignacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cotizacionId?: boolean
    operadorId?: boolean
    estado?: boolean
    slaMinutos?: boolean
    vencimiento?: boolean
    createdAt?: boolean
    aceptadoEn?: boolean
    resueltoEn?: boolean
    cotizacion?: boolean | CotizacionDefaultArgs<ExtArgs>
    operador?: boolean | Asignacion$operadorArgs<ExtArgs>
  }, ExtArgs["result"]["asignacion"]>


  export type AsignacionSelectScalar = {
    id?: boolean
    cotizacionId?: boolean
    operadorId?: boolean
    estado?: boolean
    slaMinutos?: boolean
    vencimiento?: boolean
    createdAt?: boolean
    aceptadoEn?: boolean
    resueltoEn?: boolean
  }

  export type AsignacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cotizacion?: boolean | CotizacionDefaultArgs<ExtArgs>
    operador?: boolean | Asignacion$operadorArgs<ExtArgs>
  }

  export type $AsignacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Asignacion"
    objects: {
      cotizacion: Prisma.$CotizacionPayload<ExtArgs>
      operador: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cotizacionId: number
      operadorId: number | null
      estado: string
      slaMinutos: number
      vencimiento: Date
      createdAt: Date
      aceptadoEn: Date | null
      resueltoEn: Date | null
    }, ExtArgs["result"]["asignacion"]>
    composites: {}
  }

  type AsignacionGetPayload<S extends boolean | null | undefined | AsignacionDefaultArgs> = $Result.GetResult<Prisma.$AsignacionPayload, S>

  type AsignacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AsignacionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AsignacionCountAggregateInputType | true
    }

  export interface AsignacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asignacion'], meta: { name: 'Asignacion' } }
    /**
     * Find zero or one Asignacion that matches the filter.
     * @param {AsignacionFindUniqueArgs} args - Arguments to find a Asignacion
     * @example
     * // Get one Asignacion
     * const asignacion = await prisma.asignacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AsignacionFindUniqueArgs>(args: SelectSubset<T, AsignacionFindUniqueArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Asignacion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AsignacionFindUniqueOrThrowArgs} args - Arguments to find a Asignacion
     * @example
     * // Get one Asignacion
     * const asignacion = await prisma.asignacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AsignacionFindUniqueOrThrowArgs>(args: SelectSubset<T, AsignacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Asignacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionFindFirstArgs} args - Arguments to find a Asignacion
     * @example
     * // Get one Asignacion
     * const asignacion = await prisma.asignacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AsignacionFindFirstArgs>(args?: SelectSubset<T, AsignacionFindFirstArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Asignacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionFindFirstOrThrowArgs} args - Arguments to find a Asignacion
     * @example
     * // Get one Asignacion
     * const asignacion = await prisma.asignacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AsignacionFindFirstOrThrowArgs>(args?: SelectSubset<T, AsignacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Asignacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Asignacions
     * const asignacions = await prisma.asignacion.findMany()
     * 
     * // Get first 10 Asignacions
     * const asignacions = await prisma.asignacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const asignacionWithIdOnly = await prisma.asignacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AsignacionFindManyArgs>(args?: SelectSubset<T, AsignacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Asignacion.
     * @param {AsignacionCreateArgs} args - Arguments to create a Asignacion.
     * @example
     * // Create one Asignacion
     * const Asignacion = await prisma.asignacion.create({
     *   data: {
     *     // ... data to create a Asignacion
     *   }
     * })
     * 
     */
    create<T extends AsignacionCreateArgs>(args: SelectSubset<T, AsignacionCreateArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Asignacions.
     * @param {AsignacionCreateManyArgs} args - Arguments to create many Asignacions.
     * @example
     * // Create many Asignacions
     * const asignacion = await prisma.asignacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AsignacionCreateManyArgs>(args?: SelectSubset<T, AsignacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Asignacion.
     * @param {AsignacionDeleteArgs} args - Arguments to delete one Asignacion.
     * @example
     * // Delete one Asignacion
     * const Asignacion = await prisma.asignacion.delete({
     *   where: {
     *     // ... filter to delete one Asignacion
     *   }
     * })
     * 
     */
    delete<T extends AsignacionDeleteArgs>(args: SelectSubset<T, AsignacionDeleteArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Asignacion.
     * @param {AsignacionUpdateArgs} args - Arguments to update one Asignacion.
     * @example
     * // Update one Asignacion
     * const asignacion = await prisma.asignacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AsignacionUpdateArgs>(args: SelectSubset<T, AsignacionUpdateArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Asignacions.
     * @param {AsignacionDeleteManyArgs} args - Arguments to filter Asignacions to delete.
     * @example
     * // Delete a few Asignacions
     * const { count } = await prisma.asignacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AsignacionDeleteManyArgs>(args?: SelectSubset<T, AsignacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Asignacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Asignacions
     * const asignacion = await prisma.asignacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AsignacionUpdateManyArgs>(args: SelectSubset<T, AsignacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Asignacion.
     * @param {AsignacionUpsertArgs} args - Arguments to update or create a Asignacion.
     * @example
     * // Update or create a Asignacion
     * const asignacion = await prisma.asignacion.upsert({
     *   create: {
     *     // ... data to create a Asignacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asignacion we want to update
     *   }
     * })
     */
    upsert<T extends AsignacionUpsertArgs>(args: SelectSubset<T, AsignacionUpsertArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Asignacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionCountArgs} args - Arguments to filter Asignacions to count.
     * @example
     * // Count the number of Asignacions
     * const count = await prisma.asignacion.count({
     *   where: {
     *     // ... the filter for the Asignacions we want to count
     *   }
     * })
    **/
    count<T extends AsignacionCountArgs>(
      args?: Subset<T, AsignacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AsignacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asignacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AsignacionAggregateArgs>(args: Subset<T, AsignacionAggregateArgs>): Prisma.PrismaPromise<GetAsignacionAggregateType<T>>

    /**
     * Group by Asignacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AsignacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AsignacionGroupByArgs['orderBy'] }
        : { orderBy?: AsignacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AsignacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAsignacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Asignacion model
   */
  readonly fields: AsignacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Asignacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AsignacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cotizacion<T extends CotizacionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CotizacionDefaultArgs<ExtArgs>>): Prisma__CotizacionClient<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    operador<T extends Asignacion$operadorArgs<ExtArgs> = {}>(args?: Subset<T, Asignacion$operadorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Asignacion model
   */ 
  interface AsignacionFieldRefs {
    readonly id: FieldRef<"Asignacion", 'Int'>
    readonly cotizacionId: FieldRef<"Asignacion", 'Int'>
    readonly operadorId: FieldRef<"Asignacion", 'Int'>
    readonly estado: FieldRef<"Asignacion", 'String'>
    readonly slaMinutos: FieldRef<"Asignacion", 'Int'>
    readonly vencimiento: FieldRef<"Asignacion", 'DateTime'>
    readonly createdAt: FieldRef<"Asignacion", 'DateTime'>
    readonly aceptadoEn: FieldRef<"Asignacion", 'DateTime'>
    readonly resueltoEn: FieldRef<"Asignacion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Asignacion findUnique
   */
  export type AsignacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter, which Asignacion to fetch.
     */
    where: AsignacionWhereUniqueInput
  }

  /**
   * Asignacion findUniqueOrThrow
   */
  export type AsignacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter, which Asignacion to fetch.
     */
    where: AsignacionWhereUniqueInput
  }

  /**
   * Asignacion findFirst
   */
  export type AsignacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter, which Asignacion to fetch.
     */
    where?: AsignacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asignacions to fetch.
     */
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Asignacions.
     */
    cursor?: AsignacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asignacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asignacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Asignacions.
     */
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * Asignacion findFirstOrThrow
   */
  export type AsignacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter, which Asignacion to fetch.
     */
    where?: AsignacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asignacions to fetch.
     */
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Asignacions.
     */
    cursor?: AsignacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asignacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asignacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Asignacions.
     */
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * Asignacion findMany
   */
  export type AsignacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter, which Asignacions to fetch.
     */
    where?: AsignacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asignacions to fetch.
     */
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Asignacions.
     */
    cursor?: AsignacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asignacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asignacions.
     */
    skip?: number
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * Asignacion create
   */
  export type AsignacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * The data needed to create a Asignacion.
     */
    data: XOR<AsignacionCreateInput, AsignacionUncheckedCreateInput>
  }

  /**
   * Asignacion createMany
   */
  export type AsignacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Asignacions.
     */
    data: AsignacionCreateManyInput | AsignacionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Asignacion update
   */
  export type AsignacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * The data needed to update a Asignacion.
     */
    data: XOR<AsignacionUpdateInput, AsignacionUncheckedUpdateInput>
    /**
     * Choose, which Asignacion to update.
     */
    where: AsignacionWhereUniqueInput
  }

  /**
   * Asignacion updateMany
   */
  export type AsignacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Asignacions.
     */
    data: XOR<AsignacionUpdateManyMutationInput, AsignacionUncheckedUpdateManyInput>
    /**
     * Filter which Asignacions to update
     */
    where?: AsignacionWhereInput
  }

  /**
   * Asignacion upsert
   */
  export type AsignacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * The filter to search for the Asignacion to update in case it exists.
     */
    where: AsignacionWhereUniqueInput
    /**
     * In case the Asignacion found by the `where` argument doesn't exist, create a new Asignacion with this data.
     */
    create: XOR<AsignacionCreateInput, AsignacionUncheckedCreateInput>
    /**
     * In case the Asignacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AsignacionUpdateInput, AsignacionUncheckedUpdateInput>
  }

  /**
   * Asignacion delete
   */
  export type AsignacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter which Asignacion to delete.
     */
    where: AsignacionWhereUniqueInput
  }

  /**
   * Asignacion deleteMany
   */
  export type AsignacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asignacions to delete
     */
    where?: AsignacionWhereInput
  }

  /**
   * Asignacion.operador
   */
  export type Asignacion$operadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Asignacion without action
   */
  export type AsignacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
  }


  /**
   * Model CotizacionNotificacion
   */

  export type AggregateCotizacionNotificacion = {
    _count: CotizacionNotificacionCountAggregateOutputType | null
    _avg: CotizacionNotificacionAvgAggregateOutputType | null
    _sum: CotizacionNotificacionSumAggregateOutputType | null
    _min: CotizacionNotificacionMinAggregateOutputType | null
    _max: CotizacionNotificacionMaxAggregateOutputType | null
  }

  export type CotizacionNotificacionAvgAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
  }

  export type CotizacionNotificacionSumAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
  }

  export type CotizacionNotificacionMinAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
    canal: string | null
    destino: string | null
    enviadoEn: Date | null
    estado: string | null
    createdAt: Date | null
  }

  export type CotizacionNotificacionMaxAggregateOutputType = {
    id: number | null
    cotizacionId: number | null
    canal: string | null
    destino: string | null
    enviadoEn: Date | null
    estado: string | null
    createdAt: Date | null
  }

  export type CotizacionNotificacionCountAggregateOutputType = {
    id: number
    cotizacionId: number
    canal: number
    destino: number
    payload: number
    enviadoEn: number
    estado: number
    createdAt: number
    _all: number
  }


  export type CotizacionNotificacionAvgAggregateInputType = {
    id?: true
    cotizacionId?: true
  }

  export type CotizacionNotificacionSumAggregateInputType = {
    id?: true
    cotizacionId?: true
  }

  export type CotizacionNotificacionMinAggregateInputType = {
    id?: true
    cotizacionId?: true
    canal?: true
    destino?: true
    enviadoEn?: true
    estado?: true
    createdAt?: true
  }

  export type CotizacionNotificacionMaxAggregateInputType = {
    id?: true
    cotizacionId?: true
    canal?: true
    destino?: true
    enviadoEn?: true
    estado?: true
    createdAt?: true
  }

  export type CotizacionNotificacionCountAggregateInputType = {
    id?: true
    cotizacionId?: true
    canal?: true
    destino?: true
    payload?: true
    enviadoEn?: true
    estado?: true
    createdAt?: true
    _all?: true
  }

  export type CotizacionNotificacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CotizacionNotificacion to aggregate.
     */
    where?: CotizacionNotificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CotizacionNotificacions to fetch.
     */
    orderBy?: CotizacionNotificacionOrderByWithRelationInput | CotizacionNotificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CotizacionNotificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CotizacionNotificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CotizacionNotificacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CotizacionNotificacions
    **/
    _count?: true | CotizacionNotificacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CotizacionNotificacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CotizacionNotificacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CotizacionNotificacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CotizacionNotificacionMaxAggregateInputType
  }

  export type GetCotizacionNotificacionAggregateType<T extends CotizacionNotificacionAggregateArgs> = {
        [P in keyof T & keyof AggregateCotizacionNotificacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCotizacionNotificacion[P]>
      : GetScalarType<T[P], AggregateCotizacionNotificacion[P]>
  }




  export type CotizacionNotificacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CotizacionNotificacionWhereInput
    orderBy?: CotizacionNotificacionOrderByWithAggregationInput | CotizacionNotificacionOrderByWithAggregationInput[]
    by: CotizacionNotificacionScalarFieldEnum[] | CotizacionNotificacionScalarFieldEnum
    having?: CotizacionNotificacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CotizacionNotificacionCountAggregateInputType | true
    _avg?: CotizacionNotificacionAvgAggregateInputType
    _sum?: CotizacionNotificacionSumAggregateInputType
    _min?: CotizacionNotificacionMinAggregateInputType
    _max?: CotizacionNotificacionMaxAggregateInputType
  }

  export type CotizacionNotificacionGroupByOutputType = {
    id: number
    cotizacionId: number
    canal: string
    destino: string
    payload: JsonValue | null
    enviadoEn: Date | null
    estado: string
    createdAt: Date
    _count: CotizacionNotificacionCountAggregateOutputType | null
    _avg: CotizacionNotificacionAvgAggregateOutputType | null
    _sum: CotizacionNotificacionSumAggregateOutputType | null
    _min: CotizacionNotificacionMinAggregateOutputType | null
    _max: CotizacionNotificacionMaxAggregateOutputType | null
  }

  type GetCotizacionNotificacionGroupByPayload<T extends CotizacionNotificacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CotizacionNotificacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CotizacionNotificacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CotizacionNotificacionGroupByOutputType[P]>
            : GetScalarType<T[P], CotizacionNotificacionGroupByOutputType[P]>
        }
      >
    >


  export type CotizacionNotificacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cotizacionId?: boolean
    canal?: boolean
    destino?: boolean
    payload?: boolean
    enviadoEn?: boolean
    estado?: boolean
    createdAt?: boolean
    cotizacion?: boolean | CotizacionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cotizacionNotificacion"]>


  export type CotizacionNotificacionSelectScalar = {
    id?: boolean
    cotizacionId?: boolean
    canal?: boolean
    destino?: boolean
    payload?: boolean
    enviadoEn?: boolean
    estado?: boolean
    createdAt?: boolean
  }

  export type CotizacionNotificacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cotizacion?: boolean | CotizacionDefaultArgs<ExtArgs>
  }

  export type $CotizacionNotificacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CotizacionNotificacion"
    objects: {
      cotizacion: Prisma.$CotizacionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cotizacionId: number
      canal: string
      destino: string
      payload: Prisma.JsonValue | null
      enviadoEn: Date | null
      estado: string
      createdAt: Date
    }, ExtArgs["result"]["cotizacionNotificacion"]>
    composites: {}
  }

  type CotizacionNotificacionGetPayload<S extends boolean | null | undefined | CotizacionNotificacionDefaultArgs> = $Result.GetResult<Prisma.$CotizacionNotificacionPayload, S>

  type CotizacionNotificacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CotizacionNotificacionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CotizacionNotificacionCountAggregateInputType | true
    }

  export interface CotizacionNotificacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CotizacionNotificacion'], meta: { name: 'CotizacionNotificacion' } }
    /**
     * Find zero or one CotizacionNotificacion that matches the filter.
     * @param {CotizacionNotificacionFindUniqueArgs} args - Arguments to find a CotizacionNotificacion
     * @example
     * // Get one CotizacionNotificacion
     * const cotizacionNotificacion = await prisma.cotizacionNotificacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CotizacionNotificacionFindUniqueArgs>(args: SelectSubset<T, CotizacionNotificacionFindUniqueArgs<ExtArgs>>): Prisma__CotizacionNotificacionClient<$Result.GetResult<Prisma.$CotizacionNotificacionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CotizacionNotificacion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CotizacionNotificacionFindUniqueOrThrowArgs} args - Arguments to find a CotizacionNotificacion
     * @example
     * // Get one CotizacionNotificacion
     * const cotizacionNotificacion = await prisma.cotizacionNotificacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CotizacionNotificacionFindUniqueOrThrowArgs>(args: SelectSubset<T, CotizacionNotificacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CotizacionNotificacionClient<$Result.GetResult<Prisma.$CotizacionNotificacionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CotizacionNotificacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionNotificacionFindFirstArgs} args - Arguments to find a CotizacionNotificacion
     * @example
     * // Get one CotizacionNotificacion
     * const cotizacionNotificacion = await prisma.cotizacionNotificacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CotizacionNotificacionFindFirstArgs>(args?: SelectSubset<T, CotizacionNotificacionFindFirstArgs<ExtArgs>>): Prisma__CotizacionNotificacionClient<$Result.GetResult<Prisma.$CotizacionNotificacionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CotizacionNotificacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionNotificacionFindFirstOrThrowArgs} args - Arguments to find a CotizacionNotificacion
     * @example
     * // Get one CotizacionNotificacion
     * const cotizacionNotificacion = await prisma.cotizacionNotificacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CotizacionNotificacionFindFirstOrThrowArgs>(args?: SelectSubset<T, CotizacionNotificacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CotizacionNotificacionClient<$Result.GetResult<Prisma.$CotizacionNotificacionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CotizacionNotificacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionNotificacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CotizacionNotificacions
     * const cotizacionNotificacions = await prisma.cotizacionNotificacion.findMany()
     * 
     * // Get first 10 CotizacionNotificacions
     * const cotizacionNotificacions = await prisma.cotizacionNotificacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cotizacionNotificacionWithIdOnly = await prisma.cotizacionNotificacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CotizacionNotificacionFindManyArgs>(args?: SelectSubset<T, CotizacionNotificacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CotizacionNotificacionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CotizacionNotificacion.
     * @param {CotizacionNotificacionCreateArgs} args - Arguments to create a CotizacionNotificacion.
     * @example
     * // Create one CotizacionNotificacion
     * const CotizacionNotificacion = await prisma.cotizacionNotificacion.create({
     *   data: {
     *     // ... data to create a CotizacionNotificacion
     *   }
     * })
     * 
     */
    create<T extends CotizacionNotificacionCreateArgs>(args: SelectSubset<T, CotizacionNotificacionCreateArgs<ExtArgs>>): Prisma__CotizacionNotificacionClient<$Result.GetResult<Prisma.$CotizacionNotificacionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CotizacionNotificacions.
     * @param {CotizacionNotificacionCreateManyArgs} args - Arguments to create many CotizacionNotificacions.
     * @example
     * // Create many CotizacionNotificacions
     * const cotizacionNotificacion = await prisma.cotizacionNotificacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CotizacionNotificacionCreateManyArgs>(args?: SelectSubset<T, CotizacionNotificacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CotizacionNotificacion.
     * @param {CotizacionNotificacionDeleteArgs} args - Arguments to delete one CotizacionNotificacion.
     * @example
     * // Delete one CotizacionNotificacion
     * const CotizacionNotificacion = await prisma.cotizacionNotificacion.delete({
     *   where: {
     *     // ... filter to delete one CotizacionNotificacion
     *   }
     * })
     * 
     */
    delete<T extends CotizacionNotificacionDeleteArgs>(args: SelectSubset<T, CotizacionNotificacionDeleteArgs<ExtArgs>>): Prisma__CotizacionNotificacionClient<$Result.GetResult<Prisma.$CotizacionNotificacionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CotizacionNotificacion.
     * @param {CotizacionNotificacionUpdateArgs} args - Arguments to update one CotizacionNotificacion.
     * @example
     * // Update one CotizacionNotificacion
     * const cotizacionNotificacion = await prisma.cotizacionNotificacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CotizacionNotificacionUpdateArgs>(args: SelectSubset<T, CotizacionNotificacionUpdateArgs<ExtArgs>>): Prisma__CotizacionNotificacionClient<$Result.GetResult<Prisma.$CotizacionNotificacionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CotizacionNotificacions.
     * @param {CotizacionNotificacionDeleteManyArgs} args - Arguments to filter CotizacionNotificacions to delete.
     * @example
     * // Delete a few CotizacionNotificacions
     * const { count } = await prisma.cotizacionNotificacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CotizacionNotificacionDeleteManyArgs>(args?: SelectSubset<T, CotizacionNotificacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CotizacionNotificacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionNotificacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CotizacionNotificacions
     * const cotizacionNotificacion = await prisma.cotizacionNotificacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CotizacionNotificacionUpdateManyArgs>(args: SelectSubset<T, CotizacionNotificacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CotizacionNotificacion.
     * @param {CotizacionNotificacionUpsertArgs} args - Arguments to update or create a CotizacionNotificacion.
     * @example
     * // Update or create a CotizacionNotificacion
     * const cotizacionNotificacion = await prisma.cotizacionNotificacion.upsert({
     *   create: {
     *     // ... data to create a CotizacionNotificacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CotizacionNotificacion we want to update
     *   }
     * })
     */
    upsert<T extends CotizacionNotificacionUpsertArgs>(args: SelectSubset<T, CotizacionNotificacionUpsertArgs<ExtArgs>>): Prisma__CotizacionNotificacionClient<$Result.GetResult<Prisma.$CotizacionNotificacionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CotizacionNotificacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionNotificacionCountArgs} args - Arguments to filter CotizacionNotificacions to count.
     * @example
     * // Count the number of CotizacionNotificacions
     * const count = await prisma.cotizacionNotificacion.count({
     *   where: {
     *     // ... the filter for the CotizacionNotificacions we want to count
     *   }
     * })
    **/
    count<T extends CotizacionNotificacionCountArgs>(
      args?: Subset<T, CotizacionNotificacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CotizacionNotificacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CotizacionNotificacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionNotificacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CotizacionNotificacionAggregateArgs>(args: Subset<T, CotizacionNotificacionAggregateArgs>): Prisma.PrismaPromise<GetCotizacionNotificacionAggregateType<T>>

    /**
     * Group by CotizacionNotificacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionNotificacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CotizacionNotificacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CotizacionNotificacionGroupByArgs['orderBy'] }
        : { orderBy?: CotizacionNotificacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CotizacionNotificacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCotizacionNotificacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CotizacionNotificacion model
   */
  readonly fields: CotizacionNotificacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CotizacionNotificacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CotizacionNotificacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cotizacion<T extends CotizacionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CotizacionDefaultArgs<ExtArgs>>): Prisma__CotizacionClient<$Result.GetResult<Prisma.$CotizacionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CotizacionNotificacion model
   */ 
  interface CotizacionNotificacionFieldRefs {
    readonly id: FieldRef<"CotizacionNotificacion", 'Int'>
    readonly cotizacionId: FieldRef<"CotizacionNotificacion", 'Int'>
    readonly canal: FieldRef<"CotizacionNotificacion", 'String'>
    readonly destino: FieldRef<"CotizacionNotificacion", 'String'>
    readonly payload: FieldRef<"CotizacionNotificacion", 'Json'>
    readonly enviadoEn: FieldRef<"CotizacionNotificacion", 'DateTime'>
    readonly estado: FieldRef<"CotizacionNotificacion", 'String'>
    readonly createdAt: FieldRef<"CotizacionNotificacion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CotizacionNotificacion findUnique
   */
  export type CotizacionNotificacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionNotificacion
     */
    select?: CotizacionNotificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionNotificacionInclude<ExtArgs> | null
    /**
     * Filter, which CotizacionNotificacion to fetch.
     */
    where: CotizacionNotificacionWhereUniqueInput
  }

  /**
   * CotizacionNotificacion findUniqueOrThrow
   */
  export type CotizacionNotificacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionNotificacion
     */
    select?: CotizacionNotificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionNotificacionInclude<ExtArgs> | null
    /**
     * Filter, which CotizacionNotificacion to fetch.
     */
    where: CotizacionNotificacionWhereUniqueInput
  }

  /**
   * CotizacionNotificacion findFirst
   */
  export type CotizacionNotificacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionNotificacion
     */
    select?: CotizacionNotificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionNotificacionInclude<ExtArgs> | null
    /**
     * Filter, which CotizacionNotificacion to fetch.
     */
    where?: CotizacionNotificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CotizacionNotificacions to fetch.
     */
    orderBy?: CotizacionNotificacionOrderByWithRelationInput | CotizacionNotificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CotizacionNotificacions.
     */
    cursor?: CotizacionNotificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CotizacionNotificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CotizacionNotificacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CotizacionNotificacions.
     */
    distinct?: CotizacionNotificacionScalarFieldEnum | CotizacionNotificacionScalarFieldEnum[]
  }

  /**
   * CotizacionNotificacion findFirstOrThrow
   */
  export type CotizacionNotificacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionNotificacion
     */
    select?: CotizacionNotificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionNotificacionInclude<ExtArgs> | null
    /**
     * Filter, which CotizacionNotificacion to fetch.
     */
    where?: CotizacionNotificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CotizacionNotificacions to fetch.
     */
    orderBy?: CotizacionNotificacionOrderByWithRelationInput | CotizacionNotificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CotizacionNotificacions.
     */
    cursor?: CotizacionNotificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CotizacionNotificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CotizacionNotificacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CotizacionNotificacions.
     */
    distinct?: CotizacionNotificacionScalarFieldEnum | CotizacionNotificacionScalarFieldEnum[]
  }

  /**
   * CotizacionNotificacion findMany
   */
  export type CotizacionNotificacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionNotificacion
     */
    select?: CotizacionNotificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionNotificacionInclude<ExtArgs> | null
    /**
     * Filter, which CotizacionNotificacions to fetch.
     */
    where?: CotizacionNotificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CotizacionNotificacions to fetch.
     */
    orderBy?: CotizacionNotificacionOrderByWithRelationInput | CotizacionNotificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CotizacionNotificacions.
     */
    cursor?: CotizacionNotificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CotizacionNotificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CotizacionNotificacions.
     */
    skip?: number
    distinct?: CotizacionNotificacionScalarFieldEnum | CotizacionNotificacionScalarFieldEnum[]
  }

  /**
   * CotizacionNotificacion create
   */
  export type CotizacionNotificacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionNotificacion
     */
    select?: CotizacionNotificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionNotificacionInclude<ExtArgs> | null
    /**
     * The data needed to create a CotizacionNotificacion.
     */
    data: XOR<CotizacionNotificacionCreateInput, CotizacionNotificacionUncheckedCreateInput>
  }

  /**
   * CotizacionNotificacion createMany
   */
  export type CotizacionNotificacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CotizacionNotificacions.
     */
    data: CotizacionNotificacionCreateManyInput | CotizacionNotificacionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CotizacionNotificacion update
   */
  export type CotizacionNotificacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionNotificacion
     */
    select?: CotizacionNotificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionNotificacionInclude<ExtArgs> | null
    /**
     * The data needed to update a CotizacionNotificacion.
     */
    data: XOR<CotizacionNotificacionUpdateInput, CotizacionNotificacionUncheckedUpdateInput>
    /**
     * Choose, which CotizacionNotificacion to update.
     */
    where: CotizacionNotificacionWhereUniqueInput
  }

  /**
   * CotizacionNotificacion updateMany
   */
  export type CotizacionNotificacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CotizacionNotificacions.
     */
    data: XOR<CotizacionNotificacionUpdateManyMutationInput, CotizacionNotificacionUncheckedUpdateManyInput>
    /**
     * Filter which CotizacionNotificacions to update
     */
    where?: CotizacionNotificacionWhereInput
  }

  /**
   * CotizacionNotificacion upsert
   */
  export type CotizacionNotificacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionNotificacion
     */
    select?: CotizacionNotificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionNotificacionInclude<ExtArgs> | null
    /**
     * The filter to search for the CotizacionNotificacion to update in case it exists.
     */
    where: CotizacionNotificacionWhereUniqueInput
    /**
     * In case the CotizacionNotificacion found by the `where` argument doesn't exist, create a new CotizacionNotificacion with this data.
     */
    create: XOR<CotizacionNotificacionCreateInput, CotizacionNotificacionUncheckedCreateInput>
    /**
     * In case the CotizacionNotificacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CotizacionNotificacionUpdateInput, CotizacionNotificacionUncheckedUpdateInput>
  }

  /**
   * CotizacionNotificacion delete
   */
  export type CotizacionNotificacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionNotificacion
     */
    select?: CotizacionNotificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionNotificacionInclude<ExtArgs> | null
    /**
     * Filter which CotizacionNotificacion to delete.
     */
    where: CotizacionNotificacionWhereUniqueInput
  }

  /**
   * CotizacionNotificacion deleteMany
   */
  export type CotizacionNotificacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CotizacionNotificacions to delete
     */
    where?: CotizacionNotificacionWhereInput
  }

  /**
   * CotizacionNotificacion without action
   */
  export type CotizacionNotificacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CotizacionNotificacion
     */
    select?: CotizacionNotificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotizacionNotificacionInclude<ExtArgs> | null
  }


  /**
   * Model Oferta
   */

  export type AggregateOferta = {
    _count: OfertaCountAggregateOutputType | null
    _avg: OfertaAvgAggregateOutputType | null
    _sum: OfertaSumAggregateOutputType | null
    _min: OfertaMinAggregateOutputType | null
    _max: OfertaMaxAggregateOutputType | null
  }

  export type OfertaAvgAggregateOutputType = {
    id: number | null
    prioridad: number | null
    itemId: number | null
  }

  export type OfertaSumAggregateOutputType = {
    id: number | null
    prioridad: number | null
    itemId: number | null
  }

  export type OfertaMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    descripcion: string | null
    imageUrl: string | null
    link: string | null
    activo: boolean | null
    prioridad: number | null
    itemId: number | null
    startAt: Date | null
    endAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OfertaMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    descripcion: string | null
    imageUrl: string | null
    link: string | null
    activo: boolean | null
    prioridad: number | null
    itemId: number | null
    startAt: Date | null
    endAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OfertaCountAggregateOutputType = {
    id: number
    titulo: number
    descripcion: number
    imageUrl: number
    link: number
    activo: number
    prioridad: number
    itemId: number
    startAt: number
    endAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OfertaAvgAggregateInputType = {
    id?: true
    prioridad?: true
    itemId?: true
  }

  export type OfertaSumAggregateInputType = {
    id?: true
    prioridad?: true
    itemId?: true
  }

  export type OfertaMinAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    imageUrl?: true
    link?: true
    activo?: true
    prioridad?: true
    itemId?: true
    startAt?: true
    endAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OfertaMaxAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    imageUrl?: true
    link?: true
    activo?: true
    prioridad?: true
    itemId?: true
    startAt?: true
    endAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OfertaCountAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    imageUrl?: true
    link?: true
    activo?: true
    prioridad?: true
    itemId?: true
    startAt?: true
    endAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OfertaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Oferta to aggregate.
     */
    where?: OfertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ofertas to fetch.
     */
    orderBy?: OfertaOrderByWithRelationInput | OfertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OfertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ofertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ofertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ofertas
    **/
    _count?: true | OfertaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OfertaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OfertaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfertaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfertaMaxAggregateInputType
  }

  export type GetOfertaAggregateType<T extends OfertaAggregateArgs> = {
        [P in keyof T & keyof AggregateOferta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOferta[P]>
      : GetScalarType<T[P], AggregateOferta[P]>
  }




  export type OfertaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfertaWhereInput
    orderBy?: OfertaOrderByWithAggregationInput | OfertaOrderByWithAggregationInput[]
    by: OfertaScalarFieldEnum[] | OfertaScalarFieldEnum
    having?: OfertaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfertaCountAggregateInputType | true
    _avg?: OfertaAvgAggregateInputType
    _sum?: OfertaSumAggregateInputType
    _min?: OfertaMinAggregateInputType
    _max?: OfertaMaxAggregateInputType
  }

  export type OfertaGroupByOutputType = {
    id: number
    titulo: string
    descripcion: string | null
    imageUrl: string | null
    link: string | null
    activo: boolean
    prioridad: number
    itemId: number | null
    startAt: Date | null
    endAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: OfertaCountAggregateOutputType | null
    _avg: OfertaAvgAggregateOutputType | null
    _sum: OfertaSumAggregateOutputType | null
    _min: OfertaMinAggregateOutputType | null
    _max: OfertaMaxAggregateOutputType | null
  }

  type GetOfertaGroupByPayload<T extends OfertaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OfertaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfertaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfertaGroupByOutputType[P]>
            : GetScalarType<T[P], OfertaGroupByOutputType[P]>
        }
      >
    >


  export type OfertaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descripcion?: boolean
    imageUrl?: boolean
    link?: boolean
    activo?: boolean
    prioridad?: boolean
    itemId?: boolean
    startAt?: boolean
    endAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inventario?: boolean | Oferta$inventarioArgs<ExtArgs>
  }, ExtArgs["result"]["oferta"]>


  export type OfertaSelectScalar = {
    id?: boolean
    titulo?: boolean
    descripcion?: boolean
    imageUrl?: boolean
    link?: boolean
    activo?: boolean
    prioridad?: boolean
    itemId?: boolean
    startAt?: boolean
    endAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OfertaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventario?: boolean | Oferta$inventarioArgs<ExtArgs>
  }

  export type $OfertaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Oferta"
    objects: {
      inventario: Prisma.$InventoryItemPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      descripcion: string | null
      imageUrl: string | null
      link: string | null
      activo: boolean
      prioridad: number
      itemId: number | null
      startAt: Date | null
      endAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["oferta"]>
    composites: {}
  }

  type OfertaGetPayload<S extends boolean | null | undefined | OfertaDefaultArgs> = $Result.GetResult<Prisma.$OfertaPayload, S>

  type OfertaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OfertaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OfertaCountAggregateInputType | true
    }

  export interface OfertaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Oferta'], meta: { name: 'Oferta' } }
    /**
     * Find zero or one Oferta that matches the filter.
     * @param {OfertaFindUniqueArgs} args - Arguments to find a Oferta
     * @example
     * // Get one Oferta
     * const oferta = await prisma.oferta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OfertaFindUniqueArgs>(args: SelectSubset<T, OfertaFindUniqueArgs<ExtArgs>>): Prisma__OfertaClient<$Result.GetResult<Prisma.$OfertaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Oferta that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OfertaFindUniqueOrThrowArgs} args - Arguments to find a Oferta
     * @example
     * // Get one Oferta
     * const oferta = await prisma.oferta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OfertaFindUniqueOrThrowArgs>(args: SelectSubset<T, OfertaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OfertaClient<$Result.GetResult<Prisma.$OfertaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Oferta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertaFindFirstArgs} args - Arguments to find a Oferta
     * @example
     * // Get one Oferta
     * const oferta = await prisma.oferta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OfertaFindFirstArgs>(args?: SelectSubset<T, OfertaFindFirstArgs<ExtArgs>>): Prisma__OfertaClient<$Result.GetResult<Prisma.$OfertaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Oferta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertaFindFirstOrThrowArgs} args - Arguments to find a Oferta
     * @example
     * // Get one Oferta
     * const oferta = await prisma.oferta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OfertaFindFirstOrThrowArgs>(args?: SelectSubset<T, OfertaFindFirstOrThrowArgs<ExtArgs>>): Prisma__OfertaClient<$Result.GetResult<Prisma.$OfertaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ofertas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ofertas
     * const ofertas = await prisma.oferta.findMany()
     * 
     * // Get first 10 Ofertas
     * const ofertas = await prisma.oferta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ofertaWithIdOnly = await prisma.oferta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OfertaFindManyArgs>(args?: SelectSubset<T, OfertaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfertaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Oferta.
     * @param {OfertaCreateArgs} args - Arguments to create a Oferta.
     * @example
     * // Create one Oferta
     * const Oferta = await prisma.oferta.create({
     *   data: {
     *     // ... data to create a Oferta
     *   }
     * })
     * 
     */
    create<T extends OfertaCreateArgs>(args: SelectSubset<T, OfertaCreateArgs<ExtArgs>>): Prisma__OfertaClient<$Result.GetResult<Prisma.$OfertaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ofertas.
     * @param {OfertaCreateManyArgs} args - Arguments to create many Ofertas.
     * @example
     * // Create many Ofertas
     * const oferta = await prisma.oferta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OfertaCreateManyArgs>(args?: SelectSubset<T, OfertaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Oferta.
     * @param {OfertaDeleteArgs} args - Arguments to delete one Oferta.
     * @example
     * // Delete one Oferta
     * const Oferta = await prisma.oferta.delete({
     *   where: {
     *     // ... filter to delete one Oferta
     *   }
     * })
     * 
     */
    delete<T extends OfertaDeleteArgs>(args: SelectSubset<T, OfertaDeleteArgs<ExtArgs>>): Prisma__OfertaClient<$Result.GetResult<Prisma.$OfertaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Oferta.
     * @param {OfertaUpdateArgs} args - Arguments to update one Oferta.
     * @example
     * // Update one Oferta
     * const oferta = await prisma.oferta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OfertaUpdateArgs>(args: SelectSubset<T, OfertaUpdateArgs<ExtArgs>>): Prisma__OfertaClient<$Result.GetResult<Prisma.$OfertaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ofertas.
     * @param {OfertaDeleteManyArgs} args - Arguments to filter Ofertas to delete.
     * @example
     * // Delete a few Ofertas
     * const { count } = await prisma.oferta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OfertaDeleteManyArgs>(args?: SelectSubset<T, OfertaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ofertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ofertas
     * const oferta = await prisma.oferta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OfertaUpdateManyArgs>(args: SelectSubset<T, OfertaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Oferta.
     * @param {OfertaUpsertArgs} args - Arguments to update or create a Oferta.
     * @example
     * // Update or create a Oferta
     * const oferta = await prisma.oferta.upsert({
     *   create: {
     *     // ... data to create a Oferta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Oferta we want to update
     *   }
     * })
     */
    upsert<T extends OfertaUpsertArgs>(args: SelectSubset<T, OfertaUpsertArgs<ExtArgs>>): Prisma__OfertaClient<$Result.GetResult<Prisma.$OfertaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ofertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertaCountArgs} args - Arguments to filter Ofertas to count.
     * @example
     * // Count the number of Ofertas
     * const count = await prisma.oferta.count({
     *   where: {
     *     // ... the filter for the Ofertas we want to count
     *   }
     * })
    **/
    count<T extends OfertaCountArgs>(
      args?: Subset<T, OfertaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfertaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Oferta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfertaAggregateArgs>(args: Subset<T, OfertaAggregateArgs>): Prisma.PrismaPromise<GetOfertaAggregateType<T>>

    /**
     * Group by Oferta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OfertaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OfertaGroupByArgs['orderBy'] }
        : { orderBy?: OfertaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OfertaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfertaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Oferta model
   */
  readonly fields: OfertaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Oferta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OfertaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventario<T extends Oferta$inventarioArgs<ExtArgs> = {}>(args?: Subset<T, Oferta$inventarioArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Oferta model
   */ 
  interface OfertaFieldRefs {
    readonly id: FieldRef<"Oferta", 'Int'>
    readonly titulo: FieldRef<"Oferta", 'String'>
    readonly descripcion: FieldRef<"Oferta", 'String'>
    readonly imageUrl: FieldRef<"Oferta", 'String'>
    readonly link: FieldRef<"Oferta", 'String'>
    readonly activo: FieldRef<"Oferta", 'Boolean'>
    readonly prioridad: FieldRef<"Oferta", 'Int'>
    readonly itemId: FieldRef<"Oferta", 'Int'>
    readonly startAt: FieldRef<"Oferta", 'DateTime'>
    readonly endAt: FieldRef<"Oferta", 'DateTime'>
    readonly createdAt: FieldRef<"Oferta", 'DateTime'>
    readonly updatedAt: FieldRef<"Oferta", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Oferta findUnique
   */
  export type OfertaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oferta
     */
    select?: OfertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfertaInclude<ExtArgs> | null
    /**
     * Filter, which Oferta to fetch.
     */
    where: OfertaWhereUniqueInput
  }

  /**
   * Oferta findUniqueOrThrow
   */
  export type OfertaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oferta
     */
    select?: OfertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfertaInclude<ExtArgs> | null
    /**
     * Filter, which Oferta to fetch.
     */
    where: OfertaWhereUniqueInput
  }

  /**
   * Oferta findFirst
   */
  export type OfertaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oferta
     */
    select?: OfertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfertaInclude<ExtArgs> | null
    /**
     * Filter, which Oferta to fetch.
     */
    where?: OfertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ofertas to fetch.
     */
    orderBy?: OfertaOrderByWithRelationInput | OfertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ofertas.
     */
    cursor?: OfertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ofertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ofertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ofertas.
     */
    distinct?: OfertaScalarFieldEnum | OfertaScalarFieldEnum[]
  }

  /**
   * Oferta findFirstOrThrow
   */
  export type OfertaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oferta
     */
    select?: OfertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfertaInclude<ExtArgs> | null
    /**
     * Filter, which Oferta to fetch.
     */
    where?: OfertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ofertas to fetch.
     */
    orderBy?: OfertaOrderByWithRelationInput | OfertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ofertas.
     */
    cursor?: OfertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ofertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ofertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ofertas.
     */
    distinct?: OfertaScalarFieldEnum | OfertaScalarFieldEnum[]
  }

  /**
   * Oferta findMany
   */
  export type OfertaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oferta
     */
    select?: OfertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfertaInclude<ExtArgs> | null
    /**
     * Filter, which Ofertas to fetch.
     */
    where?: OfertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ofertas to fetch.
     */
    orderBy?: OfertaOrderByWithRelationInput | OfertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ofertas.
     */
    cursor?: OfertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ofertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ofertas.
     */
    skip?: number
    distinct?: OfertaScalarFieldEnum | OfertaScalarFieldEnum[]
  }

  /**
   * Oferta create
   */
  export type OfertaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oferta
     */
    select?: OfertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfertaInclude<ExtArgs> | null
    /**
     * The data needed to create a Oferta.
     */
    data: XOR<OfertaCreateInput, OfertaUncheckedCreateInput>
  }

  /**
   * Oferta createMany
   */
  export type OfertaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ofertas.
     */
    data: OfertaCreateManyInput | OfertaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Oferta update
   */
  export type OfertaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oferta
     */
    select?: OfertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfertaInclude<ExtArgs> | null
    /**
     * The data needed to update a Oferta.
     */
    data: XOR<OfertaUpdateInput, OfertaUncheckedUpdateInput>
    /**
     * Choose, which Oferta to update.
     */
    where: OfertaWhereUniqueInput
  }

  /**
   * Oferta updateMany
   */
  export type OfertaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ofertas.
     */
    data: XOR<OfertaUpdateManyMutationInput, OfertaUncheckedUpdateManyInput>
    /**
     * Filter which Ofertas to update
     */
    where?: OfertaWhereInput
  }

  /**
   * Oferta upsert
   */
  export type OfertaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oferta
     */
    select?: OfertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfertaInclude<ExtArgs> | null
    /**
     * The filter to search for the Oferta to update in case it exists.
     */
    where: OfertaWhereUniqueInput
    /**
     * In case the Oferta found by the `where` argument doesn't exist, create a new Oferta with this data.
     */
    create: XOR<OfertaCreateInput, OfertaUncheckedCreateInput>
    /**
     * In case the Oferta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OfertaUpdateInput, OfertaUncheckedUpdateInput>
  }

  /**
   * Oferta delete
   */
  export type OfertaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oferta
     */
    select?: OfertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfertaInclude<ExtArgs> | null
    /**
     * Filter which Oferta to delete.
     */
    where: OfertaWhereUniqueInput
  }

  /**
   * Oferta deleteMany
   */
  export type OfertaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ofertas to delete
     */
    where?: OfertaWhereInput
  }

  /**
   * Oferta.inventario
   */
  export type Oferta$inventarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    where?: InventoryItemWhereInput
  }

  /**
   * Oferta without action
   */
  export type OfertaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oferta
     */
    select?: OfertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfertaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    fullName: 'fullName',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PasswordResetScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tokenHash: 'tokenHash',
    expiresAt: 'expiresAt',
    usedAt: 'usedAt',
    createdAt: 'createdAt'
  };

  export type PasswordResetScalarFieldEnum = (typeof PasswordResetScalarFieldEnum)[keyof typeof PasswordResetScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id_cliente: 'id_cliente',
    rut: 'rut',
    nombre_contacto: 'nombre_contacto',
    email: 'email',
    telefono: 'telefono',
    direccion: 'direccion',
    comuna: 'comuna',
    ciudad: 'ciudad',
    id_usuario: 'id_usuario',
    creado_en: 'creado_en'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const InventoryItemScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    itemType: 'itemType',
    color: 'color',
    provider: 'provider',
    quantity: 'quantity',
    priceWeb: 'priceWeb',
    priceStore: 'priceStore',
    priceWsp: 'priceWsp',
    umbralBajoStock: 'umbralBajoStock',
    qrRaw: 'qrRaw',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InventoryItemScalarFieldEnum = (typeof InventoryItemScalarFieldEnum)[keyof typeof InventoryItemScalarFieldEnum]


  export const PedidoScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    clienteEmail: 'clienteEmail',
    clienteNombre: 'clienteNombre',
    estado: 'estado',
    notificado: 'notificado',
    total: 'total',
    itemsCount: 'itemsCount',
    materialId: 'materialId',
    materialLabel: 'materialLabel',
    payload: 'payload',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PedidoScalarFieldEnum = (typeof PedidoScalarFieldEnum)[keyof typeof PedidoScalarFieldEnum]


  export const CotizacionScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    canal: 'canal',
    estado: 'estado',
    totalEstimado: 'totalEstimado',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type CotizacionScalarFieldEnum = (typeof CotizacionScalarFieldEnum)[keyof typeof CotizacionScalarFieldEnum]


  export const CotizacionItemScalarFieldEnum: {
    id: 'id',
    cotizacionId: 'cotizacionId',
    producto: 'producto',
    variantes: 'variantes',
    cantidad: 'cantidad',
    notas: 'notas',
    archivos: 'archivos',
    coberturaInk: 'coberturaInk',
    createdAt: 'createdAt'
  };

  export type CotizacionItemScalarFieldEnum = (typeof CotizacionItemScalarFieldEnum)[keyof typeof CotizacionItemScalarFieldEnum]


  export const AsignacionScalarFieldEnum: {
    id: 'id',
    cotizacionId: 'cotizacionId',
    operadorId: 'operadorId',
    estado: 'estado',
    slaMinutos: 'slaMinutos',
    vencimiento: 'vencimiento',
    createdAt: 'createdAt',
    aceptadoEn: 'aceptadoEn',
    resueltoEn: 'resueltoEn'
  };

  export type AsignacionScalarFieldEnum = (typeof AsignacionScalarFieldEnum)[keyof typeof AsignacionScalarFieldEnum]


  export const CotizacionNotificacionScalarFieldEnum: {
    id: 'id',
    cotizacionId: 'cotizacionId',
    canal: 'canal',
    destino: 'destino',
    payload: 'payload',
    enviadoEn: 'enviadoEn',
    estado: 'estado',
    createdAt: 'createdAt'
  };

  export type CotizacionNotificacionScalarFieldEnum = (typeof CotizacionNotificacionScalarFieldEnum)[keyof typeof CotizacionNotificacionScalarFieldEnum]


  export const OfertaScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    descripcion: 'descripcion',
    imageUrl: 'imageUrl',
    link: 'link',
    activo: 'activo',
    prioridad: 'prioridad',
    itemId: 'itemId',
    startAt: 'startAt',
    endAt: 'endAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OfertaScalarFieldEnum = (typeof OfertaScalarFieldEnum)[keyof typeof OfertaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    resets?: PasswordResetListRelationFilter
    cliente?: XOR<ClienteNullableRelationFilter, ClienteWhereInput> | null
    pedidos?: PedidoListRelationFilter
    cotizacionesCliente?: CotizacionListRelationFilter
    asignacionesOperador?: AsignacionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resets?: PasswordResetOrderByRelationAggregateInput
    cliente?: ClienteOrderByWithRelationInput
    pedidos?: PedidoOrderByRelationAggregateInput
    cotizacionesCliente?: CotizacionOrderByRelationAggregateInput
    asignacionesOperador?: AsignacionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    resets?: PasswordResetListRelationFilter
    cliente?: XOR<ClienteNullableRelationFilter, ClienteWhereInput> | null
    pedidos?: PedidoListRelationFilter
    cotizacionesCliente?: CotizacionListRelationFilter
    asignacionesOperador?: AsignacionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PasswordResetWhereInput = {
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    id?: IntFilter<"PasswordReset"> | number
    userId?: IntFilter<"PasswordReset"> | number
    tokenHash?: StringFilter<"PasswordReset"> | string
    expiresAt?: DateTimeFilter<"PasswordReset"> | Date | string
    usedAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
    createdAt?: DateTimeFilter<"PasswordReset"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PasswordResetOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PasswordResetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    userId?: IntFilter<"PasswordReset"> | number
    tokenHash?: StringFilter<"PasswordReset"> | string
    expiresAt?: DateTimeFilter<"PasswordReset"> | Date | string
    usedAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
    createdAt?: DateTimeFilter<"PasswordReset"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PasswordResetOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PasswordResetCountOrderByAggregateInput
    _avg?: PasswordResetAvgOrderByAggregateInput
    _max?: PasswordResetMaxOrderByAggregateInput
    _min?: PasswordResetMinOrderByAggregateInput
    _sum?: PasswordResetSumOrderByAggregateInput
  }

  export type PasswordResetScalarWhereWithAggregatesInput = {
    AND?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    OR?: PasswordResetScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PasswordReset"> | number
    userId?: IntWithAggregatesFilter<"PasswordReset"> | number
    tokenHash?: StringWithAggregatesFilter<"PasswordReset"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
    usedAt?: DateTimeNullableWithAggregatesFilter<"PasswordReset"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id_cliente?: IntFilter<"Cliente"> | number
    rut?: StringNullableFilter<"Cliente"> | string | null
    nombre_contacto?: StringNullableFilter<"Cliente"> | string | null
    email?: StringNullableFilter<"Cliente"> | string | null
    telefono?: StringNullableFilter<"Cliente"> | string | null
    direccion?: StringNullableFilter<"Cliente"> | string | null
    comuna?: StringNullableFilter<"Cliente"> | string | null
    ciudad?: StringNullableFilter<"Cliente"> | string | null
    id_usuario?: IntFilter<"Cliente"> | number
    creado_en?: DateTimeFilter<"Cliente"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ClienteOrderByWithRelationInput = {
    id_cliente?: SortOrder
    rut?: SortOrderInput | SortOrder
    nombre_contacto?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    telefono?: SortOrderInput | SortOrder
    direccion?: SortOrderInput | SortOrder
    comuna?: SortOrderInput | SortOrder
    ciudad?: SortOrderInput | SortOrder
    id_usuario?: SortOrder
    creado_en?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id_cliente?: number
    id_usuario?: number
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    rut?: StringNullableFilter<"Cliente"> | string | null
    nombre_contacto?: StringNullableFilter<"Cliente"> | string | null
    email?: StringNullableFilter<"Cliente"> | string | null
    telefono?: StringNullableFilter<"Cliente"> | string | null
    direccion?: StringNullableFilter<"Cliente"> | string | null
    comuna?: StringNullableFilter<"Cliente"> | string | null
    ciudad?: StringNullableFilter<"Cliente"> | string | null
    creado_en?: DateTimeFilter<"Cliente"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id_cliente" | "id_usuario">

  export type ClienteOrderByWithAggregationInput = {
    id_cliente?: SortOrder
    rut?: SortOrderInput | SortOrder
    nombre_contacto?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    telefono?: SortOrderInput | SortOrder
    direccion?: SortOrderInput | SortOrder
    comuna?: SortOrderInput | SortOrder
    ciudad?: SortOrderInput | SortOrder
    id_usuario?: SortOrder
    creado_en?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id_cliente?: IntWithAggregatesFilter<"Cliente"> | number
    rut?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    nombre_contacto?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    email?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    telefono?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    direccion?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    comuna?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    ciudad?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    id_usuario?: IntWithAggregatesFilter<"Cliente"> | number
    creado_en?: DateTimeWithAggregatesFilter<"Cliente"> | Date | string
  }

  export type InventoryItemWhereInput = {
    AND?: InventoryItemWhereInput | InventoryItemWhereInput[]
    OR?: InventoryItemWhereInput[]
    NOT?: InventoryItemWhereInput | InventoryItemWhereInput[]
    id?: IntFilter<"InventoryItem"> | number
    code?: StringFilter<"InventoryItem"> | string
    name?: StringFilter<"InventoryItem"> | string
    itemType?: StringFilter<"InventoryItem"> | string
    color?: StringFilter<"InventoryItem"> | string
    provider?: StringFilter<"InventoryItem"> | string
    quantity?: IntFilter<"InventoryItem"> | number
    priceWeb?: IntFilter<"InventoryItem"> | number
    priceStore?: IntFilter<"InventoryItem"> | number
    priceWsp?: IntFilter<"InventoryItem"> | number
    umbralBajoStock?: IntFilter<"InventoryItem"> | number
    qrRaw?: StringNullableFilter<"InventoryItem"> | string | null
    imageUrl?: StringNullableFilter<"InventoryItem"> | string | null
    createdAt?: DateTimeFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryItem"> | Date | string
    ofertas?: OfertaListRelationFilter
  }

  export type InventoryItemOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    itemType?: SortOrder
    color?: SortOrder
    provider?: SortOrder
    quantity?: SortOrder
    priceWeb?: SortOrder
    priceStore?: SortOrder
    priceWsp?: SortOrder
    umbralBajoStock?: SortOrder
    qrRaw?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ofertas?: OfertaOrderByRelationAggregateInput
  }

  export type InventoryItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: InventoryItemWhereInput | InventoryItemWhereInput[]
    OR?: InventoryItemWhereInput[]
    NOT?: InventoryItemWhereInput | InventoryItemWhereInput[]
    name?: StringFilter<"InventoryItem"> | string
    itemType?: StringFilter<"InventoryItem"> | string
    color?: StringFilter<"InventoryItem"> | string
    provider?: StringFilter<"InventoryItem"> | string
    quantity?: IntFilter<"InventoryItem"> | number
    priceWeb?: IntFilter<"InventoryItem"> | number
    priceStore?: IntFilter<"InventoryItem"> | number
    priceWsp?: IntFilter<"InventoryItem"> | number
    umbralBajoStock?: IntFilter<"InventoryItem"> | number
    qrRaw?: StringNullableFilter<"InventoryItem"> | string | null
    imageUrl?: StringNullableFilter<"InventoryItem"> | string | null
    createdAt?: DateTimeFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryItem"> | Date | string
    ofertas?: OfertaListRelationFilter
  }, "id" | "code">

  export type InventoryItemOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    itemType?: SortOrder
    color?: SortOrder
    provider?: SortOrder
    quantity?: SortOrder
    priceWeb?: SortOrder
    priceStore?: SortOrder
    priceWsp?: SortOrder
    umbralBajoStock?: SortOrder
    qrRaw?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InventoryItemCountOrderByAggregateInput
    _avg?: InventoryItemAvgOrderByAggregateInput
    _max?: InventoryItemMaxOrderByAggregateInput
    _min?: InventoryItemMinOrderByAggregateInput
    _sum?: InventoryItemSumOrderByAggregateInput
  }

  export type InventoryItemScalarWhereWithAggregatesInput = {
    AND?: InventoryItemScalarWhereWithAggregatesInput | InventoryItemScalarWhereWithAggregatesInput[]
    OR?: InventoryItemScalarWhereWithAggregatesInput[]
    NOT?: InventoryItemScalarWhereWithAggregatesInput | InventoryItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InventoryItem"> | number
    code?: StringWithAggregatesFilter<"InventoryItem"> | string
    name?: StringWithAggregatesFilter<"InventoryItem"> | string
    itemType?: StringWithAggregatesFilter<"InventoryItem"> | string
    color?: StringWithAggregatesFilter<"InventoryItem"> | string
    provider?: StringWithAggregatesFilter<"InventoryItem"> | string
    quantity?: IntWithAggregatesFilter<"InventoryItem"> | number
    priceWeb?: IntWithAggregatesFilter<"InventoryItem"> | number
    priceStore?: IntWithAggregatesFilter<"InventoryItem"> | number
    priceWsp?: IntWithAggregatesFilter<"InventoryItem"> | number
    umbralBajoStock?: IntWithAggregatesFilter<"InventoryItem"> | number
    qrRaw?: StringNullableWithAggregatesFilter<"InventoryItem"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"InventoryItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryItem"> | Date | string
  }

  export type PedidoWhereInput = {
    AND?: PedidoWhereInput | PedidoWhereInput[]
    OR?: PedidoWhereInput[]
    NOT?: PedidoWhereInput | PedidoWhereInput[]
    id?: IntFilter<"Pedido"> | number
    userId?: IntNullableFilter<"Pedido"> | number | null
    clienteEmail?: StringNullableFilter<"Pedido"> | string | null
    clienteNombre?: StringNullableFilter<"Pedido"> | string | null
    estado?: StringFilter<"Pedido"> | string
    notificado?: BoolFilter<"Pedido"> | boolean
    total?: IntNullableFilter<"Pedido"> | number | null
    itemsCount?: IntNullableFilter<"Pedido"> | number | null
    materialId?: StringNullableFilter<"Pedido"> | string | null
    materialLabel?: StringNullableFilter<"Pedido"> | string | null
    payload?: JsonNullableFilter<"Pedido">
    createdAt?: DateTimeFilter<"Pedido"> | Date | string
    updatedAt?: DateTimeFilter<"Pedido"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type PedidoOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    clienteEmail?: SortOrderInput | SortOrder
    clienteNombre?: SortOrderInput | SortOrder
    estado?: SortOrder
    notificado?: SortOrder
    total?: SortOrderInput | SortOrder
    itemsCount?: SortOrderInput | SortOrder
    materialId?: SortOrderInput | SortOrder
    materialLabel?: SortOrderInput | SortOrder
    payload?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PedidoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PedidoWhereInput | PedidoWhereInput[]
    OR?: PedidoWhereInput[]
    NOT?: PedidoWhereInput | PedidoWhereInput[]
    userId?: IntNullableFilter<"Pedido"> | number | null
    clienteEmail?: StringNullableFilter<"Pedido"> | string | null
    clienteNombre?: StringNullableFilter<"Pedido"> | string | null
    estado?: StringFilter<"Pedido"> | string
    notificado?: BoolFilter<"Pedido"> | boolean
    total?: IntNullableFilter<"Pedido"> | number | null
    itemsCount?: IntNullableFilter<"Pedido"> | number | null
    materialId?: StringNullableFilter<"Pedido"> | string | null
    materialLabel?: StringNullableFilter<"Pedido"> | string | null
    payload?: JsonNullableFilter<"Pedido">
    createdAt?: DateTimeFilter<"Pedido"> | Date | string
    updatedAt?: DateTimeFilter<"Pedido"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type PedidoOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    clienteEmail?: SortOrderInput | SortOrder
    clienteNombre?: SortOrderInput | SortOrder
    estado?: SortOrder
    notificado?: SortOrder
    total?: SortOrderInput | SortOrder
    itemsCount?: SortOrderInput | SortOrder
    materialId?: SortOrderInput | SortOrder
    materialLabel?: SortOrderInput | SortOrder
    payload?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PedidoCountOrderByAggregateInput
    _avg?: PedidoAvgOrderByAggregateInput
    _max?: PedidoMaxOrderByAggregateInput
    _min?: PedidoMinOrderByAggregateInput
    _sum?: PedidoSumOrderByAggregateInput
  }

  export type PedidoScalarWhereWithAggregatesInput = {
    AND?: PedidoScalarWhereWithAggregatesInput | PedidoScalarWhereWithAggregatesInput[]
    OR?: PedidoScalarWhereWithAggregatesInput[]
    NOT?: PedidoScalarWhereWithAggregatesInput | PedidoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pedido"> | number
    userId?: IntNullableWithAggregatesFilter<"Pedido"> | number | null
    clienteEmail?: StringNullableWithAggregatesFilter<"Pedido"> | string | null
    clienteNombre?: StringNullableWithAggregatesFilter<"Pedido"> | string | null
    estado?: StringWithAggregatesFilter<"Pedido"> | string
    notificado?: BoolWithAggregatesFilter<"Pedido"> | boolean
    total?: IntNullableWithAggregatesFilter<"Pedido"> | number | null
    itemsCount?: IntNullableWithAggregatesFilter<"Pedido"> | number | null
    materialId?: StringNullableWithAggregatesFilter<"Pedido"> | string | null
    materialLabel?: StringNullableWithAggregatesFilter<"Pedido"> | string | null
    payload?: JsonNullableWithAggregatesFilter<"Pedido">
    createdAt?: DateTimeWithAggregatesFilter<"Pedido"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Pedido"> | Date | string
  }

  export type CotizacionWhereInput = {
    AND?: CotizacionWhereInput | CotizacionWhereInput[]
    OR?: CotizacionWhereInput[]
    NOT?: CotizacionWhereInput | CotizacionWhereInput[]
    id?: IntFilter<"Cotizacion"> | number
    clienteId?: IntNullableFilter<"Cotizacion"> | number | null
    canal?: StringFilter<"Cotizacion"> | string
    estado?: StringFilter<"Cotizacion"> | string
    totalEstimado?: DecimalNullableFilter<"Cotizacion"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullableFilter<"Cotizacion">
    createdAt?: DateTimeFilter<"Cotizacion"> | Date | string
    cliente?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    items?: CotizacionItemListRelationFilter
    asignaciones?: AsignacionListRelationFilter
    notificaciones?: CotizacionNotificacionListRelationFilter
  }

  export type CotizacionOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrderInput | SortOrder
    canal?: SortOrder
    estado?: SortOrder
    totalEstimado?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    cliente?: UserOrderByWithRelationInput
    items?: CotizacionItemOrderByRelationAggregateInput
    asignaciones?: AsignacionOrderByRelationAggregateInput
    notificaciones?: CotizacionNotificacionOrderByRelationAggregateInput
  }

  export type CotizacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CotizacionWhereInput | CotizacionWhereInput[]
    OR?: CotizacionWhereInput[]
    NOT?: CotizacionWhereInput | CotizacionWhereInput[]
    clienteId?: IntNullableFilter<"Cotizacion"> | number | null
    canal?: StringFilter<"Cotizacion"> | string
    estado?: StringFilter<"Cotizacion"> | string
    totalEstimado?: DecimalNullableFilter<"Cotizacion"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullableFilter<"Cotizacion">
    createdAt?: DateTimeFilter<"Cotizacion"> | Date | string
    cliente?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    items?: CotizacionItemListRelationFilter
    asignaciones?: AsignacionListRelationFilter
    notificaciones?: CotizacionNotificacionListRelationFilter
  }, "id">

  export type CotizacionOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrderInput | SortOrder
    canal?: SortOrder
    estado?: SortOrder
    totalEstimado?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CotizacionCountOrderByAggregateInput
    _avg?: CotizacionAvgOrderByAggregateInput
    _max?: CotizacionMaxOrderByAggregateInput
    _min?: CotizacionMinOrderByAggregateInput
    _sum?: CotizacionSumOrderByAggregateInput
  }

  export type CotizacionScalarWhereWithAggregatesInput = {
    AND?: CotizacionScalarWhereWithAggregatesInput | CotizacionScalarWhereWithAggregatesInput[]
    OR?: CotizacionScalarWhereWithAggregatesInput[]
    NOT?: CotizacionScalarWhereWithAggregatesInput | CotizacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cotizacion"> | number
    clienteId?: IntNullableWithAggregatesFilter<"Cotizacion"> | number | null
    canal?: StringWithAggregatesFilter<"Cotizacion"> | string
    estado?: StringWithAggregatesFilter<"Cotizacion"> | string
    totalEstimado?: DecimalNullableWithAggregatesFilter<"Cotizacion"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Cotizacion">
    createdAt?: DateTimeWithAggregatesFilter<"Cotizacion"> | Date | string
  }

  export type CotizacionItemWhereInput = {
    AND?: CotizacionItemWhereInput | CotizacionItemWhereInput[]
    OR?: CotizacionItemWhereInput[]
    NOT?: CotizacionItemWhereInput | CotizacionItemWhereInput[]
    id?: IntFilter<"CotizacionItem"> | number
    cotizacionId?: IntFilter<"CotizacionItem"> | number
    producto?: StringFilter<"CotizacionItem"> | string
    variantes?: JsonNullableFilter<"CotizacionItem">
    cantidad?: IntFilter<"CotizacionItem"> | number
    notas?: StringNullableFilter<"CotizacionItem"> | string | null
    archivos?: JsonNullableFilter<"CotizacionItem">
    coberturaInk?: DecimalNullableFilter<"CotizacionItem"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"CotizacionItem"> | Date | string
    cotizacion?: XOR<CotizacionRelationFilter, CotizacionWhereInput>
  }

  export type CotizacionItemOrderByWithRelationInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    producto?: SortOrder
    variantes?: SortOrderInput | SortOrder
    cantidad?: SortOrder
    notas?: SortOrderInput | SortOrder
    archivos?: SortOrderInput | SortOrder
    coberturaInk?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    cotizacion?: CotizacionOrderByWithRelationInput
  }

  export type CotizacionItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CotizacionItemWhereInput | CotizacionItemWhereInput[]
    OR?: CotizacionItemWhereInput[]
    NOT?: CotizacionItemWhereInput | CotizacionItemWhereInput[]
    cotizacionId?: IntFilter<"CotizacionItem"> | number
    producto?: StringFilter<"CotizacionItem"> | string
    variantes?: JsonNullableFilter<"CotizacionItem">
    cantidad?: IntFilter<"CotizacionItem"> | number
    notas?: StringNullableFilter<"CotizacionItem"> | string | null
    archivos?: JsonNullableFilter<"CotizacionItem">
    coberturaInk?: DecimalNullableFilter<"CotizacionItem"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"CotizacionItem"> | Date | string
    cotizacion?: XOR<CotizacionRelationFilter, CotizacionWhereInput>
  }, "id">

  export type CotizacionItemOrderByWithAggregationInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    producto?: SortOrder
    variantes?: SortOrderInput | SortOrder
    cantidad?: SortOrder
    notas?: SortOrderInput | SortOrder
    archivos?: SortOrderInput | SortOrder
    coberturaInk?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CotizacionItemCountOrderByAggregateInput
    _avg?: CotizacionItemAvgOrderByAggregateInput
    _max?: CotizacionItemMaxOrderByAggregateInput
    _min?: CotizacionItemMinOrderByAggregateInput
    _sum?: CotizacionItemSumOrderByAggregateInput
  }

  export type CotizacionItemScalarWhereWithAggregatesInput = {
    AND?: CotizacionItemScalarWhereWithAggregatesInput | CotizacionItemScalarWhereWithAggregatesInput[]
    OR?: CotizacionItemScalarWhereWithAggregatesInput[]
    NOT?: CotizacionItemScalarWhereWithAggregatesInput | CotizacionItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CotizacionItem"> | number
    cotizacionId?: IntWithAggregatesFilter<"CotizacionItem"> | number
    producto?: StringWithAggregatesFilter<"CotizacionItem"> | string
    variantes?: JsonNullableWithAggregatesFilter<"CotizacionItem">
    cantidad?: IntWithAggregatesFilter<"CotizacionItem"> | number
    notas?: StringNullableWithAggregatesFilter<"CotizacionItem"> | string | null
    archivos?: JsonNullableWithAggregatesFilter<"CotizacionItem">
    coberturaInk?: DecimalNullableWithAggregatesFilter<"CotizacionItem"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CotizacionItem"> | Date | string
  }

  export type AsignacionWhereInput = {
    AND?: AsignacionWhereInput | AsignacionWhereInput[]
    OR?: AsignacionWhereInput[]
    NOT?: AsignacionWhereInput | AsignacionWhereInput[]
    id?: IntFilter<"Asignacion"> | number
    cotizacionId?: IntFilter<"Asignacion"> | number
    operadorId?: IntNullableFilter<"Asignacion"> | number | null
    estado?: StringFilter<"Asignacion"> | string
    slaMinutos?: IntFilter<"Asignacion"> | number
    vencimiento?: DateTimeFilter<"Asignacion"> | Date | string
    createdAt?: DateTimeFilter<"Asignacion"> | Date | string
    aceptadoEn?: DateTimeNullableFilter<"Asignacion"> | Date | string | null
    resueltoEn?: DateTimeNullableFilter<"Asignacion"> | Date | string | null
    cotizacion?: XOR<CotizacionRelationFilter, CotizacionWhereInput>
    operador?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AsignacionOrderByWithRelationInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    operadorId?: SortOrderInput | SortOrder
    estado?: SortOrder
    slaMinutos?: SortOrder
    vencimiento?: SortOrder
    createdAt?: SortOrder
    aceptadoEn?: SortOrderInput | SortOrder
    resueltoEn?: SortOrderInput | SortOrder
    cotizacion?: CotizacionOrderByWithRelationInput
    operador?: UserOrderByWithRelationInput
  }

  export type AsignacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AsignacionWhereInput | AsignacionWhereInput[]
    OR?: AsignacionWhereInput[]
    NOT?: AsignacionWhereInput | AsignacionWhereInput[]
    cotizacionId?: IntFilter<"Asignacion"> | number
    operadorId?: IntNullableFilter<"Asignacion"> | number | null
    estado?: StringFilter<"Asignacion"> | string
    slaMinutos?: IntFilter<"Asignacion"> | number
    vencimiento?: DateTimeFilter<"Asignacion"> | Date | string
    createdAt?: DateTimeFilter<"Asignacion"> | Date | string
    aceptadoEn?: DateTimeNullableFilter<"Asignacion"> | Date | string | null
    resueltoEn?: DateTimeNullableFilter<"Asignacion"> | Date | string | null
    cotizacion?: XOR<CotizacionRelationFilter, CotizacionWhereInput>
    operador?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AsignacionOrderByWithAggregationInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    operadorId?: SortOrderInput | SortOrder
    estado?: SortOrder
    slaMinutos?: SortOrder
    vencimiento?: SortOrder
    createdAt?: SortOrder
    aceptadoEn?: SortOrderInput | SortOrder
    resueltoEn?: SortOrderInput | SortOrder
    _count?: AsignacionCountOrderByAggregateInput
    _avg?: AsignacionAvgOrderByAggregateInput
    _max?: AsignacionMaxOrderByAggregateInput
    _min?: AsignacionMinOrderByAggregateInput
    _sum?: AsignacionSumOrderByAggregateInput
  }

  export type AsignacionScalarWhereWithAggregatesInput = {
    AND?: AsignacionScalarWhereWithAggregatesInput | AsignacionScalarWhereWithAggregatesInput[]
    OR?: AsignacionScalarWhereWithAggregatesInput[]
    NOT?: AsignacionScalarWhereWithAggregatesInput | AsignacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Asignacion"> | number
    cotizacionId?: IntWithAggregatesFilter<"Asignacion"> | number
    operadorId?: IntNullableWithAggregatesFilter<"Asignacion"> | number | null
    estado?: StringWithAggregatesFilter<"Asignacion"> | string
    slaMinutos?: IntWithAggregatesFilter<"Asignacion"> | number
    vencimiento?: DateTimeWithAggregatesFilter<"Asignacion"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Asignacion"> | Date | string
    aceptadoEn?: DateTimeNullableWithAggregatesFilter<"Asignacion"> | Date | string | null
    resueltoEn?: DateTimeNullableWithAggregatesFilter<"Asignacion"> | Date | string | null
  }

  export type CotizacionNotificacionWhereInput = {
    AND?: CotizacionNotificacionWhereInput | CotizacionNotificacionWhereInput[]
    OR?: CotizacionNotificacionWhereInput[]
    NOT?: CotizacionNotificacionWhereInput | CotizacionNotificacionWhereInput[]
    id?: IntFilter<"CotizacionNotificacion"> | number
    cotizacionId?: IntFilter<"CotizacionNotificacion"> | number
    canal?: StringFilter<"CotizacionNotificacion"> | string
    destino?: StringFilter<"CotizacionNotificacion"> | string
    payload?: JsonNullableFilter<"CotizacionNotificacion">
    enviadoEn?: DateTimeNullableFilter<"CotizacionNotificacion"> | Date | string | null
    estado?: StringFilter<"CotizacionNotificacion"> | string
    createdAt?: DateTimeFilter<"CotizacionNotificacion"> | Date | string
    cotizacion?: XOR<CotizacionRelationFilter, CotizacionWhereInput>
  }

  export type CotizacionNotificacionOrderByWithRelationInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    canal?: SortOrder
    destino?: SortOrder
    payload?: SortOrderInput | SortOrder
    enviadoEn?: SortOrderInput | SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    cotizacion?: CotizacionOrderByWithRelationInput
  }

  export type CotizacionNotificacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CotizacionNotificacionWhereInput | CotizacionNotificacionWhereInput[]
    OR?: CotizacionNotificacionWhereInput[]
    NOT?: CotizacionNotificacionWhereInput | CotizacionNotificacionWhereInput[]
    cotizacionId?: IntFilter<"CotizacionNotificacion"> | number
    canal?: StringFilter<"CotizacionNotificacion"> | string
    destino?: StringFilter<"CotizacionNotificacion"> | string
    payload?: JsonNullableFilter<"CotizacionNotificacion">
    enviadoEn?: DateTimeNullableFilter<"CotizacionNotificacion"> | Date | string | null
    estado?: StringFilter<"CotizacionNotificacion"> | string
    createdAt?: DateTimeFilter<"CotizacionNotificacion"> | Date | string
    cotizacion?: XOR<CotizacionRelationFilter, CotizacionWhereInput>
  }, "id">

  export type CotizacionNotificacionOrderByWithAggregationInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    canal?: SortOrder
    destino?: SortOrder
    payload?: SortOrderInput | SortOrder
    enviadoEn?: SortOrderInput | SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    _count?: CotizacionNotificacionCountOrderByAggregateInput
    _avg?: CotizacionNotificacionAvgOrderByAggregateInput
    _max?: CotizacionNotificacionMaxOrderByAggregateInput
    _min?: CotizacionNotificacionMinOrderByAggregateInput
    _sum?: CotizacionNotificacionSumOrderByAggregateInput
  }

  export type CotizacionNotificacionScalarWhereWithAggregatesInput = {
    AND?: CotizacionNotificacionScalarWhereWithAggregatesInput | CotizacionNotificacionScalarWhereWithAggregatesInput[]
    OR?: CotizacionNotificacionScalarWhereWithAggregatesInput[]
    NOT?: CotizacionNotificacionScalarWhereWithAggregatesInput | CotizacionNotificacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CotizacionNotificacion"> | number
    cotizacionId?: IntWithAggregatesFilter<"CotizacionNotificacion"> | number
    canal?: StringWithAggregatesFilter<"CotizacionNotificacion"> | string
    destino?: StringWithAggregatesFilter<"CotizacionNotificacion"> | string
    payload?: JsonNullableWithAggregatesFilter<"CotizacionNotificacion">
    enviadoEn?: DateTimeNullableWithAggregatesFilter<"CotizacionNotificacion"> | Date | string | null
    estado?: StringWithAggregatesFilter<"CotizacionNotificacion"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CotizacionNotificacion"> | Date | string
  }

  export type OfertaWhereInput = {
    AND?: OfertaWhereInput | OfertaWhereInput[]
    OR?: OfertaWhereInput[]
    NOT?: OfertaWhereInput | OfertaWhereInput[]
    id?: IntFilter<"Oferta"> | number
    titulo?: StringFilter<"Oferta"> | string
    descripcion?: StringNullableFilter<"Oferta"> | string | null
    imageUrl?: StringNullableFilter<"Oferta"> | string | null
    link?: StringNullableFilter<"Oferta"> | string | null
    activo?: BoolFilter<"Oferta"> | boolean
    prioridad?: IntFilter<"Oferta"> | number
    itemId?: IntNullableFilter<"Oferta"> | number | null
    startAt?: DateTimeNullableFilter<"Oferta"> | Date | string | null
    endAt?: DateTimeNullableFilter<"Oferta"> | Date | string | null
    createdAt?: DateTimeFilter<"Oferta"> | Date | string
    updatedAt?: DateTimeFilter<"Oferta"> | Date | string
    inventario?: XOR<InventoryItemNullableRelationFilter, InventoryItemWhereInput> | null
  }

  export type OfertaOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    activo?: SortOrder
    prioridad?: SortOrder
    itemId?: SortOrderInput | SortOrder
    startAt?: SortOrderInput | SortOrder
    endAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    inventario?: InventoryItemOrderByWithRelationInput
  }

  export type OfertaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OfertaWhereInput | OfertaWhereInput[]
    OR?: OfertaWhereInput[]
    NOT?: OfertaWhereInput | OfertaWhereInput[]
    titulo?: StringFilter<"Oferta"> | string
    descripcion?: StringNullableFilter<"Oferta"> | string | null
    imageUrl?: StringNullableFilter<"Oferta"> | string | null
    link?: StringNullableFilter<"Oferta"> | string | null
    activo?: BoolFilter<"Oferta"> | boolean
    prioridad?: IntFilter<"Oferta"> | number
    itemId?: IntNullableFilter<"Oferta"> | number | null
    startAt?: DateTimeNullableFilter<"Oferta"> | Date | string | null
    endAt?: DateTimeNullableFilter<"Oferta"> | Date | string | null
    createdAt?: DateTimeFilter<"Oferta"> | Date | string
    updatedAt?: DateTimeFilter<"Oferta"> | Date | string
    inventario?: XOR<InventoryItemNullableRelationFilter, InventoryItemWhereInput> | null
  }, "id">

  export type OfertaOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    activo?: SortOrder
    prioridad?: SortOrder
    itemId?: SortOrderInput | SortOrder
    startAt?: SortOrderInput | SortOrder
    endAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OfertaCountOrderByAggregateInput
    _avg?: OfertaAvgOrderByAggregateInput
    _max?: OfertaMaxOrderByAggregateInput
    _min?: OfertaMinOrderByAggregateInput
    _sum?: OfertaSumOrderByAggregateInput
  }

  export type OfertaScalarWhereWithAggregatesInput = {
    AND?: OfertaScalarWhereWithAggregatesInput | OfertaScalarWhereWithAggregatesInput[]
    OR?: OfertaScalarWhereWithAggregatesInput[]
    NOT?: OfertaScalarWhereWithAggregatesInput | OfertaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Oferta"> | number
    titulo?: StringWithAggregatesFilter<"Oferta"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Oferta"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Oferta"> | string | null
    link?: StringNullableWithAggregatesFilter<"Oferta"> | string | null
    activo?: BoolWithAggregatesFilter<"Oferta"> | boolean
    prioridad?: IntWithAggregatesFilter<"Oferta"> | number
    itemId?: IntNullableWithAggregatesFilter<"Oferta"> | number | null
    startAt?: DateTimeNullableWithAggregatesFilter<"Oferta"> | Date | string | null
    endAt?: DateTimeNullableWithAggregatesFilter<"Oferta"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Oferta"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Oferta"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resets?: PasswordResetCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedOneWithoutUserInput
    pedidos?: PedidoCreateNestedManyWithoutUserInput
    cotizacionesCliente?: CotizacionCreateNestedManyWithoutClienteInput
    asignacionesOperador?: AsignacionCreateNestedManyWithoutOperadorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedOneWithoutUserInput
    pedidos?: PedidoUncheckedCreateNestedManyWithoutUserInput
    cotizacionesCliente?: CotizacionUncheckedCreateNestedManyWithoutClienteInput
    asignacionesOperador?: AsignacionUncheckedCreateNestedManyWithoutOperadorInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resets?: PasswordResetUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateOneWithoutUserNestedInput
    pedidos?: PedidoUpdateManyWithoutUserNestedInput
    cotizacionesCliente?: CotizacionUpdateManyWithoutClienteNestedInput
    asignacionesOperador?: AsignacionUpdateManyWithoutOperadorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateOneWithoutUserNestedInput
    pedidos?: PedidoUncheckedUpdateManyWithoutUserNestedInput
    cotizacionesCliente?: CotizacionUncheckedUpdateManyWithoutClienteNestedInput
    asignacionesOperador?: AsignacionUncheckedUpdateManyWithoutOperadorNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetCreateInput = {
    tokenHash: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutResetsInput
  }

  export type PasswordResetUncheckedCreateInput = {
    id?: number
    userId: number
    tokenHash: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type PasswordResetUpdateInput = {
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResetsNestedInput
  }

  export type PasswordResetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetCreateManyInput = {
    id?: number
    userId: number
    tokenHash: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type PasswordResetUpdateManyMutationInput = {
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteCreateInput = {
    rut?: string | null
    nombre_contacto?: string | null
    email?: string | null
    telefono?: string | null
    direccion?: string | null
    comuna?: string | null
    ciudad?: string | null
    creado_en?: Date | string
    user: UserCreateNestedOneWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id_cliente?: number
    rut?: string | null
    nombre_contacto?: string | null
    email?: string | null
    telefono?: string | null
    direccion?: string | null
    comuna?: string | null
    ciudad?: string | null
    id_usuario: number
    creado_en?: Date | string
  }

  export type ClienteUpdateInput = {
    rut?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_contacto?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    comuna?: NullableStringFieldUpdateOperationsInput | string | null
    ciudad?: NullableStringFieldUpdateOperationsInput | string | null
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    rut?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_contacto?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    comuna?: NullableStringFieldUpdateOperationsInput | string | null
    ciudad?: NullableStringFieldUpdateOperationsInput | string | null
    id_usuario?: IntFieldUpdateOperationsInput | number
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteCreateManyInput = {
    id_cliente?: number
    rut?: string | null
    nombre_contacto?: string | null
    email?: string | null
    telefono?: string | null
    direccion?: string | null
    comuna?: string | null
    ciudad?: string | null
    id_usuario: number
    creado_en?: Date | string
  }

  export type ClienteUpdateManyMutationInput = {
    rut?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_contacto?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    comuna?: NullableStringFieldUpdateOperationsInput | string | null
    ciudad?: NullableStringFieldUpdateOperationsInput | string | null
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    rut?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_contacto?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    comuna?: NullableStringFieldUpdateOperationsInput | string | null
    ciudad?: NullableStringFieldUpdateOperationsInput | string | null
    id_usuario?: IntFieldUpdateOperationsInput | number
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemCreateInput = {
    code: string
    name: string
    itemType: string
    color: string
    provider: string
    quantity?: number
    priceWeb?: number
    priceStore?: number
    priceWsp?: number
    umbralBajoStock?: number
    qrRaw?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ofertas?: OfertaCreateNestedManyWithoutInventarioInput
  }

  export type InventoryItemUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    itemType: string
    color: string
    provider: string
    quantity?: number
    priceWeb?: number
    priceStore?: number
    priceWsp?: number
    umbralBajoStock?: number
    qrRaw?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ofertas?: OfertaUncheckedCreateNestedManyWithoutInventarioInput
  }

  export type InventoryItemUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    priceWeb?: IntFieldUpdateOperationsInput | number
    priceStore?: IntFieldUpdateOperationsInput | number
    priceWsp?: IntFieldUpdateOperationsInput | number
    umbralBajoStock?: IntFieldUpdateOperationsInput | number
    qrRaw?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ofertas?: OfertaUpdateManyWithoutInventarioNestedInput
  }

  export type InventoryItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    priceWeb?: IntFieldUpdateOperationsInput | number
    priceStore?: IntFieldUpdateOperationsInput | number
    priceWsp?: IntFieldUpdateOperationsInput | number
    umbralBajoStock?: IntFieldUpdateOperationsInput | number
    qrRaw?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ofertas?: OfertaUncheckedUpdateManyWithoutInventarioNestedInput
  }

  export type InventoryItemCreateManyInput = {
    id?: number
    code: string
    name: string
    itemType: string
    color: string
    provider: string
    quantity?: number
    priceWeb?: number
    priceStore?: number
    priceWsp?: number
    umbralBajoStock?: number
    qrRaw?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    priceWeb?: IntFieldUpdateOperationsInput | number
    priceStore?: IntFieldUpdateOperationsInput | number
    priceWsp?: IntFieldUpdateOperationsInput | number
    umbralBajoStock?: IntFieldUpdateOperationsInput | number
    qrRaw?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    priceWeb?: IntFieldUpdateOperationsInput | number
    priceStore?: IntFieldUpdateOperationsInput | number
    priceWsp?: IntFieldUpdateOperationsInput | number
    umbralBajoStock?: IntFieldUpdateOperationsInput | number
    qrRaw?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoCreateInput = {
    clienteEmail?: string | null
    clienteNombre?: string | null
    estado?: string
    notificado?: boolean
    total?: number | null
    itemsCount?: number | null
    materialId?: string | null
    materialLabel?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutPedidosInput
  }

  export type PedidoUncheckedCreateInput = {
    id?: number
    userId?: number | null
    clienteEmail?: string | null
    clienteNombre?: string | null
    estado?: string
    notificado?: boolean
    total?: number | null
    itemsCount?: number | null
    materialId?: string | null
    materialLabel?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PedidoUpdateInput = {
    clienteEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clienteNombre?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    notificado?: BoolFieldUpdateOperationsInput | boolean
    total?: NullableIntFieldUpdateOperationsInput | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    materialId?: NullableStringFieldUpdateOperationsInput | string | null
    materialLabel?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutPedidosNestedInput
  }

  export type PedidoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    clienteEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clienteNombre?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    notificado?: BoolFieldUpdateOperationsInput | boolean
    total?: NullableIntFieldUpdateOperationsInput | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    materialId?: NullableStringFieldUpdateOperationsInput | string | null
    materialLabel?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoCreateManyInput = {
    id?: number
    userId?: number | null
    clienteEmail?: string | null
    clienteNombre?: string | null
    estado?: string
    notificado?: boolean
    total?: number | null
    itemsCount?: number | null
    materialId?: string | null
    materialLabel?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PedidoUpdateManyMutationInput = {
    clienteEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clienteNombre?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    notificado?: BoolFieldUpdateOperationsInput | boolean
    total?: NullableIntFieldUpdateOperationsInput | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    materialId?: NullableStringFieldUpdateOperationsInput | string | null
    materialLabel?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    clienteEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clienteNombre?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    notificado?: BoolFieldUpdateOperationsInput | boolean
    total?: NullableIntFieldUpdateOperationsInput | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    materialId?: NullableStringFieldUpdateOperationsInput | string | null
    materialLabel?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionCreateInput = {
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    cliente?: UserCreateNestedOneWithoutCotizacionesClienteInput
    items?: CotizacionItemCreateNestedManyWithoutCotizacionInput
    asignaciones?: AsignacionCreateNestedManyWithoutCotizacionInput
    notificaciones?: CotizacionNotificacionCreateNestedManyWithoutCotizacionInput
  }

  export type CotizacionUncheckedCreateInput = {
    id?: number
    clienteId?: number | null
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    items?: CotizacionItemUncheckedCreateNestedManyWithoutCotizacionInput
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutCotizacionInput
    notificaciones?: CotizacionNotificacionUncheckedCreateNestedManyWithoutCotizacionInput
  }

  export type CotizacionUpdateInput = {
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: UserUpdateOneWithoutCotizacionesClienteNestedInput
    items?: CotizacionItemUpdateManyWithoutCotizacionNestedInput
    asignaciones?: AsignacionUpdateManyWithoutCotizacionNestedInput
    notificaciones?: CotizacionNotificacionUpdateManyWithoutCotizacionNestedInput
  }

  export type CotizacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CotizacionItemUncheckedUpdateManyWithoutCotizacionNestedInput
    asignaciones?: AsignacionUncheckedUpdateManyWithoutCotizacionNestedInput
    notificaciones?: CotizacionNotificacionUncheckedUpdateManyWithoutCotizacionNestedInput
  }

  export type CotizacionCreateManyInput = {
    id?: number
    clienteId?: number | null
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CotizacionUpdateManyMutationInput = {
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionItemCreateInput = {
    producto: string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: number
    notas?: string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    cotizacion: CotizacionCreateNestedOneWithoutItemsInput
  }

  export type CotizacionItemUncheckedCreateInput = {
    id?: number
    cotizacionId: number
    producto: string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: number
    notas?: string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type CotizacionItemUpdateInput = {
    producto?: StringFieldUpdateOperationsInput | string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: IntFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cotizacion?: CotizacionUpdateOneRequiredWithoutItemsNestedInput
  }

  export type CotizacionItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cotizacionId?: IntFieldUpdateOperationsInput | number
    producto?: StringFieldUpdateOperationsInput | string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: IntFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionItemCreateManyInput = {
    id?: number
    cotizacionId: number
    producto: string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: number
    notas?: string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type CotizacionItemUpdateManyMutationInput = {
    producto?: StringFieldUpdateOperationsInput | string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: IntFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cotizacionId?: IntFieldUpdateOperationsInput | number
    producto?: StringFieldUpdateOperationsInput | string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: IntFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AsignacionCreateInput = {
    estado?: string
    slaMinutos?: number
    vencimiento: Date | string
    createdAt?: Date | string
    aceptadoEn?: Date | string | null
    resueltoEn?: Date | string | null
    cotizacion: CotizacionCreateNestedOneWithoutAsignacionesInput
    operador?: UserCreateNestedOneWithoutAsignacionesOperadorInput
  }

  export type AsignacionUncheckedCreateInput = {
    id?: number
    cotizacionId: number
    operadorId?: number | null
    estado?: string
    slaMinutos?: number
    vencimiento: Date | string
    createdAt?: Date | string
    aceptadoEn?: Date | string | null
    resueltoEn?: Date | string | null
  }

  export type AsignacionUpdateInput = {
    estado?: StringFieldUpdateOperationsInput | string
    slaMinutos?: IntFieldUpdateOperationsInput | number
    vencimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aceptadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resueltoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cotizacion?: CotizacionUpdateOneRequiredWithoutAsignacionesNestedInput
    operador?: UserUpdateOneWithoutAsignacionesOperadorNestedInput
  }

  export type AsignacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cotizacionId?: IntFieldUpdateOperationsInput | number
    operadorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: StringFieldUpdateOperationsInput | string
    slaMinutos?: IntFieldUpdateOperationsInput | number
    vencimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aceptadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resueltoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AsignacionCreateManyInput = {
    id?: number
    cotizacionId: number
    operadorId?: number | null
    estado?: string
    slaMinutos?: number
    vencimiento: Date | string
    createdAt?: Date | string
    aceptadoEn?: Date | string | null
    resueltoEn?: Date | string | null
  }

  export type AsignacionUpdateManyMutationInput = {
    estado?: StringFieldUpdateOperationsInput | string
    slaMinutos?: IntFieldUpdateOperationsInput | number
    vencimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aceptadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resueltoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AsignacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cotizacionId?: IntFieldUpdateOperationsInput | number
    operadorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: StringFieldUpdateOperationsInput | string
    slaMinutos?: IntFieldUpdateOperationsInput | number
    vencimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aceptadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resueltoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CotizacionNotificacionCreateInput = {
    canal: string
    destino: string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: Date | string | null
    estado: string
    createdAt?: Date | string
    cotizacion: CotizacionCreateNestedOneWithoutNotificacionesInput
  }

  export type CotizacionNotificacionUncheckedCreateInput = {
    id?: number
    cotizacionId: number
    canal: string
    destino: string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: Date | string | null
    estado: string
    createdAt?: Date | string
  }

  export type CotizacionNotificacionUpdateInput = {
    canal?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cotizacion?: CotizacionUpdateOneRequiredWithoutNotificacionesNestedInput
  }

  export type CotizacionNotificacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cotizacionId?: IntFieldUpdateOperationsInput | number
    canal?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionNotificacionCreateManyInput = {
    id?: number
    cotizacionId: number
    canal: string
    destino: string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: Date | string | null
    estado: string
    createdAt?: Date | string
  }

  export type CotizacionNotificacionUpdateManyMutationInput = {
    canal?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionNotificacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cotizacionId?: IntFieldUpdateOperationsInput | number
    canal?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfertaCreateInput = {
    titulo: string
    descripcion?: string | null
    imageUrl?: string | null
    link?: string | null
    activo?: boolean
    prioridad?: number
    startAt?: Date | string | null
    endAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inventario?: InventoryItemCreateNestedOneWithoutOfertasInput
  }

  export type OfertaUncheckedCreateInput = {
    id?: number
    titulo: string
    descripcion?: string | null
    imageUrl?: string | null
    link?: string | null
    activo?: boolean
    prioridad?: number
    itemId?: number | null
    startAt?: Date | string | null
    endAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfertaUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    prioridad?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventario?: InventoryItemUpdateOneWithoutOfertasNestedInput
  }

  export type OfertaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    prioridad?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfertaCreateManyInput = {
    id?: number
    titulo: string
    descripcion?: string | null
    imageUrl?: string | null
    link?: string | null
    activo?: boolean
    prioridad?: number
    itemId?: number | null
    startAt?: Date | string | null
    endAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfertaUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    prioridad?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfertaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    prioridad?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PasswordResetListRelationFilter = {
    every?: PasswordResetWhereInput
    some?: PasswordResetWhereInput
    none?: PasswordResetWhereInput
  }

  export type ClienteNullableRelationFilter = {
    is?: ClienteWhereInput | null
    isNot?: ClienteWhereInput | null
  }

  export type PedidoListRelationFilter = {
    every?: PedidoWhereInput
    some?: PedidoWhereInput
    none?: PedidoWhereInput
  }

  export type CotizacionListRelationFilter = {
    every?: CotizacionWhereInput
    some?: CotizacionWhereInput
    none?: CotizacionWhereInput
  }

  export type AsignacionListRelationFilter = {
    every?: AsignacionWhereInput
    some?: AsignacionWhereInput
    none?: AsignacionWhereInput
  }

  export type PasswordResetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PedidoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CotizacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AsignacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PasswordResetCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PasswordResetMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ClienteCountOrderByAggregateInput = {
    id_cliente?: SortOrder
    rut?: SortOrder
    nombre_contacto?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    comuna?: SortOrder
    ciudad?: SortOrder
    id_usuario?: SortOrder
    creado_en?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id_cliente?: SortOrder
    id_usuario?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id_cliente?: SortOrder
    rut?: SortOrder
    nombre_contacto?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    comuna?: SortOrder
    ciudad?: SortOrder
    id_usuario?: SortOrder
    creado_en?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id_cliente?: SortOrder
    rut?: SortOrder
    nombre_contacto?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    comuna?: SortOrder
    ciudad?: SortOrder
    id_usuario?: SortOrder
    creado_en?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id_cliente?: SortOrder
    id_usuario?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type OfertaListRelationFilter = {
    every?: OfertaWhereInput
    some?: OfertaWhereInput
    none?: OfertaWhereInput
  }

  export type OfertaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryItemCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    itemType?: SortOrder
    color?: SortOrder
    provider?: SortOrder
    quantity?: SortOrder
    priceWeb?: SortOrder
    priceStore?: SortOrder
    priceWsp?: SortOrder
    umbralBajoStock?: SortOrder
    qrRaw?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemAvgOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    priceWeb?: SortOrder
    priceStore?: SortOrder
    priceWsp?: SortOrder
    umbralBajoStock?: SortOrder
  }

  export type InventoryItemMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    itemType?: SortOrder
    color?: SortOrder
    provider?: SortOrder
    quantity?: SortOrder
    priceWeb?: SortOrder
    priceStore?: SortOrder
    priceWsp?: SortOrder
    umbralBajoStock?: SortOrder
    qrRaw?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    itemType?: SortOrder
    color?: SortOrder
    provider?: SortOrder
    quantity?: SortOrder
    priceWeb?: SortOrder
    priceStore?: SortOrder
    priceWsp?: SortOrder
    umbralBajoStock?: SortOrder
    qrRaw?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemSumOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    priceWeb?: SortOrder
    priceStore?: SortOrder
    priceWsp?: SortOrder
    umbralBajoStock?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type PedidoCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clienteEmail?: SortOrder
    clienteNombre?: SortOrder
    estado?: SortOrder
    notificado?: SortOrder
    total?: SortOrder
    itemsCount?: SortOrder
    materialId?: SortOrder
    materialLabel?: SortOrder
    payload?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PedidoAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    total?: SortOrder
    itemsCount?: SortOrder
  }

  export type PedidoMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clienteEmail?: SortOrder
    clienteNombre?: SortOrder
    estado?: SortOrder
    notificado?: SortOrder
    total?: SortOrder
    itemsCount?: SortOrder
    materialId?: SortOrder
    materialLabel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PedidoMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clienteEmail?: SortOrder
    clienteNombre?: SortOrder
    estado?: SortOrder
    notificado?: SortOrder
    total?: SortOrder
    itemsCount?: SortOrder
    materialId?: SortOrder
    materialLabel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PedidoSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    total?: SortOrder
    itemsCount?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type CotizacionItemListRelationFilter = {
    every?: CotizacionItemWhereInput
    some?: CotizacionItemWhereInput
    none?: CotizacionItemWhereInput
  }

  export type CotizacionNotificacionListRelationFilter = {
    every?: CotizacionNotificacionWhereInput
    some?: CotizacionNotificacionWhereInput
    none?: CotizacionNotificacionWhereInput
  }

  export type CotizacionItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CotizacionNotificacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CotizacionCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    canal?: SortOrder
    estado?: SortOrder
    totalEstimado?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type CotizacionAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    totalEstimado?: SortOrder
  }

  export type CotizacionMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    canal?: SortOrder
    estado?: SortOrder
    totalEstimado?: SortOrder
    createdAt?: SortOrder
  }

  export type CotizacionMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    canal?: SortOrder
    estado?: SortOrder
    totalEstimado?: SortOrder
    createdAt?: SortOrder
  }

  export type CotizacionSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    totalEstimado?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type CotizacionRelationFilter = {
    is?: CotizacionWhereInput
    isNot?: CotizacionWhereInput
  }

  export type CotizacionItemCountOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    producto?: SortOrder
    variantes?: SortOrder
    cantidad?: SortOrder
    notas?: SortOrder
    archivos?: SortOrder
    coberturaInk?: SortOrder
    createdAt?: SortOrder
  }

  export type CotizacionItemAvgOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    cantidad?: SortOrder
    coberturaInk?: SortOrder
  }

  export type CotizacionItemMaxOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    producto?: SortOrder
    cantidad?: SortOrder
    notas?: SortOrder
    coberturaInk?: SortOrder
    createdAt?: SortOrder
  }

  export type CotizacionItemMinOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    producto?: SortOrder
    cantidad?: SortOrder
    notas?: SortOrder
    coberturaInk?: SortOrder
    createdAt?: SortOrder
  }

  export type CotizacionItemSumOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    cantidad?: SortOrder
    coberturaInk?: SortOrder
  }

  export type AsignacionCountOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    operadorId?: SortOrder
    estado?: SortOrder
    slaMinutos?: SortOrder
    vencimiento?: SortOrder
    createdAt?: SortOrder
    aceptadoEn?: SortOrder
    resueltoEn?: SortOrder
  }

  export type AsignacionAvgOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    operadorId?: SortOrder
    slaMinutos?: SortOrder
  }

  export type AsignacionMaxOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    operadorId?: SortOrder
    estado?: SortOrder
    slaMinutos?: SortOrder
    vencimiento?: SortOrder
    createdAt?: SortOrder
    aceptadoEn?: SortOrder
    resueltoEn?: SortOrder
  }

  export type AsignacionMinOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    operadorId?: SortOrder
    estado?: SortOrder
    slaMinutos?: SortOrder
    vencimiento?: SortOrder
    createdAt?: SortOrder
    aceptadoEn?: SortOrder
    resueltoEn?: SortOrder
  }

  export type AsignacionSumOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    operadorId?: SortOrder
    slaMinutos?: SortOrder
  }

  export type CotizacionNotificacionCountOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    canal?: SortOrder
    destino?: SortOrder
    payload?: SortOrder
    enviadoEn?: SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
  }

  export type CotizacionNotificacionAvgOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
  }

  export type CotizacionNotificacionMaxOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    canal?: SortOrder
    destino?: SortOrder
    enviadoEn?: SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
  }

  export type CotizacionNotificacionMinOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
    canal?: SortOrder
    destino?: SortOrder
    enviadoEn?: SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
  }

  export type CotizacionNotificacionSumOrderByAggregateInput = {
    id?: SortOrder
    cotizacionId?: SortOrder
  }

  export type InventoryItemNullableRelationFilter = {
    is?: InventoryItemWhereInput | null
    isNot?: InventoryItemWhereInput | null
  }

  export type OfertaCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    imageUrl?: SortOrder
    link?: SortOrder
    activo?: SortOrder
    prioridad?: SortOrder
    itemId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfertaAvgOrderByAggregateInput = {
    id?: SortOrder
    prioridad?: SortOrder
    itemId?: SortOrder
  }

  export type OfertaMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    imageUrl?: SortOrder
    link?: SortOrder
    activo?: SortOrder
    prioridad?: SortOrder
    itemId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfertaMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    imageUrl?: SortOrder
    link?: SortOrder
    activo?: SortOrder
    prioridad?: SortOrder
    itemId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfertaSumOrderByAggregateInput = {
    id?: SortOrder
    prioridad?: SortOrder
    itemId?: SortOrder
  }

  export type PasswordResetCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
  }

  export type ClienteCreateNestedOneWithoutUserInput = {
    create?: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutUserInput
    connect?: ClienteWhereUniqueInput
  }

  export type PedidoCreateNestedManyWithoutUserInput = {
    create?: XOR<PedidoCreateWithoutUserInput, PedidoUncheckedCreateWithoutUserInput> | PedidoCreateWithoutUserInput[] | PedidoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutUserInput | PedidoCreateOrConnectWithoutUserInput[]
    createMany?: PedidoCreateManyUserInputEnvelope
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
  }

  export type CotizacionCreateNestedManyWithoutClienteInput = {
    create?: XOR<CotizacionCreateWithoutClienteInput, CotizacionUncheckedCreateWithoutClienteInput> | CotizacionCreateWithoutClienteInput[] | CotizacionUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CotizacionCreateOrConnectWithoutClienteInput | CotizacionCreateOrConnectWithoutClienteInput[]
    createMany?: CotizacionCreateManyClienteInputEnvelope
    connect?: CotizacionWhereUniqueInput | CotizacionWhereUniqueInput[]
  }

  export type AsignacionCreateNestedManyWithoutOperadorInput = {
    create?: XOR<AsignacionCreateWithoutOperadorInput, AsignacionUncheckedCreateWithoutOperadorInput> | AsignacionCreateWithoutOperadorInput[] | AsignacionUncheckedCreateWithoutOperadorInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutOperadorInput | AsignacionCreateOrConnectWithoutOperadorInput[]
    createMany?: AsignacionCreateManyOperadorInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type PasswordResetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
  }

  export type ClienteUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutUserInput
    connect?: ClienteWhereUniqueInput
  }

  export type PedidoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PedidoCreateWithoutUserInput, PedidoUncheckedCreateWithoutUserInput> | PedidoCreateWithoutUserInput[] | PedidoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutUserInput | PedidoCreateOrConnectWithoutUserInput[]
    createMany?: PedidoCreateManyUserInputEnvelope
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
  }

  export type CotizacionUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<CotizacionCreateWithoutClienteInput, CotizacionUncheckedCreateWithoutClienteInput> | CotizacionCreateWithoutClienteInput[] | CotizacionUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CotizacionCreateOrConnectWithoutClienteInput | CotizacionCreateOrConnectWithoutClienteInput[]
    createMany?: CotizacionCreateManyClienteInputEnvelope
    connect?: CotizacionWhereUniqueInput | CotizacionWhereUniqueInput[]
  }

  export type AsignacionUncheckedCreateNestedManyWithoutOperadorInput = {
    create?: XOR<AsignacionCreateWithoutOperadorInput, AsignacionUncheckedCreateWithoutOperadorInput> | AsignacionCreateWithoutOperadorInput[] | AsignacionUncheckedCreateWithoutOperadorInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutOperadorInput | AsignacionCreateOrConnectWithoutOperadorInput[]
    createMany?: AsignacionCreateManyOperadorInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PasswordResetUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetUpsertWithWhereUniqueWithoutUserInput | PasswordResetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    set?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    disconnect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    delete?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    update?: PasswordResetUpdateWithWhereUniqueWithoutUserInput | PasswordResetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetUpdateManyWithWhereWithoutUserInput | PasswordResetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
  }

  export type ClienteUpdateOneWithoutUserNestedInput = {
    create?: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutUserInput
    upsert?: ClienteUpsertWithoutUserInput
    disconnect?: ClienteWhereInput | boolean
    delete?: ClienteWhereInput | boolean
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutUserInput, ClienteUpdateWithoutUserInput>, ClienteUncheckedUpdateWithoutUserInput>
  }

  export type PedidoUpdateManyWithoutUserNestedInput = {
    create?: XOR<PedidoCreateWithoutUserInput, PedidoUncheckedCreateWithoutUserInput> | PedidoCreateWithoutUserInput[] | PedidoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutUserInput | PedidoCreateOrConnectWithoutUserInput[]
    upsert?: PedidoUpsertWithWhereUniqueWithoutUserInput | PedidoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PedidoCreateManyUserInputEnvelope
    set?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    disconnect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    delete?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    update?: PedidoUpdateWithWhereUniqueWithoutUserInput | PedidoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PedidoUpdateManyWithWhereWithoutUserInput | PedidoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
  }

  export type CotizacionUpdateManyWithoutClienteNestedInput = {
    create?: XOR<CotizacionCreateWithoutClienteInput, CotizacionUncheckedCreateWithoutClienteInput> | CotizacionCreateWithoutClienteInput[] | CotizacionUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CotizacionCreateOrConnectWithoutClienteInput | CotizacionCreateOrConnectWithoutClienteInput[]
    upsert?: CotizacionUpsertWithWhereUniqueWithoutClienteInput | CotizacionUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: CotizacionCreateManyClienteInputEnvelope
    set?: CotizacionWhereUniqueInput | CotizacionWhereUniqueInput[]
    disconnect?: CotizacionWhereUniqueInput | CotizacionWhereUniqueInput[]
    delete?: CotizacionWhereUniqueInput | CotizacionWhereUniqueInput[]
    connect?: CotizacionWhereUniqueInput | CotizacionWhereUniqueInput[]
    update?: CotizacionUpdateWithWhereUniqueWithoutClienteInput | CotizacionUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: CotizacionUpdateManyWithWhereWithoutClienteInput | CotizacionUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: CotizacionScalarWhereInput | CotizacionScalarWhereInput[]
  }

  export type AsignacionUpdateManyWithoutOperadorNestedInput = {
    create?: XOR<AsignacionCreateWithoutOperadorInput, AsignacionUncheckedCreateWithoutOperadorInput> | AsignacionCreateWithoutOperadorInput[] | AsignacionUncheckedCreateWithoutOperadorInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutOperadorInput | AsignacionCreateOrConnectWithoutOperadorInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutOperadorInput | AsignacionUpsertWithWhereUniqueWithoutOperadorInput[]
    createMany?: AsignacionCreateManyOperadorInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutOperadorInput | AsignacionUpdateWithWhereUniqueWithoutOperadorInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutOperadorInput | AsignacionUpdateManyWithWhereWithoutOperadorInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PasswordResetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetUpsertWithWhereUniqueWithoutUserInput | PasswordResetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    set?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    disconnect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    delete?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    update?: PasswordResetUpdateWithWhereUniqueWithoutUserInput | PasswordResetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetUpdateManyWithWhereWithoutUserInput | PasswordResetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
  }

  export type ClienteUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutUserInput
    upsert?: ClienteUpsertWithoutUserInput
    disconnect?: ClienteWhereInput | boolean
    delete?: ClienteWhereInput | boolean
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutUserInput, ClienteUpdateWithoutUserInput>, ClienteUncheckedUpdateWithoutUserInput>
  }

  export type PedidoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PedidoCreateWithoutUserInput, PedidoUncheckedCreateWithoutUserInput> | PedidoCreateWithoutUserInput[] | PedidoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutUserInput | PedidoCreateOrConnectWithoutUserInput[]
    upsert?: PedidoUpsertWithWhereUniqueWithoutUserInput | PedidoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PedidoCreateManyUserInputEnvelope
    set?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    disconnect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    delete?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    update?: PedidoUpdateWithWhereUniqueWithoutUserInput | PedidoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PedidoUpdateManyWithWhereWithoutUserInput | PedidoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
  }

  export type CotizacionUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<CotizacionCreateWithoutClienteInput, CotizacionUncheckedCreateWithoutClienteInput> | CotizacionCreateWithoutClienteInput[] | CotizacionUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CotizacionCreateOrConnectWithoutClienteInput | CotizacionCreateOrConnectWithoutClienteInput[]
    upsert?: CotizacionUpsertWithWhereUniqueWithoutClienteInput | CotizacionUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: CotizacionCreateManyClienteInputEnvelope
    set?: CotizacionWhereUniqueInput | CotizacionWhereUniqueInput[]
    disconnect?: CotizacionWhereUniqueInput | CotizacionWhereUniqueInput[]
    delete?: CotizacionWhereUniqueInput | CotizacionWhereUniqueInput[]
    connect?: CotizacionWhereUniqueInput | CotizacionWhereUniqueInput[]
    update?: CotizacionUpdateWithWhereUniqueWithoutClienteInput | CotizacionUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: CotizacionUpdateManyWithWhereWithoutClienteInput | CotizacionUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: CotizacionScalarWhereInput | CotizacionScalarWhereInput[]
  }

  export type AsignacionUncheckedUpdateManyWithoutOperadorNestedInput = {
    create?: XOR<AsignacionCreateWithoutOperadorInput, AsignacionUncheckedCreateWithoutOperadorInput> | AsignacionCreateWithoutOperadorInput[] | AsignacionUncheckedCreateWithoutOperadorInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutOperadorInput | AsignacionCreateOrConnectWithoutOperadorInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutOperadorInput | AsignacionUpsertWithWhereUniqueWithoutOperadorInput[]
    createMany?: AsignacionCreateManyOperadorInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutOperadorInput | AsignacionUpdateWithWhereUniqueWithoutOperadorInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutOperadorInput | AsignacionUpdateManyWithWhereWithoutOperadorInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutResetsInput = {
    create?: XOR<UserCreateWithoutResetsInput, UserUncheckedCreateWithoutResetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutResetsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutResetsNestedInput = {
    create?: XOR<UserCreateWithoutResetsInput, UserUncheckedCreateWithoutResetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutResetsInput
    upsert?: UserUpsertWithoutResetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResetsInput, UserUpdateWithoutResetsInput>, UserUncheckedUpdateWithoutResetsInput>
  }

  export type UserCreateNestedOneWithoutClienteInput = {
    create?: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput>
    connectOrCreate?: UserCreateOrConnectWithoutClienteInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutClienteNestedInput = {
    create?: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput>
    connectOrCreate?: UserCreateOrConnectWithoutClienteInput
    upsert?: UserUpsertWithoutClienteInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClienteInput, UserUpdateWithoutClienteInput>, UserUncheckedUpdateWithoutClienteInput>
  }

  export type OfertaCreateNestedManyWithoutInventarioInput = {
    create?: XOR<OfertaCreateWithoutInventarioInput, OfertaUncheckedCreateWithoutInventarioInput> | OfertaCreateWithoutInventarioInput[] | OfertaUncheckedCreateWithoutInventarioInput[]
    connectOrCreate?: OfertaCreateOrConnectWithoutInventarioInput | OfertaCreateOrConnectWithoutInventarioInput[]
    createMany?: OfertaCreateManyInventarioInputEnvelope
    connect?: OfertaWhereUniqueInput | OfertaWhereUniqueInput[]
  }

  export type OfertaUncheckedCreateNestedManyWithoutInventarioInput = {
    create?: XOR<OfertaCreateWithoutInventarioInput, OfertaUncheckedCreateWithoutInventarioInput> | OfertaCreateWithoutInventarioInput[] | OfertaUncheckedCreateWithoutInventarioInput[]
    connectOrCreate?: OfertaCreateOrConnectWithoutInventarioInput | OfertaCreateOrConnectWithoutInventarioInput[]
    createMany?: OfertaCreateManyInventarioInputEnvelope
    connect?: OfertaWhereUniqueInput | OfertaWhereUniqueInput[]
  }

  export type OfertaUpdateManyWithoutInventarioNestedInput = {
    create?: XOR<OfertaCreateWithoutInventarioInput, OfertaUncheckedCreateWithoutInventarioInput> | OfertaCreateWithoutInventarioInput[] | OfertaUncheckedCreateWithoutInventarioInput[]
    connectOrCreate?: OfertaCreateOrConnectWithoutInventarioInput | OfertaCreateOrConnectWithoutInventarioInput[]
    upsert?: OfertaUpsertWithWhereUniqueWithoutInventarioInput | OfertaUpsertWithWhereUniqueWithoutInventarioInput[]
    createMany?: OfertaCreateManyInventarioInputEnvelope
    set?: OfertaWhereUniqueInput | OfertaWhereUniqueInput[]
    disconnect?: OfertaWhereUniqueInput | OfertaWhereUniqueInput[]
    delete?: OfertaWhereUniqueInput | OfertaWhereUniqueInput[]
    connect?: OfertaWhereUniqueInput | OfertaWhereUniqueInput[]
    update?: OfertaUpdateWithWhereUniqueWithoutInventarioInput | OfertaUpdateWithWhereUniqueWithoutInventarioInput[]
    updateMany?: OfertaUpdateManyWithWhereWithoutInventarioInput | OfertaUpdateManyWithWhereWithoutInventarioInput[]
    deleteMany?: OfertaScalarWhereInput | OfertaScalarWhereInput[]
  }

  export type OfertaUncheckedUpdateManyWithoutInventarioNestedInput = {
    create?: XOR<OfertaCreateWithoutInventarioInput, OfertaUncheckedCreateWithoutInventarioInput> | OfertaCreateWithoutInventarioInput[] | OfertaUncheckedCreateWithoutInventarioInput[]
    connectOrCreate?: OfertaCreateOrConnectWithoutInventarioInput | OfertaCreateOrConnectWithoutInventarioInput[]
    upsert?: OfertaUpsertWithWhereUniqueWithoutInventarioInput | OfertaUpsertWithWhereUniqueWithoutInventarioInput[]
    createMany?: OfertaCreateManyInventarioInputEnvelope
    set?: OfertaWhereUniqueInput | OfertaWhereUniqueInput[]
    disconnect?: OfertaWhereUniqueInput | OfertaWhereUniqueInput[]
    delete?: OfertaWhereUniqueInput | OfertaWhereUniqueInput[]
    connect?: OfertaWhereUniqueInput | OfertaWhereUniqueInput[]
    update?: OfertaUpdateWithWhereUniqueWithoutInventarioInput | OfertaUpdateWithWhereUniqueWithoutInventarioInput[]
    updateMany?: OfertaUpdateManyWithWhereWithoutInventarioInput | OfertaUpdateManyWithWhereWithoutInventarioInput[]
    deleteMany?: OfertaScalarWhereInput | OfertaScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPedidosInput = {
    create?: XOR<UserCreateWithoutPedidosInput, UserUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPedidosInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutPedidosNestedInput = {
    create?: XOR<UserCreateWithoutPedidosInput, UserUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPedidosInput
    upsert?: UserUpsertWithoutPedidosInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPedidosInput, UserUpdateWithoutPedidosInput>, UserUncheckedUpdateWithoutPedidosInput>
  }

  export type UserCreateNestedOneWithoutCotizacionesClienteInput = {
    create?: XOR<UserCreateWithoutCotizacionesClienteInput, UserUncheckedCreateWithoutCotizacionesClienteInput>
    connectOrCreate?: UserCreateOrConnectWithoutCotizacionesClienteInput
    connect?: UserWhereUniqueInput
  }

  export type CotizacionItemCreateNestedManyWithoutCotizacionInput = {
    create?: XOR<CotizacionItemCreateWithoutCotizacionInput, CotizacionItemUncheckedCreateWithoutCotizacionInput> | CotizacionItemCreateWithoutCotizacionInput[] | CotizacionItemUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: CotizacionItemCreateOrConnectWithoutCotizacionInput | CotizacionItemCreateOrConnectWithoutCotizacionInput[]
    createMany?: CotizacionItemCreateManyCotizacionInputEnvelope
    connect?: CotizacionItemWhereUniqueInput | CotizacionItemWhereUniqueInput[]
  }

  export type AsignacionCreateNestedManyWithoutCotizacionInput = {
    create?: XOR<AsignacionCreateWithoutCotizacionInput, AsignacionUncheckedCreateWithoutCotizacionInput> | AsignacionCreateWithoutCotizacionInput[] | AsignacionUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutCotizacionInput | AsignacionCreateOrConnectWithoutCotizacionInput[]
    createMany?: AsignacionCreateManyCotizacionInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type CotizacionNotificacionCreateNestedManyWithoutCotizacionInput = {
    create?: XOR<CotizacionNotificacionCreateWithoutCotizacionInput, CotizacionNotificacionUncheckedCreateWithoutCotizacionInput> | CotizacionNotificacionCreateWithoutCotizacionInput[] | CotizacionNotificacionUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: CotizacionNotificacionCreateOrConnectWithoutCotizacionInput | CotizacionNotificacionCreateOrConnectWithoutCotizacionInput[]
    createMany?: CotizacionNotificacionCreateManyCotizacionInputEnvelope
    connect?: CotizacionNotificacionWhereUniqueInput | CotizacionNotificacionWhereUniqueInput[]
  }

  export type CotizacionItemUncheckedCreateNestedManyWithoutCotizacionInput = {
    create?: XOR<CotizacionItemCreateWithoutCotizacionInput, CotizacionItemUncheckedCreateWithoutCotizacionInput> | CotizacionItemCreateWithoutCotizacionInput[] | CotizacionItemUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: CotizacionItemCreateOrConnectWithoutCotizacionInput | CotizacionItemCreateOrConnectWithoutCotizacionInput[]
    createMany?: CotizacionItemCreateManyCotizacionInputEnvelope
    connect?: CotizacionItemWhereUniqueInput | CotizacionItemWhereUniqueInput[]
  }

  export type AsignacionUncheckedCreateNestedManyWithoutCotizacionInput = {
    create?: XOR<AsignacionCreateWithoutCotizacionInput, AsignacionUncheckedCreateWithoutCotizacionInput> | AsignacionCreateWithoutCotizacionInput[] | AsignacionUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutCotizacionInput | AsignacionCreateOrConnectWithoutCotizacionInput[]
    createMany?: AsignacionCreateManyCotizacionInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type CotizacionNotificacionUncheckedCreateNestedManyWithoutCotizacionInput = {
    create?: XOR<CotizacionNotificacionCreateWithoutCotizacionInput, CotizacionNotificacionUncheckedCreateWithoutCotizacionInput> | CotizacionNotificacionCreateWithoutCotizacionInput[] | CotizacionNotificacionUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: CotizacionNotificacionCreateOrConnectWithoutCotizacionInput | CotizacionNotificacionCreateOrConnectWithoutCotizacionInput[]
    createMany?: CotizacionNotificacionCreateManyCotizacionInputEnvelope
    connect?: CotizacionNotificacionWhereUniqueInput | CotizacionNotificacionWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneWithoutCotizacionesClienteNestedInput = {
    create?: XOR<UserCreateWithoutCotizacionesClienteInput, UserUncheckedCreateWithoutCotizacionesClienteInput>
    connectOrCreate?: UserCreateOrConnectWithoutCotizacionesClienteInput
    upsert?: UserUpsertWithoutCotizacionesClienteInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCotizacionesClienteInput, UserUpdateWithoutCotizacionesClienteInput>, UserUncheckedUpdateWithoutCotizacionesClienteInput>
  }

  export type CotizacionItemUpdateManyWithoutCotizacionNestedInput = {
    create?: XOR<CotizacionItemCreateWithoutCotizacionInput, CotizacionItemUncheckedCreateWithoutCotizacionInput> | CotizacionItemCreateWithoutCotizacionInput[] | CotizacionItemUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: CotizacionItemCreateOrConnectWithoutCotizacionInput | CotizacionItemCreateOrConnectWithoutCotizacionInput[]
    upsert?: CotizacionItemUpsertWithWhereUniqueWithoutCotizacionInput | CotizacionItemUpsertWithWhereUniqueWithoutCotizacionInput[]
    createMany?: CotizacionItemCreateManyCotizacionInputEnvelope
    set?: CotizacionItemWhereUniqueInput | CotizacionItemWhereUniqueInput[]
    disconnect?: CotizacionItemWhereUniqueInput | CotizacionItemWhereUniqueInput[]
    delete?: CotizacionItemWhereUniqueInput | CotizacionItemWhereUniqueInput[]
    connect?: CotizacionItemWhereUniqueInput | CotizacionItemWhereUniqueInput[]
    update?: CotizacionItemUpdateWithWhereUniqueWithoutCotizacionInput | CotizacionItemUpdateWithWhereUniqueWithoutCotizacionInput[]
    updateMany?: CotizacionItemUpdateManyWithWhereWithoutCotizacionInput | CotizacionItemUpdateManyWithWhereWithoutCotizacionInput[]
    deleteMany?: CotizacionItemScalarWhereInput | CotizacionItemScalarWhereInput[]
  }

  export type AsignacionUpdateManyWithoutCotizacionNestedInput = {
    create?: XOR<AsignacionCreateWithoutCotizacionInput, AsignacionUncheckedCreateWithoutCotizacionInput> | AsignacionCreateWithoutCotizacionInput[] | AsignacionUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutCotizacionInput | AsignacionCreateOrConnectWithoutCotizacionInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutCotizacionInput | AsignacionUpsertWithWhereUniqueWithoutCotizacionInput[]
    createMany?: AsignacionCreateManyCotizacionInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutCotizacionInput | AsignacionUpdateWithWhereUniqueWithoutCotizacionInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutCotizacionInput | AsignacionUpdateManyWithWhereWithoutCotizacionInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type CotizacionNotificacionUpdateManyWithoutCotizacionNestedInput = {
    create?: XOR<CotizacionNotificacionCreateWithoutCotizacionInput, CotizacionNotificacionUncheckedCreateWithoutCotizacionInput> | CotizacionNotificacionCreateWithoutCotizacionInput[] | CotizacionNotificacionUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: CotizacionNotificacionCreateOrConnectWithoutCotizacionInput | CotizacionNotificacionCreateOrConnectWithoutCotizacionInput[]
    upsert?: CotizacionNotificacionUpsertWithWhereUniqueWithoutCotizacionInput | CotizacionNotificacionUpsertWithWhereUniqueWithoutCotizacionInput[]
    createMany?: CotizacionNotificacionCreateManyCotizacionInputEnvelope
    set?: CotizacionNotificacionWhereUniqueInput | CotizacionNotificacionWhereUniqueInput[]
    disconnect?: CotizacionNotificacionWhereUniqueInput | CotizacionNotificacionWhereUniqueInput[]
    delete?: CotizacionNotificacionWhereUniqueInput | CotizacionNotificacionWhereUniqueInput[]
    connect?: CotizacionNotificacionWhereUniqueInput | CotizacionNotificacionWhereUniqueInput[]
    update?: CotizacionNotificacionUpdateWithWhereUniqueWithoutCotizacionInput | CotizacionNotificacionUpdateWithWhereUniqueWithoutCotizacionInput[]
    updateMany?: CotizacionNotificacionUpdateManyWithWhereWithoutCotizacionInput | CotizacionNotificacionUpdateManyWithWhereWithoutCotizacionInput[]
    deleteMany?: CotizacionNotificacionScalarWhereInput | CotizacionNotificacionScalarWhereInput[]
  }

  export type CotizacionItemUncheckedUpdateManyWithoutCotizacionNestedInput = {
    create?: XOR<CotizacionItemCreateWithoutCotizacionInput, CotizacionItemUncheckedCreateWithoutCotizacionInput> | CotizacionItemCreateWithoutCotizacionInput[] | CotizacionItemUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: CotizacionItemCreateOrConnectWithoutCotizacionInput | CotizacionItemCreateOrConnectWithoutCotizacionInput[]
    upsert?: CotizacionItemUpsertWithWhereUniqueWithoutCotizacionInput | CotizacionItemUpsertWithWhereUniqueWithoutCotizacionInput[]
    createMany?: CotizacionItemCreateManyCotizacionInputEnvelope
    set?: CotizacionItemWhereUniqueInput | CotizacionItemWhereUniqueInput[]
    disconnect?: CotizacionItemWhereUniqueInput | CotizacionItemWhereUniqueInput[]
    delete?: CotizacionItemWhereUniqueInput | CotizacionItemWhereUniqueInput[]
    connect?: CotizacionItemWhereUniqueInput | CotizacionItemWhereUniqueInput[]
    update?: CotizacionItemUpdateWithWhereUniqueWithoutCotizacionInput | CotizacionItemUpdateWithWhereUniqueWithoutCotizacionInput[]
    updateMany?: CotizacionItemUpdateManyWithWhereWithoutCotizacionInput | CotizacionItemUpdateManyWithWhereWithoutCotizacionInput[]
    deleteMany?: CotizacionItemScalarWhereInput | CotizacionItemScalarWhereInput[]
  }

  export type AsignacionUncheckedUpdateManyWithoutCotizacionNestedInput = {
    create?: XOR<AsignacionCreateWithoutCotizacionInput, AsignacionUncheckedCreateWithoutCotizacionInput> | AsignacionCreateWithoutCotizacionInput[] | AsignacionUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutCotizacionInput | AsignacionCreateOrConnectWithoutCotizacionInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutCotizacionInput | AsignacionUpsertWithWhereUniqueWithoutCotizacionInput[]
    createMany?: AsignacionCreateManyCotizacionInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutCotizacionInput | AsignacionUpdateWithWhereUniqueWithoutCotizacionInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutCotizacionInput | AsignacionUpdateManyWithWhereWithoutCotizacionInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type CotizacionNotificacionUncheckedUpdateManyWithoutCotizacionNestedInput = {
    create?: XOR<CotizacionNotificacionCreateWithoutCotizacionInput, CotizacionNotificacionUncheckedCreateWithoutCotizacionInput> | CotizacionNotificacionCreateWithoutCotizacionInput[] | CotizacionNotificacionUncheckedCreateWithoutCotizacionInput[]
    connectOrCreate?: CotizacionNotificacionCreateOrConnectWithoutCotizacionInput | CotizacionNotificacionCreateOrConnectWithoutCotizacionInput[]
    upsert?: CotizacionNotificacionUpsertWithWhereUniqueWithoutCotizacionInput | CotizacionNotificacionUpsertWithWhereUniqueWithoutCotizacionInput[]
    createMany?: CotizacionNotificacionCreateManyCotizacionInputEnvelope
    set?: CotizacionNotificacionWhereUniqueInput | CotizacionNotificacionWhereUniqueInput[]
    disconnect?: CotizacionNotificacionWhereUniqueInput | CotizacionNotificacionWhereUniqueInput[]
    delete?: CotizacionNotificacionWhereUniqueInput | CotizacionNotificacionWhereUniqueInput[]
    connect?: CotizacionNotificacionWhereUniqueInput | CotizacionNotificacionWhereUniqueInput[]
    update?: CotizacionNotificacionUpdateWithWhereUniqueWithoutCotizacionInput | CotizacionNotificacionUpdateWithWhereUniqueWithoutCotizacionInput[]
    updateMany?: CotizacionNotificacionUpdateManyWithWhereWithoutCotizacionInput | CotizacionNotificacionUpdateManyWithWhereWithoutCotizacionInput[]
    deleteMany?: CotizacionNotificacionScalarWhereInput | CotizacionNotificacionScalarWhereInput[]
  }

  export type CotizacionCreateNestedOneWithoutItemsInput = {
    create?: XOR<CotizacionCreateWithoutItemsInput, CotizacionUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CotizacionCreateOrConnectWithoutItemsInput
    connect?: CotizacionWhereUniqueInput
  }

  export type CotizacionUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<CotizacionCreateWithoutItemsInput, CotizacionUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CotizacionCreateOrConnectWithoutItemsInput
    upsert?: CotizacionUpsertWithoutItemsInput
    connect?: CotizacionWhereUniqueInput
    update?: XOR<XOR<CotizacionUpdateToOneWithWhereWithoutItemsInput, CotizacionUpdateWithoutItemsInput>, CotizacionUncheckedUpdateWithoutItemsInput>
  }

  export type CotizacionCreateNestedOneWithoutAsignacionesInput = {
    create?: XOR<CotizacionCreateWithoutAsignacionesInput, CotizacionUncheckedCreateWithoutAsignacionesInput>
    connectOrCreate?: CotizacionCreateOrConnectWithoutAsignacionesInput
    connect?: CotizacionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAsignacionesOperadorInput = {
    create?: XOR<UserCreateWithoutAsignacionesOperadorInput, UserUncheckedCreateWithoutAsignacionesOperadorInput>
    connectOrCreate?: UserCreateOrConnectWithoutAsignacionesOperadorInput
    connect?: UserWhereUniqueInput
  }

  export type CotizacionUpdateOneRequiredWithoutAsignacionesNestedInput = {
    create?: XOR<CotizacionCreateWithoutAsignacionesInput, CotizacionUncheckedCreateWithoutAsignacionesInput>
    connectOrCreate?: CotizacionCreateOrConnectWithoutAsignacionesInput
    upsert?: CotizacionUpsertWithoutAsignacionesInput
    connect?: CotizacionWhereUniqueInput
    update?: XOR<XOR<CotizacionUpdateToOneWithWhereWithoutAsignacionesInput, CotizacionUpdateWithoutAsignacionesInput>, CotizacionUncheckedUpdateWithoutAsignacionesInput>
  }

  export type UserUpdateOneWithoutAsignacionesOperadorNestedInput = {
    create?: XOR<UserCreateWithoutAsignacionesOperadorInput, UserUncheckedCreateWithoutAsignacionesOperadorInput>
    connectOrCreate?: UserCreateOrConnectWithoutAsignacionesOperadorInput
    upsert?: UserUpsertWithoutAsignacionesOperadorInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAsignacionesOperadorInput, UserUpdateWithoutAsignacionesOperadorInput>, UserUncheckedUpdateWithoutAsignacionesOperadorInput>
  }

  export type CotizacionCreateNestedOneWithoutNotificacionesInput = {
    create?: XOR<CotizacionCreateWithoutNotificacionesInput, CotizacionUncheckedCreateWithoutNotificacionesInput>
    connectOrCreate?: CotizacionCreateOrConnectWithoutNotificacionesInput
    connect?: CotizacionWhereUniqueInput
  }

  export type CotizacionUpdateOneRequiredWithoutNotificacionesNestedInput = {
    create?: XOR<CotizacionCreateWithoutNotificacionesInput, CotizacionUncheckedCreateWithoutNotificacionesInput>
    connectOrCreate?: CotizacionCreateOrConnectWithoutNotificacionesInput
    upsert?: CotizacionUpsertWithoutNotificacionesInput
    connect?: CotizacionWhereUniqueInput
    update?: XOR<XOR<CotizacionUpdateToOneWithWhereWithoutNotificacionesInput, CotizacionUpdateWithoutNotificacionesInput>, CotizacionUncheckedUpdateWithoutNotificacionesInput>
  }

  export type InventoryItemCreateNestedOneWithoutOfertasInput = {
    create?: XOR<InventoryItemCreateWithoutOfertasInput, InventoryItemUncheckedCreateWithoutOfertasInput>
    connectOrCreate?: InventoryItemCreateOrConnectWithoutOfertasInput
    connect?: InventoryItemWhereUniqueInput
  }

  export type InventoryItemUpdateOneWithoutOfertasNestedInput = {
    create?: XOR<InventoryItemCreateWithoutOfertasInput, InventoryItemUncheckedCreateWithoutOfertasInput>
    connectOrCreate?: InventoryItemCreateOrConnectWithoutOfertasInput
    upsert?: InventoryItemUpsertWithoutOfertasInput
    disconnect?: InventoryItemWhereInput | boolean
    delete?: InventoryItemWhereInput | boolean
    connect?: InventoryItemWhereUniqueInput
    update?: XOR<XOR<InventoryItemUpdateToOneWithWhereWithoutOfertasInput, InventoryItemUpdateWithoutOfertasInput>, InventoryItemUncheckedUpdateWithoutOfertasInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type PasswordResetCreateWithoutUserInput = {
    tokenHash: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type PasswordResetUncheckedCreateWithoutUserInput = {
    id?: number
    tokenHash: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type PasswordResetCreateOrConnectWithoutUserInput = {
    where: PasswordResetWhereUniqueInput
    create: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetCreateManyUserInputEnvelope = {
    data: PasswordResetCreateManyUserInput | PasswordResetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ClienteCreateWithoutUserInput = {
    rut?: string | null
    nombre_contacto?: string | null
    email?: string | null
    telefono?: string | null
    direccion?: string | null
    comuna?: string | null
    ciudad?: string | null
    creado_en?: Date | string
  }

  export type ClienteUncheckedCreateWithoutUserInput = {
    id_cliente?: number
    rut?: string | null
    nombre_contacto?: string | null
    email?: string | null
    telefono?: string | null
    direccion?: string | null
    comuna?: string | null
    ciudad?: string | null
    creado_en?: Date | string
  }

  export type ClienteCreateOrConnectWithoutUserInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput>
  }

  export type PedidoCreateWithoutUserInput = {
    clienteEmail?: string | null
    clienteNombre?: string | null
    estado?: string
    notificado?: boolean
    total?: number | null
    itemsCount?: number | null
    materialId?: string | null
    materialLabel?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PedidoUncheckedCreateWithoutUserInput = {
    id?: number
    clienteEmail?: string | null
    clienteNombre?: string | null
    estado?: string
    notificado?: boolean
    total?: number | null
    itemsCount?: number | null
    materialId?: string | null
    materialLabel?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PedidoCreateOrConnectWithoutUserInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutUserInput, PedidoUncheckedCreateWithoutUserInput>
  }

  export type PedidoCreateManyUserInputEnvelope = {
    data: PedidoCreateManyUserInput | PedidoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CotizacionCreateWithoutClienteInput = {
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    items?: CotizacionItemCreateNestedManyWithoutCotizacionInput
    asignaciones?: AsignacionCreateNestedManyWithoutCotizacionInput
    notificaciones?: CotizacionNotificacionCreateNestedManyWithoutCotizacionInput
  }

  export type CotizacionUncheckedCreateWithoutClienteInput = {
    id?: number
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    items?: CotizacionItemUncheckedCreateNestedManyWithoutCotizacionInput
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutCotizacionInput
    notificaciones?: CotizacionNotificacionUncheckedCreateNestedManyWithoutCotizacionInput
  }

  export type CotizacionCreateOrConnectWithoutClienteInput = {
    where: CotizacionWhereUniqueInput
    create: XOR<CotizacionCreateWithoutClienteInput, CotizacionUncheckedCreateWithoutClienteInput>
  }

  export type CotizacionCreateManyClienteInputEnvelope = {
    data: CotizacionCreateManyClienteInput | CotizacionCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type AsignacionCreateWithoutOperadorInput = {
    estado?: string
    slaMinutos?: number
    vencimiento: Date | string
    createdAt?: Date | string
    aceptadoEn?: Date | string | null
    resueltoEn?: Date | string | null
    cotizacion: CotizacionCreateNestedOneWithoutAsignacionesInput
  }

  export type AsignacionUncheckedCreateWithoutOperadorInput = {
    id?: number
    cotizacionId: number
    estado?: string
    slaMinutos?: number
    vencimiento: Date | string
    createdAt?: Date | string
    aceptadoEn?: Date | string | null
    resueltoEn?: Date | string | null
  }

  export type AsignacionCreateOrConnectWithoutOperadorInput = {
    where: AsignacionWhereUniqueInput
    create: XOR<AsignacionCreateWithoutOperadorInput, AsignacionUncheckedCreateWithoutOperadorInput>
  }

  export type AsignacionCreateManyOperadorInputEnvelope = {
    data: AsignacionCreateManyOperadorInput | AsignacionCreateManyOperadorInput[]
    skipDuplicates?: boolean
  }

  export type PasswordResetUpsertWithWhereUniqueWithoutUserInput = {
    where: PasswordResetWhereUniqueInput
    update: XOR<PasswordResetUpdateWithoutUserInput, PasswordResetUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetUpdateWithWhereUniqueWithoutUserInput = {
    where: PasswordResetWhereUniqueInput
    data: XOR<PasswordResetUpdateWithoutUserInput, PasswordResetUncheckedUpdateWithoutUserInput>
  }

  export type PasswordResetUpdateManyWithWhereWithoutUserInput = {
    where: PasswordResetScalarWhereInput
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyWithoutUserInput>
  }

  export type PasswordResetScalarWhereInput = {
    AND?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
    OR?: PasswordResetScalarWhereInput[]
    NOT?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
    id?: IntFilter<"PasswordReset"> | number
    userId?: IntFilter<"PasswordReset"> | number
    tokenHash?: StringFilter<"PasswordReset"> | string
    expiresAt?: DateTimeFilter<"PasswordReset"> | Date | string
    usedAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
    createdAt?: DateTimeFilter<"PasswordReset"> | Date | string
  }

  export type ClienteUpsertWithoutUserInput = {
    update: XOR<ClienteUpdateWithoutUserInput, ClienteUncheckedUpdateWithoutUserInput>
    create: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutUserInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutUserInput, ClienteUncheckedUpdateWithoutUserInput>
  }

  export type ClienteUpdateWithoutUserInput = {
    rut?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_contacto?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    comuna?: NullableStringFieldUpdateOperationsInput | string | null
    ciudad?: NullableStringFieldUpdateOperationsInput | string | null
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteUncheckedUpdateWithoutUserInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    rut?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_contacto?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    comuna?: NullableStringFieldUpdateOperationsInput | string | null
    ciudad?: NullableStringFieldUpdateOperationsInput | string | null
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoUpsertWithWhereUniqueWithoutUserInput = {
    where: PedidoWhereUniqueInput
    update: XOR<PedidoUpdateWithoutUserInput, PedidoUncheckedUpdateWithoutUserInput>
    create: XOR<PedidoCreateWithoutUserInput, PedidoUncheckedCreateWithoutUserInput>
  }

  export type PedidoUpdateWithWhereUniqueWithoutUserInput = {
    where: PedidoWhereUniqueInput
    data: XOR<PedidoUpdateWithoutUserInput, PedidoUncheckedUpdateWithoutUserInput>
  }

  export type PedidoUpdateManyWithWhereWithoutUserInput = {
    where: PedidoScalarWhereInput
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyWithoutUserInput>
  }

  export type PedidoScalarWhereInput = {
    AND?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
    OR?: PedidoScalarWhereInput[]
    NOT?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
    id?: IntFilter<"Pedido"> | number
    userId?: IntNullableFilter<"Pedido"> | number | null
    clienteEmail?: StringNullableFilter<"Pedido"> | string | null
    clienteNombre?: StringNullableFilter<"Pedido"> | string | null
    estado?: StringFilter<"Pedido"> | string
    notificado?: BoolFilter<"Pedido"> | boolean
    total?: IntNullableFilter<"Pedido"> | number | null
    itemsCount?: IntNullableFilter<"Pedido"> | number | null
    materialId?: StringNullableFilter<"Pedido"> | string | null
    materialLabel?: StringNullableFilter<"Pedido"> | string | null
    payload?: JsonNullableFilter<"Pedido">
    createdAt?: DateTimeFilter<"Pedido"> | Date | string
    updatedAt?: DateTimeFilter<"Pedido"> | Date | string
  }

  export type CotizacionUpsertWithWhereUniqueWithoutClienteInput = {
    where: CotizacionWhereUniqueInput
    update: XOR<CotizacionUpdateWithoutClienteInput, CotizacionUncheckedUpdateWithoutClienteInput>
    create: XOR<CotizacionCreateWithoutClienteInput, CotizacionUncheckedCreateWithoutClienteInput>
  }

  export type CotizacionUpdateWithWhereUniqueWithoutClienteInput = {
    where: CotizacionWhereUniqueInput
    data: XOR<CotizacionUpdateWithoutClienteInput, CotizacionUncheckedUpdateWithoutClienteInput>
  }

  export type CotizacionUpdateManyWithWhereWithoutClienteInput = {
    where: CotizacionScalarWhereInput
    data: XOR<CotizacionUpdateManyMutationInput, CotizacionUncheckedUpdateManyWithoutClienteInput>
  }

  export type CotizacionScalarWhereInput = {
    AND?: CotizacionScalarWhereInput | CotizacionScalarWhereInput[]
    OR?: CotizacionScalarWhereInput[]
    NOT?: CotizacionScalarWhereInput | CotizacionScalarWhereInput[]
    id?: IntFilter<"Cotizacion"> | number
    clienteId?: IntNullableFilter<"Cotizacion"> | number | null
    canal?: StringFilter<"Cotizacion"> | string
    estado?: StringFilter<"Cotizacion"> | string
    totalEstimado?: DecimalNullableFilter<"Cotizacion"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullableFilter<"Cotizacion">
    createdAt?: DateTimeFilter<"Cotizacion"> | Date | string
  }

  export type AsignacionUpsertWithWhereUniqueWithoutOperadorInput = {
    where: AsignacionWhereUniqueInput
    update: XOR<AsignacionUpdateWithoutOperadorInput, AsignacionUncheckedUpdateWithoutOperadorInput>
    create: XOR<AsignacionCreateWithoutOperadorInput, AsignacionUncheckedCreateWithoutOperadorInput>
  }

  export type AsignacionUpdateWithWhereUniqueWithoutOperadorInput = {
    where: AsignacionWhereUniqueInput
    data: XOR<AsignacionUpdateWithoutOperadorInput, AsignacionUncheckedUpdateWithoutOperadorInput>
  }

  export type AsignacionUpdateManyWithWhereWithoutOperadorInput = {
    where: AsignacionScalarWhereInput
    data: XOR<AsignacionUpdateManyMutationInput, AsignacionUncheckedUpdateManyWithoutOperadorInput>
  }

  export type AsignacionScalarWhereInput = {
    AND?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
    OR?: AsignacionScalarWhereInput[]
    NOT?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
    id?: IntFilter<"Asignacion"> | number
    cotizacionId?: IntFilter<"Asignacion"> | number
    operadorId?: IntNullableFilter<"Asignacion"> | number | null
    estado?: StringFilter<"Asignacion"> | string
    slaMinutos?: IntFilter<"Asignacion"> | number
    vencimiento?: DateTimeFilter<"Asignacion"> | Date | string
    createdAt?: DateTimeFilter<"Asignacion"> | Date | string
    aceptadoEn?: DateTimeNullableFilter<"Asignacion"> | Date | string | null
    resueltoEn?: DateTimeNullableFilter<"Asignacion"> | Date | string | null
  }

  export type UserCreateWithoutResetsInput = {
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cliente?: ClienteCreateNestedOneWithoutUserInput
    pedidos?: PedidoCreateNestedManyWithoutUserInput
    cotizacionesCliente?: CotizacionCreateNestedManyWithoutClienteInput
    asignacionesOperador?: AsignacionCreateNestedManyWithoutOperadorInput
  }

  export type UserUncheckedCreateWithoutResetsInput = {
    id?: number
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cliente?: ClienteUncheckedCreateNestedOneWithoutUserInput
    pedidos?: PedidoUncheckedCreateNestedManyWithoutUserInput
    cotizacionesCliente?: CotizacionUncheckedCreateNestedManyWithoutClienteInput
    asignacionesOperador?: AsignacionUncheckedCreateNestedManyWithoutOperadorInput
  }

  export type UserCreateOrConnectWithoutResetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResetsInput, UserUncheckedCreateWithoutResetsInput>
  }

  export type UserUpsertWithoutResetsInput = {
    update: XOR<UserUpdateWithoutResetsInput, UserUncheckedUpdateWithoutResetsInput>
    create: XOR<UserCreateWithoutResetsInput, UserUncheckedCreateWithoutResetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResetsInput, UserUncheckedUpdateWithoutResetsInput>
  }

  export type UserUpdateWithoutResetsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteUpdateOneWithoutUserNestedInput
    pedidos?: PedidoUpdateManyWithoutUserNestedInput
    cotizacionesCliente?: CotizacionUpdateManyWithoutClienteNestedInput
    asignacionesOperador?: AsignacionUpdateManyWithoutOperadorNestedInput
  }

  export type UserUncheckedUpdateWithoutResetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteUncheckedUpdateOneWithoutUserNestedInput
    pedidos?: PedidoUncheckedUpdateManyWithoutUserNestedInput
    cotizacionesCliente?: CotizacionUncheckedUpdateManyWithoutClienteNestedInput
    asignacionesOperador?: AsignacionUncheckedUpdateManyWithoutOperadorNestedInput
  }

  export type UserCreateWithoutClienteInput = {
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resets?: PasswordResetCreateNestedManyWithoutUserInput
    pedidos?: PedidoCreateNestedManyWithoutUserInput
    cotizacionesCliente?: CotizacionCreateNestedManyWithoutClienteInput
    asignacionesOperador?: AsignacionCreateNestedManyWithoutOperadorInput
  }

  export type UserUncheckedCreateWithoutClienteInput = {
    id?: number
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    pedidos?: PedidoUncheckedCreateNestedManyWithoutUserInput
    cotizacionesCliente?: CotizacionUncheckedCreateNestedManyWithoutClienteInput
    asignacionesOperador?: AsignacionUncheckedCreateNestedManyWithoutOperadorInput
  }

  export type UserCreateOrConnectWithoutClienteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput>
  }

  export type UserUpsertWithoutClienteInput = {
    update: XOR<UserUpdateWithoutClienteInput, UserUncheckedUpdateWithoutClienteInput>
    create: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClienteInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClienteInput, UserUncheckedUpdateWithoutClienteInput>
  }

  export type UserUpdateWithoutClienteInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resets?: PasswordResetUpdateManyWithoutUserNestedInput
    pedidos?: PedidoUpdateManyWithoutUserNestedInput
    cotizacionesCliente?: CotizacionUpdateManyWithoutClienteNestedInput
    asignacionesOperador?: AsignacionUpdateManyWithoutOperadorNestedInput
  }

  export type UserUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    pedidos?: PedidoUncheckedUpdateManyWithoutUserNestedInput
    cotizacionesCliente?: CotizacionUncheckedUpdateManyWithoutClienteNestedInput
    asignacionesOperador?: AsignacionUncheckedUpdateManyWithoutOperadorNestedInput
  }

  export type OfertaCreateWithoutInventarioInput = {
    titulo: string
    descripcion?: string | null
    imageUrl?: string | null
    link?: string | null
    activo?: boolean
    prioridad?: number
    startAt?: Date | string | null
    endAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfertaUncheckedCreateWithoutInventarioInput = {
    id?: number
    titulo: string
    descripcion?: string | null
    imageUrl?: string | null
    link?: string | null
    activo?: boolean
    prioridad?: number
    startAt?: Date | string | null
    endAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfertaCreateOrConnectWithoutInventarioInput = {
    where: OfertaWhereUniqueInput
    create: XOR<OfertaCreateWithoutInventarioInput, OfertaUncheckedCreateWithoutInventarioInput>
  }

  export type OfertaCreateManyInventarioInputEnvelope = {
    data: OfertaCreateManyInventarioInput | OfertaCreateManyInventarioInput[]
    skipDuplicates?: boolean
  }

  export type OfertaUpsertWithWhereUniqueWithoutInventarioInput = {
    where: OfertaWhereUniqueInput
    update: XOR<OfertaUpdateWithoutInventarioInput, OfertaUncheckedUpdateWithoutInventarioInput>
    create: XOR<OfertaCreateWithoutInventarioInput, OfertaUncheckedCreateWithoutInventarioInput>
  }

  export type OfertaUpdateWithWhereUniqueWithoutInventarioInput = {
    where: OfertaWhereUniqueInput
    data: XOR<OfertaUpdateWithoutInventarioInput, OfertaUncheckedUpdateWithoutInventarioInput>
  }

  export type OfertaUpdateManyWithWhereWithoutInventarioInput = {
    where: OfertaScalarWhereInput
    data: XOR<OfertaUpdateManyMutationInput, OfertaUncheckedUpdateManyWithoutInventarioInput>
  }

  export type OfertaScalarWhereInput = {
    AND?: OfertaScalarWhereInput | OfertaScalarWhereInput[]
    OR?: OfertaScalarWhereInput[]
    NOT?: OfertaScalarWhereInput | OfertaScalarWhereInput[]
    id?: IntFilter<"Oferta"> | number
    titulo?: StringFilter<"Oferta"> | string
    descripcion?: StringNullableFilter<"Oferta"> | string | null
    imageUrl?: StringNullableFilter<"Oferta"> | string | null
    link?: StringNullableFilter<"Oferta"> | string | null
    activo?: BoolFilter<"Oferta"> | boolean
    prioridad?: IntFilter<"Oferta"> | number
    itemId?: IntNullableFilter<"Oferta"> | number | null
    startAt?: DateTimeNullableFilter<"Oferta"> | Date | string | null
    endAt?: DateTimeNullableFilter<"Oferta"> | Date | string | null
    createdAt?: DateTimeFilter<"Oferta"> | Date | string
    updatedAt?: DateTimeFilter<"Oferta"> | Date | string
  }

  export type UserCreateWithoutPedidosInput = {
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resets?: PasswordResetCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedOneWithoutUserInput
    cotizacionesCliente?: CotizacionCreateNestedManyWithoutClienteInput
    asignacionesOperador?: AsignacionCreateNestedManyWithoutOperadorInput
  }

  export type UserUncheckedCreateWithoutPedidosInput = {
    id?: number
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedOneWithoutUserInput
    cotizacionesCliente?: CotizacionUncheckedCreateNestedManyWithoutClienteInput
    asignacionesOperador?: AsignacionUncheckedCreateNestedManyWithoutOperadorInput
  }

  export type UserCreateOrConnectWithoutPedidosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPedidosInput, UserUncheckedCreateWithoutPedidosInput>
  }

  export type UserUpsertWithoutPedidosInput = {
    update: XOR<UserUpdateWithoutPedidosInput, UserUncheckedUpdateWithoutPedidosInput>
    create: XOR<UserCreateWithoutPedidosInput, UserUncheckedCreateWithoutPedidosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPedidosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPedidosInput, UserUncheckedUpdateWithoutPedidosInput>
  }

  export type UserUpdateWithoutPedidosInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resets?: PasswordResetUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateOneWithoutUserNestedInput
    cotizacionesCliente?: CotizacionUpdateManyWithoutClienteNestedInput
    asignacionesOperador?: AsignacionUpdateManyWithoutOperadorNestedInput
  }

  export type UserUncheckedUpdateWithoutPedidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateOneWithoutUserNestedInput
    cotizacionesCliente?: CotizacionUncheckedUpdateManyWithoutClienteNestedInput
    asignacionesOperador?: AsignacionUncheckedUpdateManyWithoutOperadorNestedInput
  }

  export type UserCreateWithoutCotizacionesClienteInput = {
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resets?: PasswordResetCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedOneWithoutUserInput
    pedidos?: PedidoCreateNestedManyWithoutUserInput
    asignacionesOperador?: AsignacionCreateNestedManyWithoutOperadorInput
  }

  export type UserUncheckedCreateWithoutCotizacionesClienteInput = {
    id?: number
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedOneWithoutUserInput
    pedidos?: PedidoUncheckedCreateNestedManyWithoutUserInput
    asignacionesOperador?: AsignacionUncheckedCreateNestedManyWithoutOperadorInput
  }

  export type UserCreateOrConnectWithoutCotizacionesClienteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCotizacionesClienteInput, UserUncheckedCreateWithoutCotizacionesClienteInput>
  }

  export type CotizacionItemCreateWithoutCotizacionInput = {
    producto: string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: number
    notas?: string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type CotizacionItemUncheckedCreateWithoutCotizacionInput = {
    id?: number
    producto: string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: number
    notas?: string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type CotizacionItemCreateOrConnectWithoutCotizacionInput = {
    where: CotizacionItemWhereUniqueInput
    create: XOR<CotizacionItemCreateWithoutCotizacionInput, CotizacionItemUncheckedCreateWithoutCotizacionInput>
  }

  export type CotizacionItemCreateManyCotizacionInputEnvelope = {
    data: CotizacionItemCreateManyCotizacionInput | CotizacionItemCreateManyCotizacionInput[]
    skipDuplicates?: boolean
  }

  export type AsignacionCreateWithoutCotizacionInput = {
    estado?: string
    slaMinutos?: number
    vencimiento: Date | string
    createdAt?: Date | string
    aceptadoEn?: Date | string | null
    resueltoEn?: Date | string | null
    operador?: UserCreateNestedOneWithoutAsignacionesOperadorInput
  }

  export type AsignacionUncheckedCreateWithoutCotizacionInput = {
    id?: number
    operadorId?: number | null
    estado?: string
    slaMinutos?: number
    vencimiento: Date | string
    createdAt?: Date | string
    aceptadoEn?: Date | string | null
    resueltoEn?: Date | string | null
  }

  export type AsignacionCreateOrConnectWithoutCotizacionInput = {
    where: AsignacionWhereUniqueInput
    create: XOR<AsignacionCreateWithoutCotizacionInput, AsignacionUncheckedCreateWithoutCotizacionInput>
  }

  export type AsignacionCreateManyCotizacionInputEnvelope = {
    data: AsignacionCreateManyCotizacionInput | AsignacionCreateManyCotizacionInput[]
    skipDuplicates?: boolean
  }

  export type CotizacionNotificacionCreateWithoutCotizacionInput = {
    canal: string
    destino: string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: Date | string | null
    estado: string
    createdAt?: Date | string
  }

  export type CotizacionNotificacionUncheckedCreateWithoutCotizacionInput = {
    id?: number
    canal: string
    destino: string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: Date | string | null
    estado: string
    createdAt?: Date | string
  }

  export type CotizacionNotificacionCreateOrConnectWithoutCotizacionInput = {
    where: CotizacionNotificacionWhereUniqueInput
    create: XOR<CotizacionNotificacionCreateWithoutCotizacionInput, CotizacionNotificacionUncheckedCreateWithoutCotizacionInput>
  }

  export type CotizacionNotificacionCreateManyCotizacionInputEnvelope = {
    data: CotizacionNotificacionCreateManyCotizacionInput | CotizacionNotificacionCreateManyCotizacionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCotizacionesClienteInput = {
    update: XOR<UserUpdateWithoutCotizacionesClienteInput, UserUncheckedUpdateWithoutCotizacionesClienteInput>
    create: XOR<UserCreateWithoutCotizacionesClienteInput, UserUncheckedCreateWithoutCotizacionesClienteInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCotizacionesClienteInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCotizacionesClienteInput, UserUncheckedUpdateWithoutCotizacionesClienteInput>
  }

  export type UserUpdateWithoutCotizacionesClienteInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resets?: PasswordResetUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateOneWithoutUserNestedInput
    pedidos?: PedidoUpdateManyWithoutUserNestedInput
    asignacionesOperador?: AsignacionUpdateManyWithoutOperadorNestedInput
  }

  export type UserUncheckedUpdateWithoutCotizacionesClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateOneWithoutUserNestedInput
    pedidos?: PedidoUncheckedUpdateManyWithoutUserNestedInput
    asignacionesOperador?: AsignacionUncheckedUpdateManyWithoutOperadorNestedInput
  }

  export type CotizacionItemUpsertWithWhereUniqueWithoutCotizacionInput = {
    where: CotizacionItemWhereUniqueInput
    update: XOR<CotizacionItemUpdateWithoutCotizacionInput, CotizacionItemUncheckedUpdateWithoutCotizacionInput>
    create: XOR<CotizacionItemCreateWithoutCotizacionInput, CotizacionItemUncheckedCreateWithoutCotizacionInput>
  }

  export type CotizacionItemUpdateWithWhereUniqueWithoutCotizacionInput = {
    where: CotizacionItemWhereUniqueInput
    data: XOR<CotizacionItemUpdateWithoutCotizacionInput, CotizacionItemUncheckedUpdateWithoutCotizacionInput>
  }

  export type CotizacionItemUpdateManyWithWhereWithoutCotizacionInput = {
    where: CotizacionItemScalarWhereInput
    data: XOR<CotizacionItemUpdateManyMutationInput, CotizacionItemUncheckedUpdateManyWithoutCotizacionInput>
  }

  export type CotizacionItemScalarWhereInput = {
    AND?: CotizacionItemScalarWhereInput | CotizacionItemScalarWhereInput[]
    OR?: CotizacionItemScalarWhereInput[]
    NOT?: CotizacionItemScalarWhereInput | CotizacionItemScalarWhereInput[]
    id?: IntFilter<"CotizacionItem"> | number
    cotizacionId?: IntFilter<"CotizacionItem"> | number
    producto?: StringFilter<"CotizacionItem"> | string
    variantes?: JsonNullableFilter<"CotizacionItem">
    cantidad?: IntFilter<"CotizacionItem"> | number
    notas?: StringNullableFilter<"CotizacionItem"> | string | null
    archivos?: JsonNullableFilter<"CotizacionItem">
    coberturaInk?: DecimalNullableFilter<"CotizacionItem"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"CotizacionItem"> | Date | string
  }

  export type AsignacionUpsertWithWhereUniqueWithoutCotizacionInput = {
    where: AsignacionWhereUniqueInput
    update: XOR<AsignacionUpdateWithoutCotizacionInput, AsignacionUncheckedUpdateWithoutCotizacionInput>
    create: XOR<AsignacionCreateWithoutCotizacionInput, AsignacionUncheckedCreateWithoutCotizacionInput>
  }

  export type AsignacionUpdateWithWhereUniqueWithoutCotizacionInput = {
    where: AsignacionWhereUniqueInput
    data: XOR<AsignacionUpdateWithoutCotizacionInput, AsignacionUncheckedUpdateWithoutCotizacionInput>
  }

  export type AsignacionUpdateManyWithWhereWithoutCotizacionInput = {
    where: AsignacionScalarWhereInput
    data: XOR<AsignacionUpdateManyMutationInput, AsignacionUncheckedUpdateManyWithoutCotizacionInput>
  }

  export type CotizacionNotificacionUpsertWithWhereUniqueWithoutCotizacionInput = {
    where: CotizacionNotificacionWhereUniqueInput
    update: XOR<CotizacionNotificacionUpdateWithoutCotizacionInput, CotizacionNotificacionUncheckedUpdateWithoutCotizacionInput>
    create: XOR<CotizacionNotificacionCreateWithoutCotizacionInput, CotizacionNotificacionUncheckedCreateWithoutCotizacionInput>
  }

  export type CotizacionNotificacionUpdateWithWhereUniqueWithoutCotizacionInput = {
    where: CotizacionNotificacionWhereUniqueInput
    data: XOR<CotizacionNotificacionUpdateWithoutCotizacionInput, CotizacionNotificacionUncheckedUpdateWithoutCotizacionInput>
  }

  export type CotizacionNotificacionUpdateManyWithWhereWithoutCotizacionInput = {
    where: CotizacionNotificacionScalarWhereInput
    data: XOR<CotizacionNotificacionUpdateManyMutationInput, CotizacionNotificacionUncheckedUpdateManyWithoutCotizacionInput>
  }

  export type CotizacionNotificacionScalarWhereInput = {
    AND?: CotizacionNotificacionScalarWhereInput | CotizacionNotificacionScalarWhereInput[]
    OR?: CotizacionNotificacionScalarWhereInput[]
    NOT?: CotizacionNotificacionScalarWhereInput | CotizacionNotificacionScalarWhereInput[]
    id?: IntFilter<"CotizacionNotificacion"> | number
    cotizacionId?: IntFilter<"CotizacionNotificacion"> | number
    canal?: StringFilter<"CotizacionNotificacion"> | string
    destino?: StringFilter<"CotizacionNotificacion"> | string
    payload?: JsonNullableFilter<"CotizacionNotificacion">
    enviadoEn?: DateTimeNullableFilter<"CotizacionNotificacion"> | Date | string | null
    estado?: StringFilter<"CotizacionNotificacion"> | string
    createdAt?: DateTimeFilter<"CotizacionNotificacion"> | Date | string
  }

  export type CotizacionCreateWithoutItemsInput = {
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    cliente?: UserCreateNestedOneWithoutCotizacionesClienteInput
    asignaciones?: AsignacionCreateNestedManyWithoutCotizacionInput
    notificaciones?: CotizacionNotificacionCreateNestedManyWithoutCotizacionInput
  }

  export type CotizacionUncheckedCreateWithoutItemsInput = {
    id?: number
    clienteId?: number | null
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutCotizacionInput
    notificaciones?: CotizacionNotificacionUncheckedCreateNestedManyWithoutCotizacionInput
  }

  export type CotizacionCreateOrConnectWithoutItemsInput = {
    where: CotizacionWhereUniqueInput
    create: XOR<CotizacionCreateWithoutItemsInput, CotizacionUncheckedCreateWithoutItemsInput>
  }

  export type CotizacionUpsertWithoutItemsInput = {
    update: XOR<CotizacionUpdateWithoutItemsInput, CotizacionUncheckedUpdateWithoutItemsInput>
    create: XOR<CotizacionCreateWithoutItemsInput, CotizacionUncheckedCreateWithoutItemsInput>
    where?: CotizacionWhereInput
  }

  export type CotizacionUpdateToOneWithWhereWithoutItemsInput = {
    where?: CotizacionWhereInput
    data: XOR<CotizacionUpdateWithoutItemsInput, CotizacionUncheckedUpdateWithoutItemsInput>
  }

  export type CotizacionUpdateWithoutItemsInput = {
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: UserUpdateOneWithoutCotizacionesClienteNestedInput
    asignaciones?: AsignacionUpdateManyWithoutCotizacionNestedInput
    notificaciones?: CotizacionNotificacionUpdateManyWithoutCotizacionNestedInput
  }

  export type CotizacionUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asignaciones?: AsignacionUncheckedUpdateManyWithoutCotizacionNestedInput
    notificaciones?: CotizacionNotificacionUncheckedUpdateManyWithoutCotizacionNestedInput
  }

  export type CotizacionCreateWithoutAsignacionesInput = {
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    cliente?: UserCreateNestedOneWithoutCotizacionesClienteInput
    items?: CotizacionItemCreateNestedManyWithoutCotizacionInput
    notificaciones?: CotizacionNotificacionCreateNestedManyWithoutCotizacionInput
  }

  export type CotizacionUncheckedCreateWithoutAsignacionesInput = {
    id?: number
    clienteId?: number | null
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    items?: CotizacionItemUncheckedCreateNestedManyWithoutCotizacionInput
    notificaciones?: CotizacionNotificacionUncheckedCreateNestedManyWithoutCotizacionInput
  }

  export type CotizacionCreateOrConnectWithoutAsignacionesInput = {
    where: CotizacionWhereUniqueInput
    create: XOR<CotizacionCreateWithoutAsignacionesInput, CotizacionUncheckedCreateWithoutAsignacionesInput>
  }

  export type UserCreateWithoutAsignacionesOperadorInput = {
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resets?: PasswordResetCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedOneWithoutUserInput
    pedidos?: PedidoCreateNestedManyWithoutUserInput
    cotizacionesCliente?: CotizacionCreateNestedManyWithoutClienteInput
  }

  export type UserUncheckedCreateWithoutAsignacionesOperadorInput = {
    id?: number
    email: string
    passwordHash: string
    fullName: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedOneWithoutUserInput
    pedidos?: PedidoUncheckedCreateNestedManyWithoutUserInput
    cotizacionesCliente?: CotizacionUncheckedCreateNestedManyWithoutClienteInput
  }

  export type UserCreateOrConnectWithoutAsignacionesOperadorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAsignacionesOperadorInput, UserUncheckedCreateWithoutAsignacionesOperadorInput>
  }

  export type CotizacionUpsertWithoutAsignacionesInput = {
    update: XOR<CotizacionUpdateWithoutAsignacionesInput, CotizacionUncheckedUpdateWithoutAsignacionesInput>
    create: XOR<CotizacionCreateWithoutAsignacionesInput, CotizacionUncheckedCreateWithoutAsignacionesInput>
    where?: CotizacionWhereInput
  }

  export type CotizacionUpdateToOneWithWhereWithoutAsignacionesInput = {
    where?: CotizacionWhereInput
    data: XOR<CotizacionUpdateWithoutAsignacionesInput, CotizacionUncheckedUpdateWithoutAsignacionesInput>
  }

  export type CotizacionUpdateWithoutAsignacionesInput = {
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: UserUpdateOneWithoutCotizacionesClienteNestedInput
    items?: CotizacionItemUpdateManyWithoutCotizacionNestedInput
    notificaciones?: CotizacionNotificacionUpdateManyWithoutCotizacionNestedInput
  }

  export type CotizacionUncheckedUpdateWithoutAsignacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CotizacionItemUncheckedUpdateManyWithoutCotizacionNestedInput
    notificaciones?: CotizacionNotificacionUncheckedUpdateManyWithoutCotizacionNestedInput
  }

  export type UserUpsertWithoutAsignacionesOperadorInput = {
    update: XOR<UserUpdateWithoutAsignacionesOperadorInput, UserUncheckedUpdateWithoutAsignacionesOperadorInput>
    create: XOR<UserCreateWithoutAsignacionesOperadorInput, UserUncheckedCreateWithoutAsignacionesOperadorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAsignacionesOperadorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAsignacionesOperadorInput, UserUncheckedUpdateWithoutAsignacionesOperadorInput>
  }

  export type UserUpdateWithoutAsignacionesOperadorInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resets?: PasswordResetUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateOneWithoutUserNestedInput
    pedidos?: PedidoUpdateManyWithoutUserNestedInput
    cotizacionesCliente?: CotizacionUpdateManyWithoutClienteNestedInput
  }

  export type UserUncheckedUpdateWithoutAsignacionesOperadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateOneWithoutUserNestedInput
    pedidos?: PedidoUncheckedUpdateManyWithoutUserNestedInput
    cotizacionesCliente?: CotizacionUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type CotizacionCreateWithoutNotificacionesInput = {
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    cliente?: UserCreateNestedOneWithoutCotizacionesClienteInput
    items?: CotizacionItemCreateNestedManyWithoutCotizacionInput
    asignaciones?: AsignacionCreateNestedManyWithoutCotizacionInput
  }

  export type CotizacionUncheckedCreateWithoutNotificacionesInput = {
    id?: number
    clienteId?: number | null
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    items?: CotizacionItemUncheckedCreateNestedManyWithoutCotizacionInput
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutCotizacionInput
  }

  export type CotizacionCreateOrConnectWithoutNotificacionesInput = {
    where: CotizacionWhereUniqueInput
    create: XOR<CotizacionCreateWithoutNotificacionesInput, CotizacionUncheckedCreateWithoutNotificacionesInput>
  }

  export type CotizacionUpsertWithoutNotificacionesInput = {
    update: XOR<CotizacionUpdateWithoutNotificacionesInput, CotizacionUncheckedUpdateWithoutNotificacionesInput>
    create: XOR<CotizacionCreateWithoutNotificacionesInput, CotizacionUncheckedCreateWithoutNotificacionesInput>
    where?: CotizacionWhereInput
  }

  export type CotizacionUpdateToOneWithWhereWithoutNotificacionesInput = {
    where?: CotizacionWhereInput
    data: XOR<CotizacionUpdateWithoutNotificacionesInput, CotizacionUncheckedUpdateWithoutNotificacionesInput>
  }

  export type CotizacionUpdateWithoutNotificacionesInput = {
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: UserUpdateOneWithoutCotizacionesClienteNestedInput
    items?: CotizacionItemUpdateManyWithoutCotizacionNestedInput
    asignaciones?: AsignacionUpdateManyWithoutCotizacionNestedInput
  }

  export type CotizacionUncheckedUpdateWithoutNotificacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CotizacionItemUncheckedUpdateManyWithoutCotizacionNestedInput
    asignaciones?: AsignacionUncheckedUpdateManyWithoutCotizacionNestedInput
  }

  export type InventoryItemCreateWithoutOfertasInput = {
    code: string
    name: string
    itemType: string
    color: string
    provider: string
    quantity?: number
    priceWeb?: number
    priceStore?: number
    priceWsp?: number
    umbralBajoStock?: number
    qrRaw?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemUncheckedCreateWithoutOfertasInput = {
    id?: number
    code: string
    name: string
    itemType: string
    color: string
    provider: string
    quantity?: number
    priceWeb?: number
    priceStore?: number
    priceWsp?: number
    umbralBajoStock?: number
    qrRaw?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemCreateOrConnectWithoutOfertasInput = {
    where: InventoryItemWhereUniqueInput
    create: XOR<InventoryItemCreateWithoutOfertasInput, InventoryItemUncheckedCreateWithoutOfertasInput>
  }

  export type InventoryItemUpsertWithoutOfertasInput = {
    update: XOR<InventoryItemUpdateWithoutOfertasInput, InventoryItemUncheckedUpdateWithoutOfertasInput>
    create: XOR<InventoryItemCreateWithoutOfertasInput, InventoryItemUncheckedCreateWithoutOfertasInput>
    where?: InventoryItemWhereInput
  }

  export type InventoryItemUpdateToOneWithWhereWithoutOfertasInput = {
    where?: InventoryItemWhereInput
    data: XOR<InventoryItemUpdateWithoutOfertasInput, InventoryItemUncheckedUpdateWithoutOfertasInput>
  }

  export type InventoryItemUpdateWithoutOfertasInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    priceWeb?: IntFieldUpdateOperationsInput | number
    priceStore?: IntFieldUpdateOperationsInput | number
    priceWsp?: IntFieldUpdateOperationsInput | number
    umbralBajoStock?: IntFieldUpdateOperationsInput | number
    qrRaw?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemUncheckedUpdateWithoutOfertasInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    priceWeb?: IntFieldUpdateOperationsInput | number
    priceStore?: IntFieldUpdateOperationsInput | number
    priceWsp?: IntFieldUpdateOperationsInput | number
    umbralBajoStock?: IntFieldUpdateOperationsInput | number
    qrRaw?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetCreateManyUserInput = {
    id?: number
    tokenHash: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type PedidoCreateManyUserInput = {
    id?: number
    clienteEmail?: string | null
    clienteNombre?: string | null
    estado?: string
    notificado?: boolean
    total?: number | null
    itemsCount?: number | null
    materialId?: string | null
    materialLabel?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CotizacionCreateManyClienteInput = {
    id?: number
    canal: string
    estado?: string
    totalEstimado?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AsignacionCreateManyOperadorInput = {
    id?: number
    cotizacionId: number
    estado?: string
    slaMinutos?: number
    vencimiento: Date | string
    createdAt?: Date | string
    aceptadoEn?: Date | string | null
    resueltoEn?: Date | string | null
  }

  export type PasswordResetUpdateWithoutUserInput = {
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoUpdateWithoutUserInput = {
    clienteEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clienteNombre?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    notificado?: BoolFieldUpdateOperationsInput | boolean
    total?: NullableIntFieldUpdateOperationsInput | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    materialId?: NullableStringFieldUpdateOperationsInput | string | null
    materialLabel?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clienteNombre?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    notificado?: BoolFieldUpdateOperationsInput | boolean
    total?: NullableIntFieldUpdateOperationsInput | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    materialId?: NullableStringFieldUpdateOperationsInput | string | null
    materialLabel?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clienteNombre?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    notificado?: BoolFieldUpdateOperationsInput | boolean
    total?: NullableIntFieldUpdateOperationsInput | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    materialId?: NullableStringFieldUpdateOperationsInput | string | null
    materialLabel?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionUpdateWithoutClienteInput = {
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CotizacionItemUpdateManyWithoutCotizacionNestedInput
    asignaciones?: AsignacionUpdateManyWithoutCotizacionNestedInput
    notificaciones?: CotizacionNotificacionUpdateManyWithoutCotizacionNestedInput
  }

  export type CotizacionUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CotizacionItemUncheckedUpdateManyWithoutCotizacionNestedInput
    asignaciones?: AsignacionUncheckedUpdateManyWithoutCotizacionNestedInput
    notificaciones?: CotizacionNotificacionUncheckedUpdateManyWithoutCotizacionNestedInput
  }

  export type CotizacionUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    canal?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    totalEstimado?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AsignacionUpdateWithoutOperadorInput = {
    estado?: StringFieldUpdateOperationsInput | string
    slaMinutos?: IntFieldUpdateOperationsInput | number
    vencimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aceptadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resueltoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cotizacion?: CotizacionUpdateOneRequiredWithoutAsignacionesNestedInput
  }

  export type AsignacionUncheckedUpdateWithoutOperadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    cotizacionId?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    slaMinutos?: IntFieldUpdateOperationsInput | number
    vencimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aceptadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resueltoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AsignacionUncheckedUpdateManyWithoutOperadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    cotizacionId?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    slaMinutos?: IntFieldUpdateOperationsInput | number
    vencimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aceptadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resueltoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OfertaCreateManyInventarioInput = {
    id?: number
    titulo: string
    descripcion?: string | null
    imageUrl?: string | null
    link?: string | null
    activo?: boolean
    prioridad?: number
    startAt?: Date | string | null
    endAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfertaUpdateWithoutInventarioInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    prioridad?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfertaUncheckedUpdateWithoutInventarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    prioridad?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfertaUncheckedUpdateManyWithoutInventarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    prioridad?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionItemCreateManyCotizacionInput = {
    id?: number
    producto: string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: number
    notas?: string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type AsignacionCreateManyCotizacionInput = {
    id?: number
    operadorId?: number | null
    estado?: string
    slaMinutos?: number
    vencimiento: Date | string
    createdAt?: Date | string
    aceptadoEn?: Date | string | null
    resueltoEn?: Date | string | null
  }

  export type CotizacionNotificacionCreateManyCotizacionInput = {
    id?: number
    canal: string
    destino: string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: Date | string | null
    estado: string
    createdAt?: Date | string
  }

  export type CotizacionItemUpdateWithoutCotizacionInput = {
    producto?: StringFieldUpdateOperationsInput | string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: IntFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionItemUncheckedUpdateWithoutCotizacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    producto?: StringFieldUpdateOperationsInput | string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: IntFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionItemUncheckedUpdateManyWithoutCotizacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    producto?: StringFieldUpdateOperationsInput | string
    variantes?: NullableJsonNullValueInput | InputJsonValue
    cantidad?: IntFieldUpdateOperationsInput | number
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    archivos?: NullableJsonNullValueInput | InputJsonValue
    coberturaInk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AsignacionUpdateWithoutCotizacionInput = {
    estado?: StringFieldUpdateOperationsInput | string
    slaMinutos?: IntFieldUpdateOperationsInput | number
    vencimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aceptadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resueltoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operador?: UserUpdateOneWithoutAsignacionesOperadorNestedInput
  }

  export type AsignacionUncheckedUpdateWithoutCotizacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    operadorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: StringFieldUpdateOperationsInput | string
    slaMinutos?: IntFieldUpdateOperationsInput | number
    vencimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aceptadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resueltoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AsignacionUncheckedUpdateManyWithoutCotizacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    operadorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: StringFieldUpdateOperationsInput | string
    slaMinutos?: IntFieldUpdateOperationsInput | number
    vencimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aceptadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resueltoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CotizacionNotificacionUpdateWithoutCotizacionInput = {
    canal?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionNotificacionUncheckedUpdateWithoutCotizacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    canal?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CotizacionNotificacionUncheckedUpdateManyWithoutCotizacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    canal?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    payload?: NullableJsonNullValueInput | InputJsonValue
    enviadoEn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryItemCountOutputTypeDefaultArgs instead
     */
    export type InventoryItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CotizacionCountOutputTypeDefaultArgs instead
     */
    export type CotizacionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CotizacionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PasswordResetDefaultArgs instead
     */
    export type PasswordResetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PasswordResetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteDefaultArgs instead
     */
    export type ClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryItemDefaultArgs instead
     */
    export type InventoryItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PedidoDefaultArgs instead
     */
    export type PedidoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PedidoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CotizacionDefaultArgs instead
     */
    export type CotizacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CotizacionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CotizacionItemDefaultArgs instead
     */
    export type CotizacionItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CotizacionItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AsignacionDefaultArgs instead
     */
    export type AsignacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AsignacionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CotizacionNotificacionDefaultArgs instead
     */
    export type CotizacionNotificacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CotizacionNotificacionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OfertaDefaultArgs instead
     */
    export type OfertaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OfertaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}