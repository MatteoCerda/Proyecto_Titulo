generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                   Int             @id @default(autoincrement())
  email                String          @unique
  passwordHash         String
  fullName             String
  role                 String          @default("user")
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  resets               PasswordReset[]
  // Relacion 1:1 con perfil de cliente
  cliente              Cliente?
  pedidos              Pedido[]
  cotizacionesCliente  Cotizacion[]    @relation("CotizacionCliente")
  asignacionesOperador Asignacion[]    @relation("AsignacionOperador")
}

model PasswordReset {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  tokenHash String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([userId])
}

// Perfil de cliente (opcional) vinculado a User
model Cliente {
  id_cliente      Int      @id @default(autoincrement())
  rut             String?  @db.VarChar(15)
  nombre_contacto String?  @db.VarChar(150)
  email           String?  @db.VarChar(120)
  telefono        String?  @db.VarChar(30)
  direccion       String?  @db.VarChar(200)
  comuna          String?  @db.VarChar(80)
  ciudad          String?  @db.VarChar(80)
  id_usuario      Int      @unique
  user            User     @relation(fields: [id_usuario], references: [id])
  creado_en       DateTime @default(now())

  @@index([id_usuario])
  @@map("cliente")
}

model InventoryItem {
  id              Int      @id @default(autoincrement())
  code            String   @unique
  name            String
  itemType        String
  color           String
  provider        String
  quantity        Int      @default(0)
  priceWeb        Int      @default(0) @map("price_web")
  priceStore      Int      @default(0) @map("price_store")
  priceWsp        Int      @default(0) @map("price_wsp")
  /// Umbral para aviso de bajo stock
  umbralBajoStock Int      @default(0) @map("umbral_bajo_stock")
  qrRaw           String?
  imageUrl        String?  @db.LongText
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  ofertas         Oferta[]

  @@map("inventory_item")
}

model Pedido {
  id            Int      @id @default(autoincrement())
  userId        Int?
  user          User?    @relation(fields: [userId], references: [id])
  clienteEmail  String?
  clienteNombre String?
  estado        String   @default("PENDIENTE")
  notificado    Boolean  @default(true)
  total         Int?     @default(0)
  itemsCount    Int?     @default(0)
  materialId    String?
  materialLabel String?
  payload       Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("pedido")
}

model Cotizacion {
  id            Int      @id @default(autoincrement())
  clienteId     Int?     @map("cliente_id")
  canal         String   @db.VarChar(30)
  estado        String   @default("NUEVA") @db.VarChar(30)
  totalEstimado Decimal? @map("total_estimado") @db.Decimal(12, 2)
  metadata      Json?    @map("metadata")
  createdAt     DateTime @default(now()) @map("creado_en")

  cliente        User?                    @relation("CotizacionCliente", fields: [clienteId], references: [id])
  items          CotizacionItem[]
  asignaciones   Asignacion[]
  notificaciones CotizacionNotificacion[]

  @@map("cotizacion")
}

model CotizacionItem {
  id           Int      @id @default(autoincrement())
  cotizacionId Int      @map("cotizacion_id")
  producto     String   @db.VarChar(200)
  variantes    Json?    @map("variantes")
  cantidad     Int      @default(1)
  notas        String?  @db.Text
  archivos     Json?    @map("archivos")
  coberturaInk Decimal? @map("cobertura_ink_pct") @db.Decimal(5, 2)
  createdAt    DateTime @default(now()) @map("creado_en")

  cotizacion Cotizacion @relation(fields: [cotizacionId], references: [id])

  @@map("cotizacion_item")
}

model Asignacion {
  id           Int       @id @default(autoincrement())
  cotizacionId Int       @map("cotizacion_id")
  operadorId   Int?      @map("operador_id")
  estado       String    @default("PENDIENTE") @db.VarChar(30)
  slaMinutos   Int       @default(10) @map("sla_minutos")
  vencimiento  DateTime  @map("vencimiento")
  createdAt    DateTime  @default(now()) @map("creado_en")
  aceptadoEn   DateTime? @map("aceptado_en")
  resueltoEn   DateTime? @map("resuelto_en")

  cotizacion Cotizacion @relation(fields: [cotizacionId], references: [id])
  operador   User?      @relation("AsignacionOperador", fields: [operadorId], references: [id])

  @@index([operadorId])
  @@index([estado])
  @@index([vencimiento])
  @@map("asignacion")
}

model CotizacionNotificacion {
  id           Int       @id @default(autoincrement())
  cotizacionId Int       @map("cotizacion_id")
  canal        String    @db.VarChar(30)
  destino      String    @db.VarChar(255)
  payload      Json?
  enviadoEn    DateTime? @map("enviado_en")
  estado       String    @db.VarChar(30)
  createdAt    DateTime  @default(now()) @map("creado_en")

  cotizacion Cotizacion @relation(fields: [cotizacionId], references: [id])

  @@map("notificacion")
}

model Oferta {
  id          Int       @id @default(autoincrement())
  titulo      String
  descripcion String?   @db.Text
  imageUrl    String?   @db.Text
  link        String?   @db.VarChar(255)
  activo      Boolean   @default(true)
  prioridad   Int       @default(0)
  itemId      Int?      @map("item_id")
  startAt     DateTime? @map("inicio_en")
  endAt       DateTime? @map("fin_en")
  createdAt   DateTime  @default(now()) @map("creado_en")
  updatedAt   DateTime  @updatedAt @map("actualizado_en")

  inventario InventoryItem? @relation(fields: [itemId], references: [id])

  @@index([activo])
  @@index([startAt])
  @@index([endAt])
  @@map("oferta")
}
