generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  fullName     String
  role         String   @default("user")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resets       PasswordReset[]
  // Relacion 1:1 con perfil de cliente
  cliente      Cliente?
  pedidos      Pedido[]
}

model PasswordReset {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  tokenHash    String
  expiresAt    DateTime
  usedAt       DateTime?
  createdAt    DateTime  @default(now())
  @@index([userId])
}

// Perfil de cliente (opcional) vinculado a User
model Cliente {
  id_cliente       Int      @id @default(autoincrement())
  rut              String?  @db.VarChar(15)
  nombre_contacto  String?  @db.VarChar(150)
  email            String?  @db.VarChar(120)
  telefono         String?  @db.VarChar(30)
  direccion        String?  @db.VarChar(200)
  comuna           String?  @db.VarChar(80)
  ciudad           String?  @db.VarChar(80)
  id_usuario       Int      @unique
  user             User     @relation(fields: [id_usuario], references: [id])
  creado_en        DateTime @default(now())

  @@index([id_usuario])
  @@map("cliente")
}

model InventoryItem {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  itemType  String
  color     String
  provider  String
  quantity  Int      @default(0)
  priceWeb  Int      @default(0) @map("price_web")
  priceStore Int     @default(0) @map("price_store")
  priceWsp  Int      @default(0) @map("price_wsp")
  /// Umbral para aviso de bajo stock
  umbralBajoStock Int @default(0) @map("umbral_bajo_stock")
  qrRaw     String?
  imageUrl  String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("inventory_item")
}

model Pedido {
  id             Int      @id @default(autoincrement())
  userId         Int?
  user           User?    @relation(fields: [userId], references: [id])
  clienteEmail   String?
  clienteNombre  String?
  estado         String   @default("PENDIENTE")
  notificado     Boolean  @default(true)
  total          Int?     @default(0)
  itemsCount     Int?     @default(0)
  materialId     String?
  materialLabel  String?
  payload        Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("pedido")
}
